-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package naruto-unison
@version 0.0.0


-- | Settings are centralized, as much as possible, into this file. This
--   includes database connection settings, static file locations, etc. In
--   addition, you can configure a number of different aspects of Yesod by
--   overriding methods in the Yesod typeclass. That instance is declared
--   in the Foundation.hs file.
module Core.Settings

-- | Runtime settings to configure this application. These settings can be
--   loaded from various sources: defaults, environment variables, config
--   files, theoretically even a database.
data AppSettings
AppSettings :: String -> PostgresConf -> Maybe Text -> HostPreference -> Int -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Text -> Maybe Text -> Bool -> AppSettings

-- | Directory from which to serve static files.
[appStaticDir] :: AppSettings -> String

-- | Configuration settings for accessing the database.
[appDatabaseConf] :: AppSettings -> PostgresConf

-- | Base for all generated URLs. If <tt>Nothing</tt>, determined from the
--   request headers.
[appRoot] :: AppSettings -> Maybe Text

-- | Host/interface the server should bind to.
[appHost] :: AppSettings -> HostPreference

-- | Port to listen on
[appPort] :: AppSettings -> Int

-- | Get the IP address from the header when logging. Useful when sitting
--   behind a reverse proxy.
[appIpFromHeader] :: AppSettings -> Bool

-- | Use detailed request logging system
[appDetailedRequestLogging] :: AppSettings -> Bool

-- | Should all log messages be displayed?
[appShouldLogAll] :: AppSettings -> Bool

-- | Use the reload version of templates
[appReloadTemplates] :: AppSettings -> Bool

-- | Assume that files in the static dir may change after compilation
[appMutableStatic] :: AppSettings -> Bool

-- | Perform no stylesheet/script combining
[appSkipCombining] :: AppSettings -> Bool

-- | Copyright text to appear in the footer of the page
[appCopyright] :: AppSettings -> Text

-- | Google Analytics code
[appAnalytics] :: AppSettings -> Maybe Text

-- | Indicate if auth dummy login should be enabled.
[appAuthDummyLogin] :: AppSettings -> Bool

-- | Settings for <a>widgetFile</a>, such as which template languages to
--   support and default Hamlet settings.
--   
--   For more information on modifying behavior, see:
--   
--   <a>https://github.com/yesodweb/yesod/wiki/Overriding-widgetFile</a>
widgetFileSettings :: WidgetFileSettings

-- | How static files should be combined.
combineSettings :: CombineSettings

-- | Bundles and renders a matching .hamlet file, .lucius file, and .julius
--   file
widgetFile :: String -> Q Exp

-- | Raw bytes at compile time of <tt>config/settings.yml</tt>
configSettingsYmlBS :: ByteString

-- | <tt>config/settings.yml</tt>, parsed to a <tt>Value</tt>.
configSettingsYmlValue :: Value

-- | A version of <tt>AppSettings</tt> parsed at compile time from
--   <tt>config/settings.yml</tt>.
compileTimeAppSettings :: AppSettings

-- | Combines multiple CSS files to decrease the number of http requests.
--   Sample usage (inside a <tt>Widget</tt>): &gt; $(combineStylesheets
--   'staticR [style1_css, style2_css])
combineStylesheets :: Name -> [Route Static] -> Q Exp

-- | Combines multiple Javscript files to decrease the number of http
--   requests. Sample usage (inside a <tt>Widget</tt>): &gt;
--   $(combineScripts 'staticR [script1_js, script2_js])
combineScripts :: Name -> [Route Static] -> Q Exp
instance Data.Aeson.Types.FromJSON.FromJSON Core.Settings.AppSettings


-- | Various unicode synonyms for basic functions.
module Core.Unicode

-- | <a>$</a> with right-fixity 1
(§) :: (a -> b) -> a -> b
infixr 2 §

-- | <a>.</a> with right-fixity 7
(∘) :: (b -> g) -> (a -> b) -> a -> g
infixr 7 ∘

-- | A subtraction symbol that respects sections, like <a>subtract</a>.
(—) :: Num a => a -> a -> a

-- | <a>quot</a>
(÷) :: Integral a => a -> a -> a
infixl 7 ÷

-- | <a>mod</a>
(٪) :: Integral a => a -> a -> a
infix 7 ٪

-- | <a>not</a> . <a>null</a> . <a>intersect</a>
(⩀) :: Eq a => [a] -> [a] -> Bool
infix 6 ⩀

-- | <a>append</a>
(☩) :: Text -> Text -> Text
(◁) :: a -> Seq a -> Seq a
infixr 5 ◁
(▷) :: Seq a -> a -> Seq a
infixl 5 ▷
(◇) :: Seq a -> Seq a -> Seq a
infixr 5 ◇

-- | <a>elem</a>
(∈) :: (Foldable a, Eq b) => b -> a b -> Bool
infix 4 ∈

-- | <a>notElem</a>
(∉) :: (Foldable a, Eq b) => b -> a b -> Bool
infix 4 ∉

-- | <tt>errorEmptyList</tt>
ø :: Seq a


-- | Data structures for gameplay.
module Game.Structure
half :: Int -> Int
sync :: Int -> Int
teamSize :: Int
gameSize :: Int
gameIndices :: [Int]

-- | The type signature of game actions. Processed into <a>Game</a> →
--   <a>Game</a>.
type Transform = (Skill -> Slot -> Slot -> Game -> Slot -> Game)

-- | The type signature of <a>Trap</a> actions.
type TrapTransform = (Int -> Slot -> Game -> Game)

-- | A type that decreases every turn.
class TurnBased a
getDur :: TurnBased a => a -> Int
setDur :: TurnBased a => Int -> a -> a
decrTurn :: TurnBased a => a -> Maybe a
class Labeled a
getL :: Labeled a => a -> Text
getSrc :: Labeled a => a -> Slot
lEq :: Labeled a => a -> a -> Bool
lMatch :: Labeled a => Text -> Slot -> a -> Bool
data Affected
Applied :: Affected
Channeled :: Affected
Countered :: Affected
Delayed :: Affected
Disrupted :: Affected
Parrying :: Affected
Redirected :: Affected
Reflected :: Affected
Swapped :: Affected
Trapped :: Affected

-- | Qualifiers of <a>Skill</a>s and <a>Status</a>es.
data Class
Invisible :: Class
InvisibleTraps :: Class
Soulbound :: Class
Bane :: Class
Summon :: Class
Melee :: Class
Ranged :: Class
Chakra :: Class
Physical :: Class
Mental :: Class
Nonstacking :: Class
Single :: Class
Multi :: Class
Extending :: Class
Bypassing :: Class
Uncounterable :: Class
Unreflectable :: Class
Unremovable :: Class
Necromancy :: Class
All :: Class
Hidden :: Class
Affliction :: Class
NonAffliction :: Class
NonMental :: Class
Shifted :: Class
Unshifted :: Class
Direct :: Class
BaseTrap :: Class
NewRandoms :: Class
Bloodline :: Class
Genjutsu :: Class
Ninjutsu :: Class
Taijutsu :: Class
Random :: Class
allClasses :: [Class]

-- | A <a>Skill</a> obtained from a different character.
data Copied
Copied :: !Skill -> !Int -> Copied
[copiedSkill] :: Copied -> !Skill
[copiedDur] :: Copied -> !Int

-- | Effects of <a>Status</a>es.
data Effect

-- | Deals damage every turn
Afflict :: !Int -> Effect

-- | Cannot be countered or reflected
AntiCounter :: Effect

-- | Adds to damage received
Bleed :: !Class -> !Int -> Effect

-- | Adds to healing <a>Skill</a>s
Bless :: !Int -> Effect

-- | Treats source as <a>Immune</a>
Block :: Effect

-- | Scales effects from allies
Boost :: !Int -> Effect

-- | Adds to destructible defense <a>Skill</a>
Build :: !Int -> Effect

-- | Counters the first <a>Skill</a>s
Counter :: !Class -> Effect

-- | <a>Counter</a>s without being removed
CounterAll :: !Class -> Effect

-- | <a>Immune</a> to everyone but source
Duel :: Effect

-- | Health cannot go below 1
Endure :: Effect

-- | Ignore status effects
Enrage :: Effect

-- | <a>Skill</a>s cost an additional random chakra
Exhaust :: !Class -> Effect

-- | Cannot reduce damage or be <a>Immune</a>
Expose :: Effect

-- | Immune to <a>Stun</a>s
Focus :: Effect

-- | Heals every turn
Heal :: !Int -> Effect

-- | Invulnerable to enemy <a>Skill</a>s
Immune :: !Class -> Effect

-- | Immune to internal damage
ImmuneSelf :: Effect

-- | Unable to affect others
Isolate :: Effect

-- | Increases damage and healing from source
Link :: !Int -> Effect

-- | Prevents effects from being applied
Nullify :: !Effect -> Effect

-- | <a>Counter</a> and trigger a <a>Skill</a>
Parry :: !Class -> !Int -> Effect

-- | <a>Parry</a>s without being removed
ParryAll :: !Class -> !Int -> Effect

-- | Damage skills turn into piercing
Pierce :: Effect

-- | Immune to healing and curing
Plague :: Effect

-- | Reduces damage by a flat amount
Reduce :: !Class -> !Int -> Effect

-- | Shares harmful skills with source
Reapply :: Effect

-- | Transfers harmful <a>Skill</a>s
Redirect :: !Class -> Effect

-- | Reflects the first <a>Skill</a>
Reflect :: Effect

-- | <a>Reflect</a> without being removed
ReflectAll :: Effect

-- | Forces AoE attacks to be single-target
Restrict :: Effect

-- | Makes <a>Invisible</a> effects visible
Reveal :: Effect

-- | Scales damage dealt
Scale :: !Class -> !Rational -> Effect

-- | Immune to friendly <a>Skill</a>s
Seal :: Effect

-- | Shares all harmful non-damage effects
Share :: Effect

-- | Unable to cause non-damage effects
Silence :: Effect

-- | Saves a snapshot of the current state
Snapshot :: !Ninja -> Effect

-- | Increases cooldowns
Snare :: !Int -> Effect

-- | Negates next skill and increases CD
SnareTrap :: !Class -> !Int -> Effect

-- | Adds to all damage dealt
Strengthen :: !Class -> !Int -> Effect

-- | Unable to use <a>Skill</a>s
Stun :: !Class -> Effect

-- | Target swaps enemies and allies
Swap :: !Class -> Effect

-- | Forced to attack the source
Taunt :: Effect

-- | Cannot counter or reflect
Uncounter :: Effect

-- | Decreases chakra costs by 1 random
Unexhaust :: Effect

-- | Reduces damage reduction <a>Skill</a>s
Unreduce :: !Int -> Effect

-- | Reduces damage by a fraction
Ward :: !Class -> !Rational -> Effect

-- | Lessens damage dealt | Copies a skill into source's skill slot
Weaken :: !Class -> !Int -> Effect
Copy :: !Int -> !Class -> !Int -> !Bool -> Effect
[copyDuration] :: Effect -> !Int
[copyClass] :: Effect -> !Class

-- | skill slot of source to copy into
[copyTo] :: Effect -> !Int

-- | includes non-harmful <a>Skill</a>s
[copyNonHarm] :: Effect -> !Bool
helpful :: Effect -> Bool
sticky :: Effect -> Bool
boost :: Int -> Effect -> Effect

-- | Target destinations of <a>Skill</a>s.
data Target

-- | User of <a>Skill</a>
Self :: Target

-- | Chosen ally
Ally :: Target

-- | All allies
Allies :: Target

-- | Random ally
RAlly :: Target

-- | Chosen ally excluding <a>Self</a>
XAlly :: Target

-- | <a>Allies</a> excluding <a>Self</a>
XAllies :: Target

-- | Chosen enemy
Enemy :: Target

-- | All enemies
Enemies :: Target

-- | Random enemy
REnemy :: Target

-- | Enemies excluding <a>Enemy</a>
XEnemies :: Target

-- | All <a>Ninja</a>s
Everyone :: Target

-- | Specific ninja index (0-6)
Specific :: !Slot -> Target
four0s :: Seq Int

-- | In-game character, indexed between 0 and 5.
data Ninja
Ninja :: !Slot -> !Character -> !Int -> !(Seq (Seq Int)) -> !(Seq Int) -> !(Seq [Variant]) -> !(Seq (Maybe Copied)) -> ![Defense] -> ![Barrier] -> ![Status] -> ![Channel] -> ![Channel] -> !(Seq Trap) -> ![Face] -> ![Skill] -> ![ChannelTag] -> !(Maybe Skill) -> Ninja

-- | <a>gameNinja</a> index
[nId] :: Ninja -> !Slot
[nCharacter] :: Ninja -> !Character

-- | starts at 100
[nHealth] :: Ninja -> !Int

-- | starts at <a>empty</a>
[nCooldowns] :: Ninja -> !(Seq (Seq Int))

-- | starts at 4 0s
[nCharges] :: Ninja -> !(Seq Int)

-- | starts at 4 0s
[nVariants] :: Ninja -> !(Seq [Variant])

-- | starts at 4 Nothings
[nCopied] :: Ninja -> !(Seq (Maybe Copied))
[nDefense] :: Ninja -> ![Defense]
[nBarrier] :: Ninja -> ![Barrier]
[nStatuses] :: Ninja -> ![Status]
[nChannels] :: Ninja -> ![Channel]
[newChans] :: Ninja -> ![Channel]
[nTraps] :: Ninja -> !(Seq Trap)
[nFace] :: Ninja -> ![Face]
[nParrying] :: Ninja -> ![Skill]
[nTags] :: Ninja -> ![ChannelTag]
[nLastSkill] :: Ninja -> !(Maybe Skill)

-- | Constructs a <a>Ninja</a> with starting values from an index and
--   character name.
newNinja :: Character -> Slot -> Ninja

-- | Factory resets a <a>Ninja</a> to its default values from
--   <a>newNinja</a>
ninjaReset :: Ninja -> Ninja
insertCd :: Int -> Int -> Int -> Seq (Seq Int) -> Seq (Seq Int)
adjustCd :: Int -> Int -> (Int -> Int) -> Seq (Seq Int) -> Seq (Seq Int)
data Face
Face :: !Text -> !Slot -> !Int -> Face
[faceIcon] :: Face -> !Text
[faceSrc] :: Face -> !Slot
[faceDur] :: Face -> !Int

-- | Game state.
data Game
Game :: !(Key User, Key User) -> Seq Ninja -> !(Chakras, Chakras) -> ![Delay] -> !(Int, Int) -> !(Int, Int) -> Seq (Game -> Game) -> !UTCTime -> !Player -> !(Maybe Victor) -> Game
[gamePlayers] :: Game -> !(Key User, Key User)
[gameNinjas] :: Game -> Seq Ninja
[gameChakra] :: Game -> !(Chakras, Chakras)
[gameDelays] :: Game -> ![Delay]

-- | resets each turn to (0, 0)
[gameDrain] :: Game -> !(Int, Int)

-- | resets each turn to (0, 0)
[gameSteal] :: Game -> !(Int, Int)
[gameTraps] :: Game -> Seq (Game -> Game)
[gameTime] :: Game -> !UTCTime

-- | starts at <a>PlayerA</a>
[gamePlaying] :: Game -> !Player
[gameVictor] :: Game -> !(Maybe Victor)

-- | Constructs a <a>Game</a> with starting values from a time, teams, and
--   <a>User</a>s.
newGame :: UTCTime -> [Character] -> Key User -> Key User -> Game
setTime :: UTCTime -> Game -> Game
gameNinja :: Slot -> Game -> Ninja
setNinja :: Slot -> Ninja -> Game -> Game
fn :: Slot -> (Ninja -> Ninja) -> Game -> Game

-- | A move that a <a>Character</a> can perform.
data Skill
Skill :: !Text -> !Text -> !Requirement -> ![Class] -> !Chakras -> !Int -> !Bool -> !Int -> !Channeling -> ![(Target, Transform)] -> ![(Target, Transform)] -> ![(Target, Transform)] -> !Copying -> !Bool -> !(Ninja -> Skill -> Skill) -> Skill
[label] :: Skill -> !Text
[desc] :: Skill -> !Text

-- | defaults to <a>Usable</a>
[require] :: Skill -> !Requirement
[classes] :: Skill -> ![Class]

-- | defaults to <a>empty</a>
[cost] :: Skill -> !Chakras

-- | defaults to 0
[cd] :: Skill -> !Int

-- | defaults to False
[varicd] :: Skill -> !Bool

-- | defaults to 0
[charges] :: Skill -> !Int

-- | defaults to <a>Instant</a>
[channel] :: Skill -> !Channeling
[start] :: Skill -> ![(Target, Transform)]
[effects] :: Skill -> ![(Target, Transform)]
[disrupt] :: Skill -> ![(Target, Transform)]

-- | defaults to <a>NotCopied</a>
[copying] :: Skill -> !Copying

-- | defaults to False
[skPic] :: Skill -> !Bool

-- | defaults to <a>id</a>
[changes] :: Skill -> !(Ninja -> Skill -> Skill)

-- | Default values of a <a>Skill</a>. Used with record updates as a
--   <a>Skill</a> constructor.
newSkill :: Skill
data Requirement
Usable :: Requirement
Unusable :: Requirement
HasI :: Int -> Text -> Requirement
HasU :: Text -> Requirement

-- | An out-of-game character.
data Character
Character :: !Text -> !Text -> ![[Skill]] -> ![(Trigger, Ninja -> Int -> Ninja)] -> Character
[characterName] :: Character -> !Text
[characterBio] :: Character -> !Text
[characterSkills] :: Character -> ![[Skill]]
[characterHooks] :: Character -> ![(Trigger, Ninja -> Int -> Ninja)]
data ChannelTag
ChannelTag :: !Slot -> !Slot -> !Skill -> !Bool -> !Int -> ChannelTag
[tagRoot] :: ChannelTag -> !Slot
[tagSrc] :: ChannelTag -> !Slot
[tagSkill] :: ChannelTag -> !Skill
[tagGhost] :: ChannelTag -> !Bool
[tagDur] :: ChannelTag -> !Int

-- | A single action of a <a>Ninja</a>.
data Act
Act :: !Slot -> !(Either Int Skill) -> !Slot -> Act

-- | self index (0-5)
[actC] :: Act -> !Slot

-- | skill index (0-3) or <a>Skill</a>
[actS] :: Act -> !(Either Int Skill)

-- | target index (-1-5)
[actT] :: Act -> !Slot
data ActPath
ActPath :: !Int -> !Int -> !Int -> ActPath

-- | to <a>actC</a>
[actPathC] :: ActPath -> !Int

-- | to Left <a>actS</a>
[actPathS] :: ActPath -> !Int

-- | to <a>actT</a>
[actPathT] :: ActPath -> !Int
actFromPath :: ActPath -> Act

-- | Collection of all five chakras.
data Chakras
Chakras :: !Int -> !Int -> !Int -> !Int -> !Int -> Chakras
[blood] :: Chakras -> !Int
[gen] :: Chakras -> !Int
[nin] :: Chakras -> !Int
[tai] :: Chakras -> !Int
[rand] :: Chakras -> !Int
χØ :: Chakras

-- | Types of chakra in <a>Chakras</a>.
data ChakraType
Blood :: ChakraType
Gen :: ChakraType
Nin :: ChakraType
Tai :: ChakraType
Rand :: ChakraType

-- | An <a>Act</a> channeled over multiple turns.
data Channel
Channel :: !Slot -> !Skill -> !Slot -> !Channeling -> Channel
[channelRoot] :: Channel -> !Slot
[channelSkill] :: Channel -> !Skill
[channelT] :: Channel -> !Slot
[channelDur] :: Channel -> !Channeling

-- | Types of channeling for <a>Skill</a>s.
data Channeling
Instant :: Channeling
Passive :: Channeling
Action :: !Int -> Channeling
Control :: !Int -> Channeling
Ongoing :: !Int -> Channeling
isAction :: Channeling -> Bool
isControl :: Channeling -> Bool
isOngoing :: Channeling -> Bool

-- | Destructible defense.
data Defense
Defense :: !Int -> !Slot -> !Text -> !Int -> Defense
[defenseAmount] :: Defense -> !Int
[defenseSrc] :: Defense -> !Slot
[defenseL] :: Defense -> !Text
[defenseDur] :: Defense -> !Int

-- | Destructible barrier.
data Barrier
Barrier :: !Int -> !Slot -> !Text -> !(Game -> Game) -> !(Int -> Game -> Game) -> !Int -> Barrier
[barrierAmount] :: Barrier -> !Int
[barrierSrc] :: Barrier -> !Slot
[barrierL] :: Barrier -> !Text
[barrierWhile] :: Barrier -> !(Game -> Game)
[barrierDone] :: Barrier -> !(Int -> Game -> Game)
[barrierDur] :: Barrier -> !Int

-- | Applies a <a>Transform</a> after several turns.
data Delay
Delay :: !Slot -> !Skill -> !(Game -> Game) -> !Int -> Delay
[delayC] :: Delay -> !Slot
[delaySkill] :: Delay -> !Skill
[delayEf] :: Delay -> !(Game -> Game)
[delayDur] :: Delay -> !Int
data Slot
allied :: Slot -> Slot -> Bool
allies :: Slot -> Game -> [Ninja]
alliesP :: Player -> Seq Ninja -> [Ninja]
alliedP :: Player -> Slot -> Bool
enemies :: Slot -> Game -> [Ninja]
enemiesP :: Player -> Seq Ninja -> [Ninja]
spar :: Slot -> Int

-- | A status effect affecting a <a>Ninja</a>.
data Status
Status :: !Text -> !Slot -> !Slot -> !Slot -> !Skill -> ![Effect] -> ![Class] -> ![(Bomb, Transform)] -> !Int -> !Int -> Status
[statusL] :: Status -> !Text
[statusRoot] :: Status -> !Slot
[statusSrc] :: Status -> !Slot
[statusC] :: Status -> !Slot
[statusSkill] :: Status -> !Skill
[statusEfs] :: Status -> ![Effect]
[statusClasses] :: Status -> ![Class]
[statusBombs] :: Status -> ![(Bomb, Transform)]
[statusMaxDur] :: Status -> !Int
[statusDur] :: Status -> !Int

-- | Applies <a>Transform</a>s when a <a>Status</a> ends.
data Bomb

-- | Applied with both <a>Expire</a> and <a>Remove</a>.
Done :: Bomb

-- | Applied when a <a>Status</a> reaches the end of its duration.
Expire :: Bomb

-- | Applied when a <a>Status</a> is removed prematurely.
Remove :: Bomb
data Copying
Shallow :: Slot -> Int -> Copying
Deep :: Slot -> Int -> Copying
NotCopied :: Copying

-- | Player vs. opponent.
data Player
PlayerA :: Player
PlayerB :: Player

-- | A trap which gets triggered when a <a>Ninja</a> meets the conditions
--   of a <a>Trigger</a>.
data Trap
Trap :: !TrapType -> !Trigger -> !Text -> !Text -> !Slot -> !TrapTransform -> ![Class] -> !Int -> !Int -> Trap
[trapType] :: Trap -> !TrapType
[trapTrigger] :: Trap -> !Trigger
[trapL] :: Trap -> !Text
[trapDesc] :: Trap -> !Text
[trapSrc] :: Trap -> !Slot
[trapEf] :: Trap -> !TrapTransform
[trapClasses] :: Trap -> ![Class]
[trapTrack] :: Trap -> !Int
[trapDur] :: Trap -> !Int
data TrapType
TrapTo :: TrapType
TrapFrom :: TrapType
TrapPer :: TrapType

-- | Conditions on a <a>Ninja</a> to spring a <a>Trap</a>.
data Trigger
OnAction :: !Class -> Trigger
OnBreak :: !Text -> Trigger
OnChakra :: Trigger
OnCounter :: !Class -> Trigger
OnCounterAll :: Trigger
OnDamage :: Trigger
OnDamaged :: !Class -> Trigger
OnDeath :: Trigger
OnHarm :: Trigger
OnHarmed :: !Class -> Trigger
OnHealed :: Trigger
PerHealed :: Trigger
OnHelped :: Trigger
OnImmune :: Trigger
OnReflectAll :: Trigger
OnRes :: Trigger
OnStun :: Trigger
OnStunned :: !Class -> Trigger
PerDamaged :: Trigger
TrackDamage :: Trigger
TrackDamaged :: Trigger
data Variant
Variant :: !Int -> !Bool -> !Text -> !Int -> Variant
[variantV] :: Variant -> !Int
[variantVCD] :: Variant -> !Bool
[variantL] :: Variant -> !Text
[variantDur] :: Variant -> !Int
variantCD :: Variant -> Int
noVariant :: Variant
data Victor
VictorA :: Victor
VictorB :: Victor
Tie :: Victor
allSlots :: [Slot]
allySlots :: Slot -> [Slot]
enemySlots :: Slot -> [Slot]
opponentSlots :: Player -> [Slot]
bySlot :: Slot -> (a -> a) -> (a, a) -> (a, a)
outSlot :: Slot -> (a, a) -> a
outSlot' :: Slot -> (a, a) -> a
choose :: (Maybe Slot, Maybe Slot) -> Target -> Slot -> Slot -> [Slot]
skillTargets :: Skill -> Slot -> [Slot]
botActs :: [Act]
instance GHC.Classes.Eq Game.Structure.Act
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Barrier
instance GHC.Generics.Generic Game.Structure.Barrier
instance GHC.Classes.Eq Game.Structure.Barrier
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Channel
instance GHC.Generics.Generic Game.Structure.Channel
instance GHC.Classes.Eq Game.Structure.Channel
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.ChannelTag
instance GHC.Generics.Generic Game.Structure.ChannelTag
instance GHC.Classes.Eq Game.Structure.ChannelTag
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Character
instance GHC.Generics.Generic Game.Structure.Character
instance GHC.Classes.Eq Game.Structure.Copied
instance GHC.Classes.Eq Game.Structure.Effect
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Status
instance GHC.Generics.Generic Game.Structure.Status
instance GHC.Classes.Eq Game.Structure.Delay
instance GHC.Classes.Eq Game.Structure.Game
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Trap
instance GHC.Generics.Generic Game.Structure.Trap
instance GHC.Classes.Eq Game.Structure.Ninja
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Skill
instance GHC.Generics.Generic Game.Structure.Skill
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Copying
instance GHC.Generics.Generic Game.Structure.Copying
instance GHC.Classes.Eq Game.Structure.Copying
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Defense
instance GHC.Generics.Generic Game.Structure.Defense
instance GHC.Classes.Eq Game.Structure.Defense
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Face
instance GHC.Generics.Generic Game.Structure.Face
instance GHC.Classes.Eq Game.Structure.Face
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Target
instance GHC.Generics.Generic Game.Structure.Target
instance GHC.Classes.Eq Game.Structure.Target
instance GHC.Classes.Eq Game.Structure.Slot
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Variant
instance GHC.Generics.Generic Game.Structure.Variant
instance GHC.Show.Show Game.Structure.Variant
instance GHC.Classes.Eq Game.Structure.Variant
instance GHC.Classes.Eq Game.Structure.Trigger
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.TrapType
instance GHC.Generics.Generic Game.Structure.TrapType
instance GHC.Classes.Eq Game.Structure.TrapType
instance GHC.Enum.Enum Game.Structure.TrapType
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Bomb
instance GHC.Generics.Generic Game.Structure.Bomb
instance GHC.Show.Show Game.Structure.Bomb
instance GHC.Classes.Eq Game.Structure.Bomb
instance GHC.Enum.Enum Game.Structure.Bomb
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Requirement
instance GHC.Generics.Generic Game.Structure.Requirement
instance GHC.Classes.Eq Game.Structure.Requirement
instance GHC.Classes.Eq Game.Structure.Victor
instance GHC.Show.Show Game.Structure.Victor
instance GHC.Enum.Enum Game.Structure.Victor
instance GHC.Classes.Eq Game.Structure.Player
instance GHC.Show.Show Game.Structure.Player
instance GHC.Enum.Enum Game.Structure.Player
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Channeling
instance GHC.Generics.Generic Game.Structure.Channeling
instance GHC.Show.Show Game.Structure.Channeling
instance GHC.Classes.Eq Game.Structure.Channeling
instance GHC.Show.Show Game.Structure.ChakraType
instance GHC.Classes.Eq Game.Structure.ChakraType
instance GHC.Enum.Enum Game.Structure.ChakraType
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Chakras
instance GHC.Generics.Generic Game.Structure.Chakras
instance GHC.Read.Read Game.Structure.Chakras
instance GHC.Show.Show Game.Structure.Chakras
instance GHC.Classes.Eq Game.Structure.Chakras
instance GHC.Classes.Eq Game.Structure.Affected
instance GHC.Show.Show Game.Structure.Affected
instance GHC.Enum.Enum Game.Structure.Affected
instance GHC.Read.Read Game.Structure.ActPath
instance GHC.Show.Show Game.Structure.ActPath
instance GHC.Classes.Eq Game.Structure.ActPath
instance GHC.Enum.Bounded Game.Structure.Class
instance GHC.Show.Show Game.Structure.Class
instance GHC.Classes.Eq Game.Structure.Class
instance GHC.Enum.Enum Game.Structure.Class
instance GHC.Show.Show Game.Structure.Effect
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Effect
instance Game.Structure.TurnBased Game.Structure.Barrier
instance Game.Structure.Labeled Game.Structure.Barrier
instance Game.Structure.TurnBased Game.Structure.Channel
instance Game.Structure.TurnBased Game.Structure.ChannelTag
instance Game.Structure.Labeled Game.Structure.ChannelTag
instance GHC.Classes.Eq Game.Structure.Character
instance Game.Structure.TurnBased Game.Structure.Copied
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Copied
instance Game.Structure.TurnBased Game.Structure.Delay
instance Game.Structure.Labeled Game.Structure.Delay
instance GHC.Classes.Eq Game.Structure.Skill
instance GHC.Classes.Eq Game.Structure.Status
instance Game.Structure.TurnBased Game.Structure.Status
instance Game.Structure.Labeled Game.Structure.Status
instance GHC.Classes.Eq Game.Structure.Trap
instance Game.Structure.TurnBased Game.Structure.Trap
instance Game.Structure.Labeled Game.Structure.Trap
instance Game.Structure.Labeled Game.Structure.Defense
instance Game.Structure.TurnBased Game.Structure.Defense
instance Game.Structure.TurnBased Game.Structure.Face
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Slot
instance Game.Structure.TurnBased Game.Structure.Variant
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Trigger
instance GHC.Show.Show Game.Structure.Trigger
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Victor
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Player
instance Game.Structure.TurnBased Game.Structure.Channeling
instance Web.PathPieces.PathPiece Game.Structure.Chakras
instance Web.PathPieces.PathPiece Game.Structure.ActPath
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Class
instance GHC.Classes.Eq (a -> b)
instance Data.Aeson.Types.ToJSON.ToJSON (a -> b)


-- | Functions for manipulating data structures in <a>Game.Structure</a>.
module Game.Functions

-- | Adds 1 to positives, subtracts 1 from negatives, and leaves 0s
--   unchanged.
incr :: Int -> Int
byPar :: Int -> (a2 -> a2) -> (a2, a2) -> (a2, a2)
opponent :: Player -> Player
lost :: Int -> Int -> Int -> Int
illegal :: Player -> Act -> Bool
copyDur :: Copying -> Int -> Int
copyRoot :: Copying -> Slot -> Slot
cp :: Skill -> Slot -> Slot
statusMatch :: Text -> Slot -> Status -> Bool
numStacks :: Text -> Slot -> Ninja -> Int
numActive :: Text -> Ninja -> Int
matchRequire :: Requirement -> Slot -> Ninja -> Bool
targetable :: Skill -> Ninja -> Ninja -> Ninja -> Bool
(••) :: (Ninja -> Skill -> Skill) -> (Ninja -> Skill -> Skill) -> Ninja -> Skill -> Skill
infixl 1 ••
changeWith :: Text -> (Ninja -> Skill -> Skill) -> Ninja -> Skill -> Skill
addClass :: Class -> Ninja -> Skill -> Skill
costPer :: Text -> [ChakraType] -> Ninja -> Skill -> Skill
setCost :: [ChakraType] -> Ninja -> Skill -> Skill
targetAll :: Ninja -> Skill -> Skill
swapSkill :: Status -> Skill -> Skill
alter :: (Seq Ninja -> Seq Ninja) -> Game -> Game
isAlive :: Ninja -> Bool
living :: Game -> [Slot]
alives :: Player -> Seq Ninja -> [Ninja]
playerTeam :: Player -> Game -> [Ninja]
dead :: Player -> Game -> Bool
healthBound :: Int -> Int -> Int
minHealth :: Ninja -> Int
getCds :: Ninja -> Seq Int
fromChannel :: Ninja -> Channel -> Act
channelSkill :: Channel -> Skill
isChanneling :: Text -> Ninja -> Bool
hasDefense :: Text -> Slot -> Ninja -> Bool
has :: Text -> Slot -> Ninja -> Bool
hasOwn :: Text -> Ninja -> Bool
hasTrap :: Text -> Slot -> Ninja -> Bool
is :: Effect -> Ninja -> Bool
is' :: (Class -> Effect) -> Ninja -> Bool
nEfs :: Ninja -> [Effect]
nStats :: Ninja -> [Status]
filterEffects :: Ninja -> [Effect] -> [Effect]
cures :: Status -> Bool
purges :: Status -> Bool
doPurge :: Status -> Status

-- | Trigger a <a>Counter</a>.
counter :: [Class] -> Ninja -> Ninja -> Maybe Ninja
triggerCopy :: [Class] -> Ninja -> Bool -> [(Slot, Text, Int, Int)]

-- | Trigger a <a>Parry</a>.
parry :: Skill -> Ninja -> Maybe (Ninja, Slot, Int)
redirect :: [Class] -> Ninja -> Maybe Slot
reapply :: [Class] -> Ninja -> Maybe Slot

-- | Trigger a <a>Reflect</a>.
reflect :: [Class] -> Ninja -> Ninja -> Maybe Ninja

-- | Trigger a <a>SnareTrap</a>.
--   
--   Trigger a <a>Parry</a>.
snareTrap :: Skill -> Ninja -> Maybe (Ninja, Int)
getTargets :: Effect -> Ninja -> [Slot]
getShare :: Ninja -> [Slot]
getBless :: Ninja -> Int
getBleed :: [Class] -> Ninja -> Int
getBoost :: Slot -> Ninja -> Int
getBuild :: Ninja -> Int
getImmune :: Ninja -> [Class]
getLink :: Slot -> Ninja -> Int
getReduce :: [Class] -> Ninja -> Int
getWard :: [Class] -> Ninja -> Rational
getScale :: [Class] -> Ninja -> Rational
getSnare :: Ninja -> Int
getStrengthen :: [Class] -> Ninja -> Int
getWeaken :: [Class] -> Ninja -> Int
getStun :: Ninja -> [Class]
getSwap :: [Class] -> Ninja -> Maybe Status
getNet :: Player -> Game -> Ninja -> Int
getGameChakra :: Player -> Game -> Chakras
setGameChakra :: Player -> Chakras -> Game -> Game
(+~) :: Chakras -> Chakras -> Chakras
infixl 6 +~
(-~) :: Chakras -> Chakras -> Chakras
infixl 6 -~
lack :: Chakras -> Bool
chakraTotal :: Chakras -> Int
χ :: [ChakraType] -> Chakras
gainChakra :: Player -> [Int] -> Seq Ninja -> Chakras -> Chakras
addChakra :: Int -> Chakras -> Int -> Chakras
listChakra :: Chakras -> [Int]
getSkill :: Ninja -> Either Int Skill -> Skill
getSkill' :: Ninja -> Int -> Int -> Skill
getSkills :: Ninja -> [Skill]
classTrs :: Bool -> (Class -> Trigger) -> [Class] -> Ninja -> Seq TrapTransform
getTraps :: Bool -> Trigger -> Ninja -> Seq TrapTransform
getPerTraps :: Bool -> Trigger -> Int -> Ninja -> Seq (Game -> Game)
getTrackTraps :: Bool -> Trigger -> Ninja -> Seq (Game -> Game)
getPlayer :: Key User -> Game -> Maybe Player
getVs :: Key User -> Game -> Maybe (Key User)
yieldVictor :: Game -> Game

-- | In-game character, indexed between 0 and 5.
data Ninja
Ninja :: !Slot -> !Character -> !Int -> !(Seq (Seq Int)) -> !(Seq Int) -> !(Seq [Variant]) -> !(Seq (Maybe Copied)) -> ![Defense] -> ![Barrier] -> ![Status] -> ![Channel] -> ![Channel] -> !(Seq Trap) -> ![Face] -> ![Skill] -> ![ChannelTag] -> !(Maybe Skill) -> Ninja

-- | <a>gameNinja</a> index
[nId] :: Ninja -> !Slot
[nCharacter] :: Ninja -> !Character

-- | starts at 100
[nHealth] :: Ninja -> !Int

-- | starts at <a>empty</a>
[nCooldowns] :: Ninja -> !(Seq (Seq Int))

-- | starts at 4 0s
[nCharges] :: Ninja -> !(Seq Int)

-- | starts at 4 0s
[nVariants] :: Ninja -> !(Seq [Variant])

-- | starts at 4 Nothings
[nCopied] :: Ninja -> !(Seq (Maybe Copied))
[nDefense] :: Ninja -> ![Defense]
[nBarrier] :: Ninja -> ![Barrier]
[nStatuses] :: Ninja -> ![Status]
[nChannels] :: Ninja -> ![Channel]
[newChans] :: Ninja -> ![Channel]
[nTraps] :: Ninja -> !(Seq Trap)
[nFace] :: Ninja -> ![Face]
[nParrying] :: Ninja -> ![Skill]
[nTags] :: Ninja -> ![ChannelTag]
[nLastSkill] :: Ninja -> !(Maybe Skill)

-- | Game state.
data Game
Game :: !(Key User, Key User) -> Seq Ninja -> !(Chakras, Chakras) -> ![Delay] -> !(Int, Int) -> !(Int, Int) -> Seq (Game -> Game) -> !UTCTime -> !Player -> !(Maybe Victor) -> Game
[gamePlayers] :: Game -> !(Key User, Key User)
[gameNinjas] :: Game -> Seq Ninja
[gameChakra] :: Game -> !(Chakras, Chakras)
[gameDelays] :: Game -> ![Delay]

-- | resets each turn to (0, 0)
[gameDrain] :: Game -> !(Int, Int)

-- | resets each turn to (0, 0)
[gameSteal] :: Game -> !(Int, Int)
[gameTraps] :: Game -> Seq (Game -> Game)
[gameTime] :: Game -> !UTCTime

-- | starts at <a>PlayerA</a>
[gamePlaying] :: Game -> !Player
[gameVictor] :: Game -> !(Maybe Victor)

-- | An out-of-game character.
data Character
Character :: !Text -> !Text -> ![[Skill]] -> ![(Trigger, Ninja -> Int -> Ninja)] -> Character
[characterName] :: Character -> !Text
[characterBio] :: Character -> !Text
[characterSkills] :: Character -> ![[Skill]]
[characterHooks] :: Character -> ![(Trigger, Ninja -> Int -> Ninja)]

-- | A move that a <a>Character</a> can perform.
data Skill
Skill :: !Text -> !Text -> !Requirement -> ![Class] -> !Chakras -> !Int -> !Bool -> !Int -> !Channeling -> ![(Target, Transform)] -> ![(Target, Transform)] -> ![(Target, Transform)] -> !Copying -> !Bool -> !(Ninja -> Skill -> Skill) -> Skill
[label] :: Skill -> !Text
[desc] :: Skill -> !Text

-- | defaults to <a>Usable</a>
[require] :: Skill -> !Requirement
[classes] :: Skill -> ![Class]

-- | defaults to <a>empty</a>
[cost] :: Skill -> !Chakras

-- | defaults to 0
[cd] :: Skill -> !Int

-- | defaults to False
[varicd] :: Skill -> !Bool

-- | defaults to 0
[charges] :: Skill -> !Int

-- | defaults to <a>Instant</a>
[channel] :: Skill -> !Channeling
[start] :: Skill -> ![(Target, Transform)]
[effects] :: Skill -> ![(Target, Transform)]
[disrupt] :: Skill -> ![(Target, Transform)]

-- | defaults to <a>NotCopied</a>
[copying] :: Skill -> !Copying

-- | defaults to False
[skPic] :: Skill -> !Bool

-- | defaults to <a>id</a>
[changes] :: Skill -> !(Ninja -> Skill -> Skill)


-- | A collection of <a>Ninja</a> → <a>Ninja</a> transformations.
module Game.Ninja
addStatus :: Status -> Ninja -> Ninja
addStacks :: Int -> Text -> Int -> Skill -> Slot -> Slot -> Ninja -> Ninja
addOwnStacks :: Int -> Text -> Int -> Int -> Ninja -> Int -> Ninja
alterCd :: Int -> Int -> Int -> Ninja -> Ninja
attack :: Int -> Ninja -> Ninja
cancelChannel :: Text -> Ninja -> Ninja
clear :: Text -> Slot -> Ninja -> Ninja
clearTrap :: Text -> Slot -> Ninja -> Ninja
cure :: (Effect -> Bool) -> Ninja -> Ninja
cure' :: (Effect -> Bool) -> Ninja -> Status -> Maybe Status
cureBane :: Ninja -> Ninja
decrStats :: Ninja -> Ninja
decr :: Ninja -> Ninja
hasten :: Int -> Text -> Slot -> Ninja -> Ninja
kill :: Bool -> Ninja -> Ninja
prolong' :: Int -> Text -> Slot -> Status -> Maybe Status
prolong :: Int -> Text -> Slot -> Ninja -> Ninja
purge :: Ninja -> Ninja
purgeAll :: Ninja -> Ninja
refresh :: Text -> Slot -> Ninja -> Ninja
removeStack :: Text -> Ninja -> Ninja
removeStacks :: Text -> Int -> Slot -> Ninja -> Ninja
removeOwn :: Text -> Ninja -> Int -> Ninja
reset :: Int -> Int -> Ninja -> Ninja
resetAll :: Ninja -> Ninja
resetCharges :: Ninja -> Ninja
sacrifice :: Int -> Int -> Ninja -> Ninja
setHealth :: Int -> Ninja -> Ninja
unCounter :: Ninja -> Ninja
unVariant :: Text -> Ninja -> Ninja
updateCd :: Bool -> Int -> Skill -> Int -> Ninja -> Ninja

module Game.JSON
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Ninja
instance Data.Aeson.Types.ToJSON.ToJSON Game.Structure.Game


-- | A collection of <a>Transform</a>s and other <a>Game</a> → <a>Game</a>
--   transformations.
module Game.Game
setFace :: Int -> Transform
wait :: Transform
wait' :: a -> Transform
apply :: Int -> [Effect] -> Transform
apply' :: Text -> Int -> [Effect] -> Transform
applyWith :: [Class] -> Int -> [Effect] -> Transform
applyWith' :: [Class] -> Text -> Int -> [Effect] -> Transform
applyX :: Int -> (Int -> Effect) -> Int -> Transform
applyDur :: [Effect] -> Int -> Transform
applyDur' :: Text -> [Effect] -> Int -> Transform
prolong :: Int -> Text -> Transform
prolongChannel :: Int -> Text -> Transform
hasten :: Int -> Text -> Transform
refresh :: Text -> Transform
tag :: Int -> Transform
tag' :: Text -> Int -> Transform
hide :: Int -> [Effect] -> Transform
hide' :: Text -> Int -> [Effect] -> Transform
flag :: Transform
flag' :: Text -> Transform
bomb :: Int -> [Effect] -> [(Bomb, Transform)] -> Transform
bomb' :: Text -> Int -> [Effect] -> [(Bomb, Transform)] -> Transform
bombWith :: [Class] -> Int -> [Effect] -> [(Bomb, Transform)] -> Transform
bombWith' :: [Class] -> Text -> Int -> [Effect] -> [(Bomb, Transform)] -> Transform
snapshot :: Int -> Transform
remove :: Text -> Transform
cureStun :: Transform
cureBane :: Transform
cure :: (Effect -> Bool) -> Transform
cureAll :: Transform
purgeAll :: Transform
purge :: Transform
addStack :: Transform
addStacks :: Text -> Int -> Transform
addStacks' :: Int -> Text -> Int -> Transform
removeStack :: Text -> Transform
removeStacks :: Text -> Int -> Transform
setHealth :: Int -> Transform
heal :: Int -> Transform
restore :: Int -> Transform
copyLast :: Int -> Int -> Transform
copyAll :: Int -> Transform
teach :: Int -> (Slot -> Int -> Copying) -> Int -> Transform
teachOne :: Int -> Int -> (Slot -> Int -> Copying) -> Int -> Transform
sacrifice :: Int -> Int -> Transform
afflict :: Int -> Transform
pierce :: Int -> Transform
damage :: Int -> Transform
execute :: (Int -> Transform) -> Int -> Transform
leech :: Int -> (Int -> Transform) -> Transform
kill :: Transform
kill' :: Transform
killThen :: Transform -> Transform
defend :: Int -> Int -> Transform
defend' :: Text -> Int -> Int -> Transform
addDefense :: Text -> Int -> Transform
demolish :: Transform
demolish' :: Int -> Transform
commandeer :: Transform
bar :: Int -> (Int -> Transform) -> Transform -> Int -> Transform
factory :: Transform
resetAll :: Transform
reset :: Int -> Int -> Transform
alterCd :: Int -> Int -> Int -> Transform
resetCharges :: Transform
interrupt :: Transform
delay :: Int -> Transform -> Transform
trapWith :: TrapType -> [Class] -> Int -> Trigger -> Transform -> Transform
trap :: Int -> Trigger -> Transform -> Transform
trap' :: Int -> Trigger -> Transform -> Transform
trapFrom :: Int -> Trigger -> Transform -> Transform
trapFrom' :: Int -> Trigger -> Transform -> Transform
trapPer :: Int -> Trigger -> (Int -> Transform) -> Transform
trapPer' :: Int -> Trigger -> (Int -> Transform) -> Transform
onBreak :: Transform -> Transform
removeTrap :: Text -> Transform
gain :: [ChakraType] -> Transform
drain :: Int -> Transform
steal :: Int -> Transform
cancelChannel :: Text -> Transform
vary :: Int -> Int -> Int -> Transform
vary' :: Int -> Int -> Transform

-- | Directly applies an effect to the original source without going
--   through <a>wrapEffect</a>.
self :: Transform -> Transform

-- | Directly applies an effect to all allies of the original source
--   without going through <a>wrapEffect</a>.
alliedTeam :: Transform -> Transform

-- | Directly applies an effect to all enemies of the original source
--   without going through <a>wrapEffect</a>.
enemyTeam :: Transform -> Transform

-- | Directly applies an effect to all characters without going through
--   <a>wrapEffect</a>.
everyone :: Transform -> Transform
(°) :: Transform -> Transform -> Transform
infixl 3 °
(•) :: Transform -> Transform -> Transform
infixl 1 •
ifI :: Text -> Transform -> Transform
ifU :: Text -> Transform -> Transform
ifnotI :: Text -> Transform -> Transform
ifnotU :: Text -> Transform -> Transform
ifChan :: Text -> Transform -> Transform
ifHealthI :: Int -> Int -> Transform -> Transform
ifHealthU :: Int -> Int -> Transform -> Transform
ifStacks :: Text -> Int -> Transform -> Transform
ifnotStacks :: Text -> Int -> Transform -> Transform
ifDef :: Text -> Transform -> Transform
withInvulnU :: Int -> (Int -> Transform) -> Int -> Transform
withI :: Text -> Int -> (Int -> Transform) -> Int -> Transform
withU :: Text -> Int -> (Int -> Transform) -> Int -> Transform
withChan :: Text -> Int -> (Int -> Transform) -> Int -> Transform
perI :: Text -> Int -> (Int -> Transform) -> Int -> Transform
perI' :: Text -> Int -> Int -> (Int -> Transform) -> Int -> Transform
perU :: Text -> Int -> (Int -> Transform) -> Int -> Transform
perHealthI :: (Int -> Int) -> (Int -> Transform) -> Transform
perHealthU :: (Int -> Int) -> (Int -> Transform) -> Transform
perDef :: Text -> (Int -> Transform) -> Int -> Transform
perHelpful :: Int -> (Int -> Transform) -> Int -> Transform
perAffected :: Text -> Int -> (Int -> Transform) -> Int -> Transform
updateChakra :: Player -> [Int] -> Game -> Game
runTurn :: Player -> [Act] -> StdGen -> Game -> Game
forfeit :: Player -> Game -> Game

-- | Hide private information and <a>Invisible</a>s from opponent.
censor :: Player -> Game -> Game
invuln :: Text -> Text -> [Class] -> [Skill]
invuln' :: Text -> Text -> [Class] -> [Transform] -> [Skill]
act :: [Affected] -> Game -> (Act, Either (Slot, Slot) StdGen) -> Game
kabuto :: Transform
instance GHC.Classes.Eq Game.Game.Attack


-- | All <a>Character</a>s.
module Game.Characters

-- | Character database as map with character names as keys.
cs :: HashMap Text Character

-- | Characer database as list.
cs' :: [Character]


-- | Handles API routes related to gameplay.
module Handler.Play
gameSocket :: WebSocketsT Handler ()

-- | Joins the practice-match queue with a given team. Requires
--   authentication.
getPracticeQueueR :: [Text] -> Handler Value
getPracticeActR :: Chakras -> Chakras -> [ActPath] -> Handler Value

-- | Wrapper for <a>getPracticeActR</a> with no actions.
getPracticeWaitR :: Chakras -> Chakras -> Handler Value


-- | Handles routes related to the gameplay client.
module Handler.PlayPage

-- | Renders the gameplay client.
getPlayR :: Handler Html

-- | Updates a user's profile.
getUpdateR :: Text -> Bool -> Text -> Text -> Handler Value
getChangelogR :: Handler Html

-- | Updates a user's muted status.
getMuteR :: Bool -> Handler Value

module Handler.Test
getTestR :: Handler Html
