const chars = #{toJSON Characters.map}

const cTypes  = [ "blood", "gen", "nin", "tai", "rand" ]
const tcTypes = [ "blood", "gen", "nin", "tai" ]

const shorten = x => x.replace(/ \(\d+\)/g, '')
                      .replace(/[- :()']/g,'')
                      .replace(/ō/g,'o')
                      .replace(/ū/g,'u')

const hide = x => x.hide() // A taste of home...
const half = x => (x + 1) / 2 >> 0

const getSkill = (char, name) => char.skills.flat().filter(x => x.name == name)[0]

const offset = 5
const hidden = [ "All"
               , "Affliction"
               , "NonAffliction"
               , "NonMental"
               , "Nonstacking"
               , "Multi"
               , "Extending"
               , "Hidden"
               , "Shifted"
               , "Unshifted"
               , "Direct"
               , "BaseTrap"
               , "NonMental"
               , "Bloodline"
               , "Genjutsu"
               , "Ninjutsu"
               , "Taijutsu"
               , "Random"
               , "Necromancy"
               , "Single"
               ]
const filterClasses = x => x.filter(y => !hidden.includes(y))

const showChar = x => {
  switch (x.category) {
    case "Shippuden":  return x.name + " (S)";
    case "Reanimated": return x.name + " (R)";
    default:           return x.name;
  }
}

let cur

const hoverChar = (i, el) => {
  const tooltip = $("#tooltip")
  const src = $(el)
  const usr = chars[src.data("name")]
  if (usr === undefined) return
  src.mouseover(ev => {
      if (tooltip.css("display") !== "none" && cur === src) return
      cur = el
      tooltip.stop()
      tooltip.find("header").text(showChar(usr))
      tooltip.find("article").text(usr.bio)
      tooltip
        .stop()
        .css("left", ev.pageX)
        .css("top", el.clientHeight + el.offsetTop + offset + 5)
        .fadeIn(100)
        .show()
  }).mouseleave(() => $("#tooltip").fadeOut(100))
}

$(() => {
    const tooltip = $("#tooltip")
    $("a.name").each(hoverChar)
    $("li").find("sup").each(hoverChar)
    $(".head").each(hoverChar)
    $(".skill").each((i, el) => {
        const src = $(el)
        const usr = chars[src.data("name")]
        if (usr === undefined) return
        const skill = getSkill(usr, src.text())
        if (skill === undefined) return
        src.mouseover(ev => {
            if (tooltip.css("display") !== "none" && cur === src) return
            cur = src
            tooltip.stop()
            tooltip.find("header").text(skill.name).append([].concat(
              ...cTypes.map(cType => Array.from(Array(skill.cost[cType]))
              .map(()=> $(`<div class=" chakra ${cType}"></div>`) ))
            )).append($('<br/><p class="skillClasses">' +
              [skill.channel.tag].concat(filterClasses(skill.classes)).join(", ") +
              '</div>'))
            desc = tooltip.find("article").html(skill.desc.replace(/\[.\]/g,"").replace(/\[/g,"<i>").replace(/\]/g,"</i>"))
            const charges = skill.charges
            if (charges === 1)
                desc.append(` <span class="extra">1 charge.</span>`)
            else if (charges > 1)
                desc.append(` <span class="extra">${charges} charges.</span>`)
            desc.append(` <span class="extra">CD: ${skill.cooldown}</span>`)
            tooltip
              .stop()
              .css("left", ev.pageX)
              .css("top", el.clientHeight + el.offsetTop + offset)
              .fadeIn(100)
              .show()
        }).mouseleave(() => $("#tooltip").fadeOut(100))
    })
})
