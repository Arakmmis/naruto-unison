(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (process){
// Generated by purs bundle 0.11.7
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };
  var eqVoid = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqString = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  }; 
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqVoid"] = eqVoid;
  exports["eqArray"] = eqArray;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };
  var ordVoid = new Ord(function () {
      return Data_Eq.eqVoid;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 122, column 3 - line 125, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 113, column 3 - line 116, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["min"] = min;
  exports["max"] = max;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordVoid"] = ordVoid;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];        
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["apply"] = apply;
  exports["on"] = on;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidLeft"] = voidLeft;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 57, column 1 - line 57, column 63: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicate = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ?
      replicate :
      replicatePolyfill;

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports.findLastIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = xs.length - 1; i >= 0; i--) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  exports.partition = function (f) {
    return function (xs) {
      var yes = [];
      var no  = [];
      for (var i = 0; i < xs.length; i++) {
        var x = xs[i];
        if (f(x))
          yes.push(x);
        else
          no.push(x);
      }
      return { yes: yes, no: no };
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];        
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;
  exports["foreachE"] = $foreign.foreachE;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCoerceEff = function (f) {
    return f;
  };
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var unsafePerformEff = function ($0) {
      return Control_Monad_Eff.runPure($foreign.unsafeCoerceEff($0));
  };
  exports["unsafePerformEff"] = unsafePerformEff;
  exports["unsafeCoerceEff"] = $foreign.unsafeCoerceEff;
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.newSTRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifySTRef = function (ref) {
    return function (f) {
      return function () {
        return ref.value = f(ref.value); // eslint-disable-line no-return-assign
      };
    };
  };

  exports.writeSTRef = function (ref) {
    return function (a) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };

  exports.runST = function (f) {
    return f;
  };
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var pureST = function (st) {
      return Control_Monad_Eff.runPure($foreign.runST(st));
  };
  exports["pureST"] = pureST;
  exports["newSTRef"] = $foreign.newSTRef;
  exports["readSTRef"] = $foreign.readSTRef;
  exports["modifySTRef"] = $foreign.modifySTRef;
  exports["writeSTRef"] = $foreign.writeSTRef;
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var rmap = function (dictBifunctor) {
      return bimap(dictBifunctor)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["rmap"] = rmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadZero = function (Alternative1, Monad0) {
      this.Alternative1 = Alternative1;
      this.Monad0 = Monad0;
  }; 
  var guard = function (dictMonadZero) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure((dictMonadZero.Alternative1()).Applicative0())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty((dictMonadZero.Alternative1()).Plus1());
          };
          throw new Error("Failed pattern match at Control.MonadZero line 54, column 1 - line 54, column 52: " + [ v.constructor.name ]);
      };
  };
  exports["MonadZero"] = MonadZero;
  exports["guard"] = guard;
})(PS["Control.MonadZero"] = PS["Control.MonadZero"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 219, column 1 - line 219, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar35) {
                  return $dollar35;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 270, column 1 - line 270, column 46: " + [ v.constructor.name ]);
          })());
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 68, column 1 - line 68, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 127, column 1 - line 127, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var monadMaybe = new Control_Monad.Monad(function () {
      return applicativeMaybe;
  }, function () {
      return bindMaybe;
  });
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  var plusMaybe = new Control_Plus.Plus(function () {
      return altMaybe;
  }, Nothing.value);
  var alternativeMaybe = new Control_Alternative.Alternative(function () {
      return applicativeMaybe;
  }, function () {
      return plusMaybe;
  });
  var monadZeroMaybe = new Control_MonadZero.MonadZero(function () {
      return alternativeMaybe;
  }, function () {
      return monadMaybe;
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["plusMaybe"] = plusMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadMaybe"] = monadMaybe;
  exports["monadZeroMaybe"] = monadZeroMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($64) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($64)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var newtypeConj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Conj);
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["newtypeConj"] = newtypeConj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
})(PS["Data.Monoid.Conj"] = PS["Data.Monoid.Conj"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var newtypeDisj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Disj);
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["newtypeDisj"] = newtypeDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 131, column 1 - line 131, column 41: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 131, column 1 - line 131, column 41: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 131, column 1 - line 131, column 41: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($199) {
              return any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(dictEq)($199));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              return function ($200) {
                  return !elem(dictFoldable)(dictEq)(x)($200);
              };
          };
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Conj.newtypeConj)(Data_Monoid_Conj.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["sequence_"] = sequence_;
  exports["intercalate"] = intercalate;
  exports["all"] = all;
  exports["any"] = any;
  exports["sum"] = sum;
  exports["elem"] = elem;
  exports["notElem"] = notElem;
  exports["find"] = find;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont(fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList(x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray(list) {
      var arr = [];
      var xs = list;
      while (xs !== emptyList) {
        arr.push(xs.head);
        xs = xs.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];        
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["for"] = $$for;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 36, column 1 - line 36, column 45: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 229, column 1 - line 229, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 43, column 1 - line 43, column 45: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 79, column 1 - line 79, column 41: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRecEff = function (f) {
      return function (a) {
          var fromDone = function (v) {
              var __unused = function (dictPartial1) {
                  return function ($dollar16) {
                      return $dollar16;
                  };
              };
              return __unused()((function () {
                  if (v instanceof Done) {
                      return v.value0;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Rec.Class line 141, column 28 - line 141, column 42: " + [ v.constructor.name ]);
              })());
          };
          var f$prime = function ($52) {
              return Control_Monad_Eff_Unsafe.unsafeCoerceEff(f($52));
          };
          return function __do() {
              var v = Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(Control_Monad_ST.newSTRef)(f$prime(a))();
              (function () {
                  while (!(function __do() {
                      var v1 = v.value;
                      if (v1 instanceof Loop) {
                          var v2 = f$prime(v1.value0)();
                          var v3 = v.value = v2;
                          return false;
                      };
                      if (v1 instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class line 130, column 5 - line 135, column 26: " + [ v1.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Control_Monad_Eff.functorEff)(fromDone)(Control_Monad_ST.readSTRef(v))();
          };
      };
  }; 
  var monadRecEff = new MonadRec(function () {
      return Control_Monad_Eff.monadEff;
  }, tailRecEff);
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["monadRecEff"] = monadRecEff;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
    "use strict";

  exports.emptySTArray = function () {
    return [];
  };

  exports.pushAllSTArray = function (xs) {
    return function (as) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Array.ST"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var unsafeFreeze = function ($8) {
      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)($8);
  };
  var pushSTArray = function (arr) {
      return function (a) {
          return $foreign.pushAllSTArray(arr)([ a ]);
      };
  };
  exports["pushSTArray"] = pushSTArray;
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["emptySTArray"] = $foreign.emptySTArray;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];        
  var Iterator = (function () {
      function Iterator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iterator.create = function (value0) {
          return function (value1) {
              return new Iterator(value0, value1);
          };
      };
      return Iterator;
  })();
  var peek = function (v) {
      return function __do() {
          var v1 = Control_Monad_ST.readSTRef(v.value1)();
          return v.value0(v1);
      };
  };
  var next = function (v) {
      return function __do() {
          var v1 = Control_Monad_ST.readSTRef(v.value1)();
          var v2 = Control_Monad_ST.modifySTRef(v.value1)(function (v2) {
              return v2 + 1 | 0;
          })();
          return v.value0(v1);
      };
  };
  var pushWhile = function (p) {
      return function (iter) {
          return function (array) {
              return function __do() {
                  var v = Control_Monad_ST.newSTRef(false)();
                  while (Data_Functor.map(Control_Monad_Eff.functorEff)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST.readSTRef(v))()) {
                      (function __do() {
                          var v1 = peek(iter)();
                          if (v1 instanceof Data_Maybe.Just && p(v1.value0)) {
                              var v2 = Data_Array_ST.pushSTArray(array)(v1.value0)();
                              return Data_Functor["void"](Control_Monad_Eff.functorEff)(next(iter))();
                          };
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST.writeSTRef(v)(true))();
                      })();
                  };
                  return {};
              };
          };
      };
  };                                                    
  var iterator = function (f) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Iterator.create(f))(Control_Monad_ST.newSTRef(0));
  };
  var iterate = function (iter) {
      return function (f) {
          return function __do() {
              var v = Control_Monad_ST.newSTRef(false)();
              while (Data_Functor.map(Control_Monad_Eff.functorEff)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST.readSTRef(v))()) {
                  (function __do() {
                      var v1 = next(iter)();
                      if (v1 instanceof Data_Maybe.Just) {
                          return f(v1.value0)();
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST.writeSTRef(v)(true))();
                      };
                      throw new Error("Failed pattern match at Data.Array.ST.Iterator line 39, column 5 - line 41, column 46: " + [ v1.constructor.name ]);
                  })();
              };
              return {};
          };
      };
  };
  exports["iterator"] = iterator;
  exports["iterate"] = iterate;
  exports["next"] = next;
  exports["peek"] = peek;
  exports["pushWhile"] = pushWhile;
})(PS["Data.Array.ST.Iterator"] = PS["Data.Array.ST.Iterator"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Prelude = PS["Prelude"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var showNonEmpty = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return new NonEmpty(f(v.value0), Data_Functor.map(dictFunctor)(f)(v.value1));
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["showNonEmpty"] = showNonEmpty;
  exports["functorNonEmpty"] = functorNonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["functorTuple"] = functorTuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
    "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Unfoldable = function (unfoldr) {
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable($foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array line 698, column 15 - line 703, column 1: " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var head = function (xs) {
      return index(xs)(0);
  };
  var groupBy = function (op) {
      return function (xs) {
          return Control_Monad_ST.pureST(function __do() {
              var v = Data_Array_ST.emptySTArray();
              var v1 = Data_Array_ST_Iterator.iterator(function (v1) {
                  return index(xs)(v1);
              })();
              Data_Array_ST_Iterator.iterate(v1)(function (x) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                      var v2 = Data_Array_ST.emptySTArray();
                      Data_Array_ST_Iterator.pushWhile(op(x))(v1)(v2)();
                      var v3 = Data_Array_ST.unsafeFreeze(v2)();
                      return Data_Array_ST.pushSTArray(v)(new Data_NonEmpty.NonEmpty(x, v3))();
                  });
              })();
              return Data_Array_ST.unsafeFreeze(v)();
          });
      };
  };
  var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var intersectBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return $foreign.filter(function (x) {
                  return Data_Maybe.isJust(findIndex(eq(x))(ys));
              })(xs);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
  };
  var deleteAt = $foreign._deleteAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return Data_Foldable.foldr(Data_Foldable.foldableArray)($$delete(dictEq));
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($94) {
          return Data_Maybe.maybe([  ])(singleton)(f($94));
      });
  };
  var catMaybes = mapMaybe(Control_Category.id(Control_Category.categoryFn));
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["head"] = head;
  exports["uncons"] = uncons;
  exports["index"] = index;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["deleteAt"] = deleteAt;
  exports["updateAt"] = updateAt;
  exports["concatMap"] = concatMap;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["sortBy"] = sortBy;
  exports["groupBy"] = groupBy;
  exports["delete"] = $$delete;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["intersect"] = intersect;
  exports["intersectBy"] = intersectBy;
  exports["zipWithA"] = zipWithA;
  exports["zip"] = zip;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["snoc"] = $foreign.snoc;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["partition"] = $foreign.partition;
  exports["slice"] = $foreign.slice;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
  exports["zipWith"] = $foreign.zipWith;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Char"];
  exports["fromCharCode"] = $foreign.fromCharCode;
  exports["toCharCode"] = $foreign.toCharCode;
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Maybe = PS["Data.Maybe"];        
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var to = function (dict) {
      return dict.to;
  }; 
  var from = function (dict) {
      return dict.from;
  };
  exports["Generic"] = Generic;
  exports["to"] = to;
  exports["from"] = from;
  exports["NoArguments"] = NoArguments;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
})(PS["Data.Generic.Rep"] = PS["Data.Generic.Rep"] || {});
(function(exports) {
    "use strict";

  exports.defer = function () {

    function Defer(thunk) {
      if (this instanceof Defer) {
        this.thunk = thunk;
        return this;
      } else {
        return new Defer(thunk);
      }
    }

    Defer.prototype.force = function () {
      var value = this.thunk();
      this.thunk = null;
      this.force = function () {
        return value;
      };
      return value;
    };

    return Defer;

  }();

  exports.force = function (l) {
    return l.force();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Lazy"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var functorLazy = new Data_Functor.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  var applyLazy = new Control_Apply.Apply(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return $foreign.force(f)($foreign.force(x));
          });
      };
  });
  var bindLazy = new Control_Bind.Bind(function () {
      return applyLazy;
  }, function (l) {
      return function (f) {
          return $foreign.defer(function (v) {
              return $foreign.force(f($foreign.force(l)));
          });
      };
  });
  exports["functorLazy"] = functorLazy;
  exports["applyLazy"] = applyLazy;
  exports["bindLazy"] = bindLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($158) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($158));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 81, column 12 - line 83, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($159) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($159));
          };
      };
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  };
  var showNonEmptyList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
      });
  };
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function ($162) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value))(Data_Foldable.foldl(foldableList)(function (acc) {
                  return function ($163) {
                      return Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc)(f($163));
                  };
              })(Control_Applicative.pure(dictApplicative)(Nil.value))($162));
          };
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 120, column 1 - line 120, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, function ($168) {
      return NonEmptyList(Data_NonEmpty.singleton(plusList)($168));
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["showList"] = showList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["showNonEmptyList"] = showNonEmptyList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applyNonEmptyList"] = applyNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                                                   
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 259, column 1 - line 259, column 66: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List line 245, column 1 - line 245, column 43: " + [ v.constructor.name ]);
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 3 - line 368, column 19: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, v1, acc) {
                              if (v instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v.value1;
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List line 708, column 3 - line 708, column 21: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
              };
              return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
          };
      };
  };
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 230, column 1 - line 230, column 22: " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["null"] = $$null;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["reverse"] = reverse;
  exports["zipWith"] = zipWith;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
    "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports._toChar = function (just) {
    return function (nothing) {
      return function (s) {
        return s.length === 1 ? just(s) : nothing;
      };
    };
  };

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports._lastIndexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.lastIndexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.count = function (p) {
    return function (s) {
      var i = 0;
      while (i < s.length && p(s.charAt(i))) i++;
      return i;
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports._splitAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ?
                 just({ before: s.substring(0, i), after: s.substring(i) }) :
                 nothing;
        };
      };
    };
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.String"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];
  var toChar = $foreign._toChar(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var takeWhile = function (p) {
      return function (s) {
          return $foreign.take($foreign.count(p)(s))(s);
      };
  };
  var splitAt = $foreign._splitAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);                  
  var lastIndexOf = $foreign._lastIndexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);  
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["toChar"] = toChar;
  exports["indexOf"] = indexOf;
  exports["lastIndexOf"] = lastIndexOf;
  exports["takeWhile"] = takeWhile;
  exports["splitAt"] = splitAt;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["singleton"] = $foreign.singleton;
  exports["drop"] = $foreign.drop;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["joinWith"] = $foreign.joinWith;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var NatTrie = (function () {
      function NatTrie(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      NatTrie.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new NatTrie(value0, value1, value2);
              };
          };
      };
      return NatTrie;
  })();
  var Tabulate = function (tabulate) {
      this.tabulate = tabulate;
  }; 
  var tabulateNat = new Tabulate((function () {
      var tabulateImpl = function (f) {
          var walk = function (v) {
              return function (v1) {
                  if (v instanceof Data_List_Types.Nil) {
                      return v1.value0;
                  };
                  if (v instanceof Data_List_Types.Cons && !v.value0) {
                      return Control_Bind.bind(Data_Lazy.bindLazy)(v1.value1)(walk(v.value1));
                  };
                  if (v instanceof Data_List_Types.Cons && v.value0) {
                      return Control_Bind.bind(Data_Lazy.bindLazy)(v1.value2)(walk(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.Function.Memoize line 136, column 11 - line 136, column 64: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          var build = function (n) {
              return new NatTrie(Data_Lazy.defer(function (v) {
                  return f(n);
              }), Data_Lazy.defer(function (v) {
                  return build(n * 2 | 0);
              }), Data_Lazy.defer(function (v) {
                  return build((n * 2 | 0) + 1 | 0);
              }));
          };
          var trie = build(0);
          var bits = (function () {
              var bits$prime = function ($copy_acc) {
                  return function ($copy_v) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(acc, v) {
                          if (v === 0) {
                              $tco_done = true;
                              return acc;
                          };
                          $tco_var_acc = new Data_List_Types.Cons((v & 1) !== 0, acc);
                          $copy_v = v >>> 1;
                          return;
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return bits$prime(Data_List_Types.Nil.value);
          })();
          var go = function (n) {
              return walk(bits(n))(trie);
          };
          return go;
      };
      return tabulateImpl;
  })());
  var tabulateBool = new Tabulate(function (f) {
      var r2 = Data_Lazy.defer(function (v) {
          return f(false);
      });
      var r1 = Data_Lazy.defer(function (v) {
          return f(true);
      });
      return function (b) {
          if (b) {
              return r1;
          };
          return r2;
      };
  });
  var tabulate = function (dict) {
      return dict.tabulate;
  };
  var tabulateChar = new Tabulate(function (f) {
      var f1 = tabulate(tabulateNat)(function ($90) {
          return f(Data_Char.fromCharCode($90));
      });
      return function ($91) {
          return f1(Data_Char.toCharCode($91));
      };
  });
  var tabulateMaybe = function (dictTabulate) {
      return new Tabulate(function (f) {
          var n = Data_Lazy.defer(function (v) {
              return f(Data_Maybe.Nothing.value);
          });
          var j = tabulate(dictTabulate)(function ($96) {
              return f(Data_Maybe.Just.create($96));
          });
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return n;
              };
              if (v instanceof Data_Maybe.Just) {
                  return j(v.value0);
              };
              throw new Error("Failed pattern match at Data.Function.Memoize line 66, column 19 - line 68, column 35: " + [ v.constructor.name ]);
          };
      });
  };
  var tabulateTuple = function (dictTabulate) {
      return function (dictTabulate1) {
          return new Tabulate(function (f) {
              var f$prime = tabulate(dictTabulate)(function (a) {
                  return tabulate(dictTabulate1)(function (b) {
                      return f(new Data_Tuple.Tuple(a, b));
                  });
              });
              return function (v) {
                  return Control_Bind.bind(Data_Lazy.bindLazy)(f$prime(v.value0))(function (v1) {
                      return v1(v.value1);
                  });
              };
          });
      };
  };
  var tabulateList = function (dictTabulate) {
      return new Tabulate(function (f) {
          var toList = function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_List_Types.Nil.value;
              };
              if (v instanceof Data_Maybe.Just) {
                  return new Data_List_Types.Cons(v.value0.value0, v.value0.value1);
              };
              throw new Error("Failed pattern match at Data.Function.Memoize line 98, column 7 - line 98, column 27: " + [ v.constructor.name ]);
          };
          var fromList = function (v) {
              if (v instanceof Data_List_Types.Nil) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_List_Types.Cons) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
              };
              throw new Error("Failed pattern match at Data.Function.Memoize line 101, column 7 - line 101, column 29: " + [ v.constructor.name ]);
          };
          var f$prime = tabulate(tabulateMaybe(tabulateTuple(dictTabulate)(tabulateList(dictTabulate))))(function ($99) {
              return f(toList($99));
          });
          return function ($100) {
              return f$prime(fromList($100));
          };
      });
  };
  var tabulateArray = function (dictTabulate) {
      return new Tabulate(function (f) {
          var f1 = tabulate(tabulateList(dictTabulate))(function ($101) {
              return f(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)($101));
          });
          return function ($102) {
              return f1(Data_List.fromFoldable(Data_Foldable.foldableArray)($102));
          };
      });
  };
  var tabulateString = new Tabulate(function (f) {
      var f1 = tabulate(tabulateArray(tabulateChar))(function ($103) {
          return f(Data_String.fromCharArray($103));
      });
      return function ($104) {
          return f1(Data_String.toCharArray($104));
      };
  });
  var memoize = function (dictTabulate) {
      return function (f) {
          var f1 = tabulate(dictTabulate)(f);
          return function ($105) {
              return Data_Lazy.force(f1($105));
          };
      };
  };
  exports["Tabulate"] = Tabulate;
  exports["tabulate"] = tabulate;
  exports["memoize"] = memoize;
  exports["tabulateBool"] = tabulateBool;
  exports["tabulateChar"] = tabulateChar;
  exports["tabulateString"] = tabulateString;
  exports["tabulateMaybe"] = tabulateMaybe;
  exports["tabulateTuple"] = tabulateTuple;
  exports["tabulateList"] = tabulateList;
  exports["tabulateArray"] = tabulateArray;
  exports["tabulateNat"] = tabulateNat;
})(PS["Data.Function.Memoize"] = PS["Data.Function.Memoize"] || {});
(function(exports) {
    "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];        
  var multimap = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return function ($9) {
                  return Data_Functor.map(dictFunctor)(f)(v($9));
              };
          };
      };
  };
  var justIf = function (v) {
      if (v) {
          return Data_Maybe.Just.create;
      };
      if (!v) {
          return Data_Function["const"](Data_Maybe.Nothing.value);
      };
      throw new Error("Failed pattern match at Operators line 37, column 1 - line 37, column 36: " + [ v.constructor.name ]);
  };
  var doIf = function (v) {
      if (v) {
          return Control_Category.id(Control_Category.categoryFn);
      };
      if (!v) {
          return Data_Function["const"](Control_Category.id(Control_Category.categoryFn));
      };
      throw new Error("Failed pattern match at Operators line 30, column 1 - line 30, column 40: " + [ v.constructor.name ]);
  };
  var advance = function (dictBind) {
      return function (dictApplicative) {
          return function (a) {
              return function (b) {
                  return Control_Bind.bind(dictBind)(a)(function (v) {
                      return Control_Applicative.pure(dictApplicative)(b);
                  });
              };
          };
      };
  };
  exports["doIf"] = doIf;
  exports["multimap"] = multimap;
  exports["justIf"] = justIf;
  exports["advance"] = advance;
})(PS["Operators"] = PS["Operators"] || {});
(function(exports) {
    "use strict";

  function id(x) {
    return x;
  } 

  exports.fromBoolean = id;
  exports.fromNumber = id;
  exports.fromString = id;
  exports.fromArray = id;
  exports.fromObject = id;

  exports.jsonNull = null;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  var objToString = Object.prototype.toString;

  function isArray(a) {
    return objToString.call(a) === "[object Array]";
  }

  exports._foldJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull(null);
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (objToString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
    "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
    "use strict";

  exports._copyEff = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f;
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
    "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (m) {
    return function (k) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
  exports["delete"] = $foreign["delete"];
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];                                   
  var thawST = $foreign._copyEff;
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var singleton = function (k) {
      return function (v) {
          return pureST(function __do() {
              var v1 = Data_StrMap_ST["new"]();
              return Data_StrMap_ST.poke(v1)(k)(v)();
          });
      };
  };
  var mutate = function (f) {
      return function (m) {
          return pureST(function __do() {
              var v = thawST(m)();
              var v1 = f(v)();
              return v;
          });
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(function (s) {
              return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_StrMap_ST.poke(s)(k)(v));
          });
      };
  }; 
  var $$delete = function (k) {
      return mutate(function (s) {
          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_StrMap_ST["delete"](s)(k));
      });
  };
  var alter = function (f) {
      return function (k) {
          return function (m) {
              var v = f(lookup(k)(m));
              if (v instanceof Data_Maybe.Nothing) {
                  return $$delete(k)(m);
              };
              if (v instanceof Data_Maybe.Just) {
                  return insert(k)(v.value0)(m);
              };
              throw new Error("Failed pattern match at Data.StrMap line 213, column 15 - line 215, column 25: " + [ v.constructor.name ]);
          };
      };
  };
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["delete"] = $$delete;
  exports["alter"] = alter;
  exports["thawST"] = thawST;
  exports["pureST"] = pureST;
  exports["empty"] = $foreign.empty;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Argonaut.Core"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var verbJsonType = function (def) {
      return function (f) {
          return function (fold) {
              return fold(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var isJsonType = verbJsonType(false)(Data_Function["const"](true));
  var foldJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var toString = toJsonType(foldJsonString);
  var foldJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };                                        
  var toObject = toJsonType(foldJsonObject);
  var foldJsonNumber = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var toNumber = toJsonType(foldJsonNumber);
  var foldJsonNull = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };
  var isNull = isJsonType(foldJsonNull);
  var foldJsonBoolean = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                          
  var toBoolean = toJsonType(foldJsonBoolean);
  var foldJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
          };
      };
  };                                      
  var toArray = toJsonType(foldJsonArray);
  exports["foldJsonNull"] = foldJsonNull;
  exports["foldJsonBoolean"] = foldJsonBoolean;
  exports["foldJsonNumber"] = foldJsonNumber;
  exports["foldJsonString"] = foldJsonString;
  exports["foldJsonArray"] = foldJsonArray;
  exports["foldJsonObject"] = foldJsonObject;
  exports["isNull"] = isNull;
  exports["toBoolean"] = toBoolean;
  exports["toNumber"] = toNumber;
  exports["toString"] = toString;
  exports["toArray"] = toArray;
  exports["toObject"] = toObject;
  exports["fromBoolean"] = $foreign.fromBoolean;
  exports["fromNumber"] = $foreign.fromNumber;
  exports["fromString"] = $foreign.fromString;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromObject"] = $foreign.fromObject;
  exports["jsonNull"] = $foreign.jsonNull;
  exports["stringify"] = $foreign.stringify;
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
    "use strict";

  // module Data.Generic

  exports.zipAll = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        for (var i = 0; i < l; i++) {
          if (!f(xs[i])(ys[i])) {
            return false;
          }
        }
        return true;
      };
    };
  };
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS["Type.Proxy"] = PS["Type.Proxy"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Generic"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Prelude = PS["Prelude"];
  var Type_Proxy = PS["Type.Proxy"];        
  var SProd = (function () {
      function SProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SProd.create = function (value0) {
          return function (value1) {
              return new SProd(value0, value1);
          };
      };
      return SProd;
  })();
  var SRecord = (function () {
      function SRecord(value0) {
          this.value0 = value0;
      };
      SRecord.create = function (value0) {
          return new SRecord(value0);
      };
      return SRecord;
  })();
  var SNumber = (function () {
      function SNumber(value0) {
          this.value0 = value0;
      };
      SNumber.create = function (value0) {
          return new SNumber(value0);
      };
      return SNumber;
  })();
  var SBoolean = (function () {
      function SBoolean(value0) {
          this.value0 = value0;
      };
      SBoolean.create = function (value0) {
          return new SBoolean(value0);
      };
      return SBoolean;
  })();
  var SInt = (function () {
      function SInt(value0) {
          this.value0 = value0;
      };
      SInt.create = function (value0) {
          return new SInt(value0);
      };
      return SInt;
  })();
  var SString = (function () {
      function SString(value0) {
          this.value0 = value0;
      };
      SString.create = function (value0) {
          return new SString(value0);
      };
      return SString;
  })();
  var SChar = (function () {
      function SChar(value0) {
          this.value0 = value0;
      };
      SChar.create = function (value0) {
          return new SChar(value0);
      };
      return SChar;
  })();
  var SArray = (function () {
      function SArray(value0) {
          this.value0 = value0;
      };
      SArray.create = function (value0) {
          return new SArray(value0);
      };
      return SArray;
  })();
  var SUnit = (function () {
      function SUnit() {

      };
      SUnit.value = new SUnit();
      return SUnit;
  })();
  var SigProd = (function () {
      function SigProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SigProd.create = function (value0) {
          return function (value1) {
              return new SigProd(value0, value1);
          };
      };
      return SigProd;
  })();
  var SigRecord = (function () {
      function SigRecord(value0) {
          this.value0 = value0;
      };
      SigRecord.create = function (value0) {
          return new SigRecord(value0);
      };
      return SigRecord;
  })();
  var SigNumber = (function () {
      function SigNumber() {

      };
      SigNumber.value = new SigNumber();
      return SigNumber;
  })();
  var SigBoolean = (function () {
      function SigBoolean() {

      };
      SigBoolean.value = new SigBoolean();
      return SigBoolean;
  })();
  var SigInt = (function () {
      function SigInt() {

      };
      SigInt.value = new SigInt();
      return SigInt;
  })();
  var SigString = (function () {
      function SigString() {

      };
      SigString.value = new SigString();
      return SigString;
  })();
  var SigChar = (function () {
      function SigChar() {

      };
      SigChar.value = new SigChar();
      return SigChar;
  })();
  var SigArray = (function () {
      function SigArray(value0) {
          this.value0 = value0;
      };
      SigArray.create = function (value0) {
          return new SigArray(value0);
      };
      return SigArray;
  })();
  var SigUnit = (function () {
      function SigUnit() {

      };
      SigUnit.value = new SigUnit();
      return SigUnit;
  })();
  var Generic = function (fromSpine, toSignature, toSpine) {
      this.fromSpine = fromSpine;
      this.toSignature = toSignature;
      this.toSpine = toSpine;
  };
  var toSpine = function (dict) {
      return dict.toSpine;
  };
  var toSignature = function (dict) {
      return dict.toSignature;
  }; 
  var genericString = new Generic(function (v) {
      if (v instanceof SString) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigString.value;
  }, SString.create);
  var genericInt = new Generic(function (v) {
      if (v instanceof SInt) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigInt.value;
  }, SInt.create); 
  var genericBool = new Generic(function (v) {
      if (v instanceof SBoolean) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigBoolean.value;
  }, SBoolean.create);
  var fromSpine = function (dict) {
      return dict.fromSpine;
  };
  var force = function (f) {
      return f(Data_Unit.unit);
  };
  var genericArray = function (dictGeneric) {
      return new Generic(function (v) {
          if (v instanceof SArray) {
              return Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(function ($310) {
                  return fromSpine(dictGeneric)(force($310));
              })(v.value0);
          };
          return Data_Maybe.Nothing.value;
      }, function (x) {
          var lowerProxy = function (v) {
              return Type_Proxy["Proxy"].value;
          };
          return new SigArray(function (v) {
              return toSignature(dictGeneric)(lowerProxy(x));
          });
      }, function ($311) {
          return SArray.create(Data_Functor.map(Data_Functor.functorArray)(function (x) {
              return function (v) {
                  return toSpine(dictGeneric)(x);
              };
          })($311));
      });
  };
  var genericMaybe = function (dictGeneric) {
      return new Generic(function (v) {
          if (v instanceof SProd && (v.value0 === "Data.Maybe.Just" && v.value1.length === 1)) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(fromSpine(dictGeneric)(force(v["value1"][0])));
          };
          if (v instanceof SProd && (v.value0 === "Data.Maybe.Nothing" && v.value1.length === 0)) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Maybe.Nothing.value);
          };
          return Data_Maybe.Nothing.value;
      }, function (x) {
          var mbProxy = function (v) {
              return Type_Proxy["Proxy"].value;
          };
          return new SigProd("Data.Maybe.Maybe", [ {
              sigConstructor: "Data.Maybe.Just",
              sigValues: [ function (v) {
                  return toSignature(dictGeneric)(mbProxy(x));
              } ]
          }, {
              sigConstructor: "Data.Maybe.Nothing",
              sigValues: [  ]
          } ]);
      }, function (v) {
          if (v instanceof Data_Maybe.Just) {
              return new SProd("Data.Maybe.Just", [ function (v1) {
                  return toSpine(dictGeneric)(v.value0);
              } ]);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return new SProd("Data.Maybe.Nothing", [  ]);
          };
          throw new Error("Failed pattern match at Data.Generic line 160, column 1 - line 160, column 56: " + [ v.constructor.name ]);
      });
  };
  var genericTuple = function (dictGeneric) {
      return function (dictGeneric1) {
          return new Generic(function (v) {
              if (v instanceof SProd && (v.value0 === "Data.Tuple.Tuple" && v.value1.length === 2)) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(fromSpine(dictGeneric)(force(v["value1"][0]))))(fromSpine(dictGeneric1)(force(v["value1"][1])));
              };
              return Data_Maybe.Nothing.value;
          }, function (x) {
              var sndProxy = function (v) {
                  return Type_Proxy["Proxy"].value;
              };
              var fstProxy = function (v) {
                  return Type_Proxy["Proxy"].value;
              };
              return new SigProd("Data.Tuple.Tuple", [ {
                  sigConstructor: "Data.Tuple.Tuple",
                  sigValues: [ function (v) {
                      return toSignature(dictGeneric)(fstProxy(x));
                  }, function (v) {
                      return toSignature(dictGeneric1)(sndProxy(x));
                  } ]
              } ]);
          }, function (v) {
              return new SProd("Data.Tuple.Tuple", [ function (v1) {
                  return toSpine(dictGeneric)(v.value0);
              }, function (v1) {
                  return toSpine(dictGeneric1)(v.value1);
              } ]);
          });
      };
  };                                                           
  var eqThunk = function (dictEq) {
      return function (x) {
          return function (y) {
              return Data_Eq.eq(dictEq)(force(x))(force(y));
          };
      };
  };
  var eqRecordSigs = function (dictEq) {
      return function (arr1) {
          return function (arr2) {
              var labelCompare = function (r1) {
                  return function (r2) {
                      return Data_Ord.compare(Data_Ord.ordString)(r1.recLabel)(r2.recLabel);
                  };
              };
              var sorted1 = Data_Array.sortBy(labelCompare)(arr1);
              var sorted2 = Data_Array.sortBy(labelCompare)(arr2);
              var doCmp = function (x) {
                  return function (y) {
                      return x.recLabel === y.recLabel && Data_Eq.eq(dictEq)(force(x.recValue))(force(y.recValue));
                  };
              };
              return Data_Array.length(arr1) === Data_Array.length(arr2) && $foreign.zipAll(doCmp)(sorted1)(sorted2);
          };
      };
  };
  var eqGenericSpine = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof SProd && v1 instanceof SProd) {
              return v.value0 === v1.value0 && (Data_Array.length(v.value1) === Data_Array.length(v1.value1) && $foreign.zipAll(eqThunk(eqGenericSpine))(v.value1)(v1.value1));
          };
          if (v instanceof SRecord && v1 instanceof SRecord) {
              return eqRecordSigs(eqGenericSpine)(v.value0)(v1.value0);
          };
          if (v instanceof SNumber && v1 instanceof SNumber) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SBoolean && v1 instanceof SBoolean) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SInt && v1 instanceof SInt) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SString && v1 instanceof SString) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SChar && v1 instanceof SChar) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SArray && v1 instanceof SArray) {
              return Data_Array.length(v.value0) === Data_Array.length(v1.value0) && $foreign.zipAll(eqThunk(eqGenericSpine))(v.value0)(v1.value0);
          };
          if (v instanceof SUnit && v1 instanceof SUnit) {
              return true;
          };
          return false;
      };
  });
  exports["Generic"] = Generic;
  exports["toSpine"] = toSpine;
  exports["toSignature"] = toSignature;
  exports["fromSpine"] = fromSpine;
  exports["SProd"] = SProd;
  exports["SRecord"] = SRecord;
  exports["SNumber"] = SNumber;
  exports["SBoolean"] = SBoolean;
  exports["SInt"] = SInt;
  exports["SString"] = SString;
  exports["SChar"] = SChar;
  exports["SArray"] = SArray;
  exports["SUnit"] = SUnit;
  exports["SigProd"] = SigProd;
  exports["SigRecord"] = SigRecord;
  exports["SigNumber"] = SigNumber;
  exports["SigBoolean"] = SigBoolean;
  exports["SigInt"] = SigInt;
  exports["SigString"] = SigString;
  exports["SigChar"] = SigChar;
  exports["SigArray"] = SigArray;
  exports["SigUnit"] = SigUnit;
  exports["genericInt"] = genericInt;
  exports["genericString"] = genericString;
  exports["genericBool"] = genericBool;
  exports["genericArray"] = genericArray;
  exports["genericTuple"] = genericTuple;
  exports["genericMaybe"] = genericMaybe;
  exports["eqGenericSpine"] = eqGenericSpine;
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];        
  var TaggedObject = (function () {
      function TaggedObject(value0) {
          this.value0 = value0;
      };
      TaggedObject.create = function (value0) {
          return new TaggedObject(value0);
      };
      return TaggedObject;
  })();
  exports["TaggedObject"] = TaggedObject;
})(PS["Data.Argonaut.Generic.Options"] = PS["Data.Argonaut.Generic.Options"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_String = PS["Data.String"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Proxy = PS["Type.Proxy"];        
  var stripModulePath = function (constr) {
      var v = Data_String.lastIndexOf(".")(constr);
      if (v instanceof Data_Maybe.Nothing) {
          return constr;
      };
      if (v instanceof Data_Maybe.Just) {
          return Data_String.drop(v.value0 + 1 | 0)(constr);
      };
      throw new Error("Failed pattern match at Data.Argonaut.Generic.Util line 21, column 26 - line 23, column 48: " + [ v.constructor.name ]);
  };
  var spineIsRecord = function (r) {
      if (r instanceof Data_Generic.SRecord) {
          return true;
      };
      return false;
  };
  var sigIsMaybe = function (sig) {
      var maybeConstructor = (function () {
          var v = Data_Generic.toSignature(Data_Generic.genericMaybe(Data_Generic.genericInt))(Type_Proxy["Proxy"].value);
          if (v instanceof Data_Generic.SigProd) {
              return v.value0;
          };
          return "";
      })();
      if (sig instanceof Data_Generic.SigProd) {
          return sig.value0 === maybeConstructor;
      };
      return false;
  };
  var isUnaryRecord = function (constrSigns) {
      return Data_Array.length(constrSigns) === 1;
  };
  var constructorIsRecord = function (constr) {
      return Data_Maybe.fromMaybe(false)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v(Data_Unit.unit);
      })(Data_Array.head(constr.sigValues)))(function (v) {
          if (v instanceof Data_Generic.SigRecord) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(true);
          };
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(false);
      }));
  };
  var allConstructorsNullary = Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function ($18) {
      return Data_Array["null"]((function (v) {
          return v.sigValues;
      })($18));
  });
  exports["allConstructorsNullary"] = allConstructorsNullary;
  exports["isUnaryRecord"] = isUnaryRecord;
  exports["stripModulePath"] = stripModulePath;
  exports["spineIsRecord"] = spineIsRecord;
  exports["constructorIsRecord"] = constructorIsRecord;
  exports["sigIsMaybe"] = sigIsMaybe;
})(PS["Data.Argonaut.Generic.Util"] = PS["Data.Argonaut.Generic.Util"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Ring = PS["Data.Ring"];
  var Prelude = PS["Prelude"];        
  var tail = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(1)(Data_Array.length(xs))(xs);
      };
  };
  var head = function (dictPartial) {
      return function (xs) {
          return xs[0];
      };
  };
  exports["head"] = head;
  exports["tail"] = tail;
})(PS["Data.Array.Partial"] = PS["Data.Array.Partial"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];      
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Generic_Options = PS["Data.Argonaut.Generic.Options"];
  var Data_Argonaut_Generic_Util = PS["Data.Argonaut.Generic.Util"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Partial = PS["Data.Array.Partial"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Proxy = PS["Type.Proxy"];        
  var mFail = function (msg) {
      return Data_Maybe.maybe(new Data_Either.Left("Generic json decoding failed: " + msg))(Data_Either.Right.create);
  };
  var mFail$prime = function (msg) {
      return function (json) {
          return mFail(msg + (": '" + (Data_Argonaut_Core.stringify(json) + "'")));
      };
  };
  var genericUserDecodeJson$prime = function (v) {
      return function (sign) {
          return function (json) {
              return Data_Maybe.fromMaybe(genericDecodeJson$prime(v)(sign)(json))(v.userDecoding(v)(sign)(json));
          };
      };
  };
  var genericDecodeProdJson$prime = function (v) {
      return function (tname) {
          return function (constrSigns) {
              return function (json) {
                  var findConstr = function (tag) {
                      return Data_Foldable.find(Data_Foldable.foldableArray)(function ($63) {
                          return (function (v1) {
                              return tag === v1;
                          })(v.constructorTagModifier((function (v1) {
                              return v1.sigConstructor;
                          })($63)));
                      })(constrSigns);
                  };
                  var decodingErr = function (msg) {
                      return "When decoding a " + (tname + (": " + msg));
                  };
                  var findConstrFail = function (tag) {
                      return mFail(decodingErr("'" + (tag + "' isn't a valid constructor")))(findConstr(tag));
                  };
                  var decodeFromString = Control_Bind.bind(Data_Either.bindEither)(mFail$prime(decodingErr("Constructor name as string expected"))(json)(Data_Argonaut_Core.toString(json)))(function (v1) {
                      return Control_Bind.bind(Data_Either.bindEither)(findConstrFail(v1))(function (v2) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_Generic.SProd(v2.sigConstructor, [  ]));
                      });
                  });
                  var decodeConstructor = function (constr) {
                      return function (jVals) {
                          return Control_Bind.bind(Data_Either.bindEither)((function () {
                              var $31 = (v.flattenContentsArray || v.sumEncoding.value0.unpackRecords) && Data_Array.length(constr.sigValues) === 1;
                              if ($31) {
                                  return Control_Applicative.pure(Data_Either.applicativeEither)([ jVals ]);
                              };
                              return mFail$prime(decodingErr("Expected array"))(json)(Data_Argonaut_Core.toArray(jVals));
                          })())(function (v1) {
                              return Control_Bind.bind(Data_Either.bindEither)(Data_Array.zipWithA(Data_Either.applicativeEither)(function (k) {
                                  return genericUserDecodeJson$prime(v)(k(Data_Unit.unit));
                              })(constr.sigValues)(v1))(function (v2) {
                                  return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_Generic.SProd(constr.sigConstructor, Data_Functor.map(Data_Functor.functorArray)(Data_Function["const"])(v2)));
                              });
                          });
                      };
                  };
                  var decodeTagged = Control_Bind.bind(Data_Either.bindEither)(mFail$prime(decodingErr("expected an object"))(json)(Data_Argonaut_Core.toObject(json)))(function (v1) {
                      return Control_Bind.bind(Data_Either.bindEither)(mFail$prime(decodingErr("'") + (v.sumEncoding.value0.tagFieldName + "' property is missing"))(json)(Data_StrMap.lookup(v.sumEncoding.value0.tagFieldName)(v1)))(function (v2) {
                          return Control_Bind.bind(Data_Either.bindEither)(mFail$prime(decodingErr("'") + (v.sumEncoding.value0.tagFieldName + "' property is not a string"))(json)(Data_Argonaut_Core.toString(v2)))(function (v3) {
                              return Control_Bind.bind(Data_Either.bindEither)(findConstrFail(v3))(function (v4) {
                                  return Control_Bind.bind(Data_Either.bindEither)((function () {
                                      var $38 = v.sumEncoding.value0.unpackRecords && Data_Argonaut_Generic_Util.constructorIsRecord(v4);
                                      if ($38) {
                                          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Argonaut_Core.fromObject(Data_StrMap["delete"](v.sumEncoding.value0.tagFieldName)(v1)));
                                      };
                                      var v5 = Data_StrMap.lookup(v.sumEncoding.value0.contentsFieldName)(v1);
                                      if (v5 instanceof Data_Maybe.Nothing) {
                                          if (v.flattenContentsArray) {
                                              return Data_Either.Right.create(Data_Argonaut_Core.fromArray([  ]));
                                          };
                                          return new Data_Either.Left(decodingErr("'") + (v.sumEncoding.value0.contentsFieldName + "' property is missing"));
                                      };
                                      if (v5 instanceof Data_Maybe.Just) {
                                          return new Data_Either.Right(v5.value0);
                                      };
                                      throw new Error("Failed pattern match at Data.Argonaut.Generic.Decode line 89, column 21 - line 93, column 48: " + [ v5.constructor.name ]);
                                  })())(function (v5) {
                                      return decodeConstructor(v4)(v5);
                                  });
                              });
                          });
                      });
                  });
                  return (function (dictPartial) {
                      var $43 = !v.encodeSingleConstructors && Data_Argonaut_Generic_Util.isUnaryRecord(constrSigns);
                      if ($43) {
                          var constr = Data_Array_Partial.head(dictPartial)(constrSigns);
                          return decodeConstructor(constr)(json);
                      };
                      var $44 = v.allNullaryToStringTag && Data_Argonaut_Generic_Util.allConstructorsNullary(constrSigns);
                      if ($44) {
                          return decodeFromString;
                      };
                      return decodeTagged;
                  })();
              };
          };
      };
  };
  var genericDecodeJson$prime = function (v) {
      return function (signature) {
          return function (json) {
              if (signature instanceof Data_Generic.SigNumber) {
                  return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SNumber.create)(mFail$prime("Expected a number")(json)(Data_Argonaut_Core.toNumber(json)));
              };
              if (signature instanceof Data_Generic.SigInt) {
                  return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SInt.create)(mFail$prime("Expected an integer number")(json)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Int.fromNumber)(Data_Argonaut_Core.toNumber(json))));
              };
              if (signature instanceof Data_Generic.SigString) {
                  return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SString.create)(mFail$prime("Expected a string")(json)(Data_Argonaut_Core.toString(json)));
              };
              if (signature instanceof Data_Generic.SigChar) {
                  return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SChar.create)(mFail$prime("Expected a char")(json)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_String.toChar)(Data_Argonaut_Core.toString(json))));
              };
              if (signature instanceof Data_Generic.SigBoolean) {
                  return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SBoolean.create)(mFail$prime("Expected a boolean")(json)(Data_Argonaut_Core.toBoolean(json)));
              };
              if (signature instanceof Data_Generic.SigUnit) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Generic.SUnit.value);
              };
              if (signature instanceof Data_Generic.SigArray) {
                  return Control_Bind.bind(Data_Either.bindEither)(mFail$prime("Expected an array")(json)(Data_Argonaut_Core.toArray(json)))(function (v1) {
                      return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SArray.create)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(function ($64) {
                          return Data_Functor.map(Data_Either.functorEither)(Data_Function["const"])(genericUserDecodeJson$prime(v)(signature.value0(Data_Unit.unit))($64));
                      })(v1));
                  });
              };
              if (signature instanceof Data_Generic.SigRecord) {
                  return Control_Bind.bind(Data_Either.bindEither)(mFail$prime("Expected an object")(json)(Data_Argonaut_Core.toObject(json)))(function (v1) {
                      return Data_Functor.map(Data_Either.functorEither)(Data_Generic.SRecord.create)(Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableArray)(signature.value0)(function (v2) {
                          var jLabel = v.fieldLabelModifier(v2.recLabel);
                          var propSig = v2.recValue(Data_Unit.unit);
                          return Control_Bind.bind(Data_Either.bindEither)((function () {
                              var $55 = Data_Argonaut_Generic_Util.sigIsMaybe(propSig) && v.omitNothingFields;
                              if ($55) {
                                  return Data_Maybe.maybe(new Data_Either.Right(Data_Argonaut_Core.jsonNull))(Data_Either.Right.create)(Data_StrMap.lookup(jLabel)(v1));
                              };
                              return mFail$prime("'" + (jLabel + "' property missing"))(json)(Data_StrMap.lookup(jLabel)(v1));
                          })())(function (v3) {
                              return Control_Bind.bind(Data_Either.bindEither)(genericUserDecodeJson$prime(v)(propSig)(v3))(function (v4) {
                                  return Control_Applicative.pure(Data_Either.applicativeEither)({
                                      recLabel: v2.recLabel,
                                      recValue: Data_Function["const"](v4)
                                  });
                              });
                          });
                      }));
                  });
              };
              if (signature instanceof Data_Generic.SigProd) {
                  return genericDecodeProdJson$prime(v)(signature.value0)(signature.value1)(json);
              };
              throw new Error("Failed pattern match at Data.Argonaut.Generic.Decode line 44, column 58 - line 64, column 93: " + [ signature.constructor.name ]);
          };
      };
  };
  var genericDecodeJson = function (dictGeneric) {
      return function (opts) {
          return function (json) {
              return Control_Bind.bindFlipped(Data_Either.bindEither)(function ($65) {
                  return Data_Maybe.maybe(new Data_Either.Left("fromSpine failed"))(Data_Either.Right.create)(Data_Generic.fromSpine(dictGeneric)($65));
              })(genericUserDecodeJson$prime(opts)(Data_Generic.toSignature(dictGeneric)(Type_Proxy["Proxy"].value))(json));
          };
      };
  };
  exports["genericDecodeJson"] = genericDecodeJson;
  exports["genericUserDecodeJson'"] = genericUserDecodeJson$prime;
  exports["mFail"] = mFail;
})(PS["Data.Argonaut.Generic.Decode"] = PS["Data.Argonaut.Generic.Decode"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Generic_Options = PS["Data.Argonaut.Generic.Options"];
  var Data_Argonaut_Generic_Util = PS["Data.Argonaut.Generic.Util"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Partial = PS["Data.Array.Partial"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Proxy = PS["Type.Proxy"];        
  var unsafeHead = Data_Array_Partial.head();
  var genericUserEncodeJson$prime = function (v) {
      return function (sign) {
          return function (spine) {
              return Data_Maybe.fromMaybe(genericEncodeJson$prime(v)(sign)(spine))(v.userEncoding(v)(sign)(spine));
          };
      };
  };
  var genericEncodeRecordJson$prime = function (v) {
      return function (sigs) {
          return function (fields) {
              var label = function (field) {
                  return v.fieldLabelModifier(field.recLabel);
              };
              var addField = function (sig) {
                  return function (field) {
                      return function (sm) {
                          var spineIsNothing = Data_Eq.eq(Data_Generic.eqGenericSpine)(field.recValue(Data_Unit.unit))(Data_Generic.toSpine(Data_Generic.genericMaybe(Data_Generic.genericInt))(Data_Maybe.Nothing.value));
                          var omitField = Data_Argonaut_Generic_Util.sigIsMaybe(sig.recValue(Data_Unit.unit)) && (spineIsNothing && v.omitNothingFields);
                          var encodedField = genericUserEncodeJson$prime(v)(sig.recValue(Data_Unit.unit))(field.recValue(Data_Unit.unit));
                          if (omitField) {
                              return sm;
                          };
                          return Data_StrMap.insert(label(field))(encodedField)(sm);
                      };
                  };
              };
              return Data_Argonaut_Core.fromObject(Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(addField))(Data_StrMap.empty)(Data_Array.zip(sigs)(fields)));
          };
      };
  };
  var genericEncodeProdJson$prime = function (v) {
      return function (constrSigns) {
          return function (constr) {
              return function (args) {
                  var fixedConstr = v.constructorTagModifier(constr);
                  var encodedArgs = genericEncodeProdArgs(v)(constrSigns)(constr)(args);
                  var contents = (function () {
                      var $23 = (v.flattenContentsArray || v.sumEncoding.value0.unpackRecords) && Data_Array.length(encodedArgs) === 1;
                      if ($23) {
                          return unsafeHead(encodedArgs);
                      };
                      return Data_Argonaut_Core.fromArray(encodedArgs);
                  })();
                  var containedRecord = Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(v.sumEncoding.value0.unpackRecords))(function () {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                          return v1(Data_Unit.unit);
                      })(Data_Array.head(args)))(function (v1) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(Data_Argonaut_Generic_Util.spineIsRecord(v1)))(function () {
                              return Data_Argonaut_Core.toObject(contents);
                          });
                      });
                  });
                  var $25 = !v.encodeSingleConstructors && Data_Argonaut_Generic_Util.isUnaryRecord(constrSigns);
                  if ($25) {
                      return contents;
                  };
                  var $26 = v.allNullaryToStringTag && Data_Argonaut_Generic_Util.allConstructorsNullary(constrSigns);
                  if ($26) {
                      return Data_Argonaut_Core.fromString(fixedConstr);
                  };
                  if (containedRecord instanceof Data_Maybe.Nothing) {
                      return Data_Argonaut_Core.fromObject(Data_StrMap.insert(v.sumEncoding.value0.tagFieldName)(Data_Argonaut_Core.fromString(fixedConstr))((function () {
                          var $28 = v.flattenContentsArray && Data_Array.length(args) === 0;
                          if ($28) {
                              return Data_StrMap.empty;
                          };
                          return Data_StrMap.singleton(v.sumEncoding.value0.contentsFieldName)(contents);
                      })()));
                  };
                  if (containedRecord instanceof Data_Maybe.Just) {
                      return Data_Argonaut_Core.fromObject(Data_StrMap.insert(v.sumEncoding.value0.tagFieldName)(Data_Argonaut_Core.fromString(fixedConstr))(containedRecord.value0));
                  };
                  throw new Error("Failed pattern match at Data.Argonaut.Generic.Encode line 80, column 10 - line 87, column 80: " + [ containedRecord.constructor.name ]);
              };
          };
      };
  };
  var genericEncodeProdArgs = function (opts) {
      return function (constrSigns) {
          return function (constr) {
              return function (args) {
                  var values = Data_Functor.map(Data_Functor.functorArray)(function (v) {
                      return v(Data_Unit.unit);
                  })(args);
                  var lSigValues = Data_Array.concatMap(function (c) {
                      return c.sigValues;
                  })(Data_Array.filter(function (c) {
                      return c.sigConstructor === constr;
                  })(constrSigns));
                  var sigValues = Data_Functor.map(Data_Functor.functorArray)(function (v) {
                      return v(Data_Unit.unit);
                  })(lSigValues);
                  return Data_Array.zipWith(genericUserEncodeJson$prime(opts))(sigValues)(values);
              };
          };
      };
  };
  var genericEncodeJson$prime = function (opts) {
      return function (sign) {
          return function (spine) {
              if (spine instanceof Data_Generic.SInt) {
                  return Data_Argonaut_Core.fromNumber(Data_Int.toNumber(spine.value0));
              };
              if (spine instanceof Data_Generic.SString) {
                  return Data_Argonaut_Core.fromString(spine.value0);
              };
              if (spine instanceof Data_Generic.SChar) {
                  return Data_Argonaut_Core.fromString(Data_String.singleton(spine.value0));
              };
              if (spine instanceof Data_Generic.SNumber) {
                  return Data_Argonaut_Core.fromNumber(spine.value0);
              };
              if (spine instanceof Data_Generic.SBoolean) {
                  return Data_Argonaut_Core.fromBoolean(spine.value0);
              };
              if (spine instanceof Data_Generic.SUnit) {
                  return Data_Argonaut_Core.jsonNull;
              };
              if (spine instanceof Data_Generic.SArray) {
                  if (sign instanceof Data_Generic.SigArray) {
                      return Data_Argonaut_Core.fromArray(Data_Functor.map(Data_Functor.functorArray)(function ($47) {
                          return genericUserEncodeJson$prime(opts)(sign.value0(Data_Unit.unit))((function (v) {
                              return v(Data_Unit.unit);
                          })($47));
                      })(spine.value0));
                  };
                  return Partial_Unsafe.unsafeCrashWith("Signature does not match value, please don't do that!");
              };
              if (spine instanceof Data_Generic.SProd) {
                  if (sign instanceof Data_Generic.SigProd) {
                      return genericEncodeProdJson$prime(opts)(sign.value1)(spine.value0)(spine.value1);
                  };
                  return Partial_Unsafe.unsafeCrashWith("Signature does not match value, please don't do that!");
              };
              if (spine instanceof Data_Generic.SRecord) {
                  if (sign instanceof Data_Generic.SigRecord) {
                      return genericEncodeRecordJson$prime(opts)(sign.value0)(spine.value0);
                  };
                  return Partial_Unsafe.unsafeCrashWith("Signature does not match value, please don't do that!");
              };
              throw new Error("Failed pattern match at Data.Argonaut.Generic.Encode line 43, column 38 - line 60, column 1: " + [ spine.constructor.name ]);
          };
      };
  };
  exports["genericUserEncodeJson'"] = genericUserEncodeJson$prime;
})(PS["Data.Argonaut.Generic.Encode"] = PS["Data.Argonaut.Generic.Encode"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Generic_Decode = PS["Data.Argonaut.Generic.Decode"];
  var Data_Argonaut_Generic_Encode = PS["Data.Argonaut.Generic.Encode"];
  var Data_Argonaut_Generic_Options = PS["Data.Argonaut.Generic.Options"];
  var Data_Argonaut_Generic_Util = PS["Data.Argonaut.Generic.Util"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Partial = PS["Data.Array.Partial"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var unsafeTail = Data_Array_Partial.tail();
  var unsafeHead = Data_Array_Partial.head();
  var sumEncoding = new Data_Argonaut_Generic_Options.TaggedObject({
      tagFieldName: "tag",
      contentsFieldName: "contents",
      unpackRecords: true
  });
  var getSigsFromConstructor = function (arr) {
      return function (name) {
          var constr = unsafeHead(Data_Array.filter(function ($101) {
              return (function (v) {
                  return v === name;
              })((function (v) {
                  return v.sigConstructor;
              })($101));
          })(arr));
          return Data_Functor.map(Data_Functor.functorArray)(function (v) {
              return v(Data_Unit.unit);
          })(constr.sigValues);
      };
  };
  var getSigFromUnaryConstructor = function (arr) {
      return function (name) {
          return unsafeHead(getSigsFromConstructor(arr)(name));
      };
  };
  var getNestedTupleSigs$prime = function (v) {
      if (v.length === 2) {
          if (v[0] instanceof Data_Generic.SigProd && v[0].value0 === "Data.Tuple.Tuple") {
              return new Data_List_Types.Cons(v[1], getNestedTupleSigs$prime(getSigsFromConstructor(v[0].value1)("Data.Tuple.Tuple")));
          };
          return new Data_List_Types.Cons(v[1], new Data_List_Types.Cons(v[0], Data_List_Types.Nil.value));
      };
      return Partial_Unsafe.unsafeCrashWith("Shouldn't a PS tuple always exactly two values?! I seem to be mistaken with this.");
  };
  var getNestedTupleSigs = function ($102) {
      return Data_List.reverse(getNestedTupleSigs$prime($102));
  };
  var encodeTupleArgs = function (opts) {
      return function (sigs) {
          return function (arr) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Array.zipWith(Data_Argonaut_Generic_Encode["genericUserEncodeJson'"](opts))(sigs)(arr));
          };
      };
  };
  var encodeTuple = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_Generic.SigProd && (v1.value0 === "Data.Tuple.Tuple" && (v2 instanceof Data_Generic.SProd && v2.value0 === "Data.Tuple.Tuple"))) {
                  var spines = Data_Functor.map(Data_Functor.functorArray)(function (v3) {
                      return v3(Data_Unit.unit);
                  })(v2.value1);
                  var signatures = getSigsFromConstructor(v1.value1)("Data.Tuple.Tuple");
                  return Control_Alt.alt(Data_Maybe.altMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Semigroup.append(Data_Semigroup.semigroupArray))(encodeTuple(v)(unsafeHead(signatures))(unsafeHead(spines))))(encodeTupleArgs(v)(unsafeTail(signatures))(unsafeTail(spines))))(encodeTupleArgs(v)(signatures)(spines));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var encodeMaybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_Generic.SigProd && (v1.value0 === "Data.Maybe.Maybe" && (v2 instanceof Data_Generic.SProd && (v2.value0 === "Data.Maybe.Just" && v2.value1.length === 1)))) {
                  var valSig = getSigFromUnaryConstructor(v1.value1)("Data.Maybe.Just");
                  var val = v2["value1"][0](Data_Unit.unit);
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Argonaut_Generic_Encode["genericUserEncodeJson'"](v)(valSig)(val));
              };
              if (v1 instanceof Data_Generic.SigProd && (v1.value0 === "Data.Maybe.Maybe" && (v2 instanceof Data_Generic.SProd && v2.value0 === "Data.Maybe.Nothing"))) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Argonaut_Core.jsonNull);
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var encodeEither = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_Generic.SigProd && (v1.value0 === "Data.Either.Either" && (v2 instanceof Data_Generic.SProd && v2.value1.length === 1))) {
                  var valSig = getSigFromUnaryConstructor(v1.value1)(v2.value0);
                  var val = v2["value1"][0](Data_Unit.unit);
                  var strippedConstr = Data_Argonaut_Generic_Util.stripModulePath(v2.value0);
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Argonaut_Core.fromObject(Data_StrMap.singleton(strippedConstr)(Data_Argonaut_Generic_Encode["genericUserEncodeJson'"](v)(valSig)(val))));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var userEncoding = function (opts) {
      return function (sig) {
          return function (spine) {
              return Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(encodeMaybe(opts)(sig)(spine))(encodeEither(opts)(sig)(spine)))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Argonaut_Core.fromArray)(encodeTuple(opts)(sig)(spine)));
          };
      };
  };
  var decodeMaybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_Generic.SigProd && v1.value0 === "Data.Maybe.Maybe") {
                  var $73 = Data_Argonaut_Core.isNull(v2);
                  if ($73) {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Either.Right.create(new Data_Generic.SProd("Data.Maybe.Nothing", [  ])));
                  };
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)((function () {
                      var valSig = getSigFromUnaryConstructor(v1.value1)("Data.Maybe.Just");
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Generic_Decode["genericUserDecodeJson'"](v)(valSig)(v2))(function (v3) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_Generic.SProd("Data.Maybe.Just", [ function (u) {
                              return v3;
                          } ]));
                      });
                  })());
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var decodeEither = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_Generic.SigProd && v1.value0 === "Data.Either.Either") {
                  var decodeArg = function (name) {
                      return function (obj) {
                          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_StrMap.lookup(name)(obj))(function (v3) {
                              var valSig = getSigFromUnaryConstructor(v1.value1)("Data.Either." + name);
                              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Generic_Decode["genericUserDecodeJson'"](v)(valSig)(v3))(function (v4) {
                                  return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_Generic.SProd("Data.Either." + name, [ function (u) {
                                      return v4;
                                  } ]));
                              }));
                          });
                      };
                  };
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Generic_Decode.mFail("Expected an object when decoding Either")(Data_Argonaut_Core.toObject(v2)))(function (v3) {
                      return Data_Maybe.fromMaybe(new Data_Either.Left("Expected Left or Right record label when decoding Either"))(Control_Alt.alt(Data_Maybe.altMaybe)(decodeArg("Right")(v3))(decodeArg("Left")(v3)));
                  }));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var arrToList = Data_List.fromFoldable(Data_Foldable.foldableArray);
  var decodeTuple = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_Generic.SigProd && v1.value0 === "Data.Tuple.Tuple") {
                  var makeTuple = function (x1) {
                      return function (x2) {
                          return new Data_Generic.SProd("Data.Tuple.Tuple", [ function (v3) {
                              return x1;
                          }, function (v3) {
                              return x2;
                          } ]);
                      };
                  };
                  var makeTuples$prime = function ($copy_inner) {
                      return function ($copy_v3) {
                          var $tco_var_inner = $copy_inner;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(inner, v3) {
                              if (v3 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return inner;
                              };
                              if (v3 instanceof Data_List_Types.Cons) {
                                  $tco_var_inner = makeTuple(inner)(v3.value0);
                                  $copy_v3 = v3.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Argonaut.Generic.Aeson line 147, column 5 - line 147, column 34: " + [ inner.constructor.name, v3.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_inner, $copy_v3);
                          };
                          return $tco_result;
                      };
                  };
                  var makeTuples = function (v3) {
                      if (v3 instanceof Data_List_Types.Cons && v3.value1 instanceof Data_List_Types.Cons) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(makeTuples$prime(makeTuple(v3.value0)(v3.value1.value0))(v3.value1.value1));
                      };
                      return new Data_Either.Left("A tuple needs to have at least two elements");
                  };
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Generic_Decode.mFail("Expected an array of values when decoding Tuple")(Data_Argonaut_Core.toArray(v2)))(function (v3) {
                      var sigs = getNestedTupleSigs(getSigsFromConstructor(v1.value1)("Data.Tuple.Tuple"));
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.sequence(Data_List_Types.traversableList)(Data_Either.applicativeEither)(Data_List.zipWith(Data_Argonaut_Generic_Decode["genericUserDecodeJson'"](v))(sigs)(arrToList(v3))))(function (v4) {
                          return makeTuples(v4);
                      });
                  }));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var userDecoding = function (opts) {
      return function (sig) {
          return function (json) {
              return Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(decodeMaybe(opts)(sig)(json))(decodeEither(opts)(sig)(json)))(decodeTuple(opts)(sig)(json));
          };
      };
  };
  var options = {
      constructorTagModifier: Data_Argonaut_Generic_Util.stripModulePath,
      allNullaryToStringTag: true,
      sumEncoding: sumEncoding,
      flattenContentsArray: true,
      encodeSingleConstructors: false,
      userEncoding: userEncoding,
      userDecoding: userDecoding,
      fieldLabelModifier: Control_Category.id(Control_Category.categoryFn),
      omitNothingFields: false
  };
  var decodeJson = function (dictGeneric) {
      return Data_Argonaut_Generic_Decode.genericDecodeJson(dictGeneric)(options);
  };
  exports["decodeJson"] = decodeJson;
  exports["options"] = options;
  exports["userEncoding"] = userEncoding;
  exports["userDecoding"] = userDecoding;
})(PS["Data.Argonaut.Generic.Aeson"] = PS["Data.Argonaut.Generic.Aeson"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Generic_Aeson = PS["Data.Argonaut.Generic.Aeson"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Operators = PS["Operators"];
  var Prelude = PS["Prelude"];        
  var Variant = function (x) {
      return x;
  };
  var TrapTo = (function () {
      function TrapTo() {

      };
      TrapTo.value = new TrapTo();
      return TrapTo;
  })();
  var TrapFrom = (function () {
      function TrapFrom() {

      };
      TrapFrom.value = new TrapFrom();
      return TrapFrom;
  })();
  var TrapPer = (function () {
      function TrapPer() {

      };
      TrapPer.value = new TrapPer();
      return TrapPer;
  })();
  var Self = (function () {
      function Self() {

      };
      Self.value = new Self();
      return Self;
  })();
  var Ally = (function () {
      function Ally() {

      };
      Ally.value = new Ally();
      return Ally;
  })();
  var Allies = (function () {
      function Allies() {

      };
      Allies.value = new Allies();
      return Allies;
  })();
  var RAlly = (function () {
      function RAlly() {

      };
      RAlly.value = new RAlly();
      return RAlly;
  })();
  var XAlly = (function () {
      function XAlly() {

      };
      XAlly.value = new XAlly();
      return XAlly;
  })();
  var XAllies = (function () {
      function XAllies() {

      };
      XAllies.value = new XAllies();
      return XAllies;
  })();
  var Enemy = (function () {
      function Enemy() {

      };
      Enemy.value = new Enemy();
      return Enemy;
  })();
  var Enemies = (function () {
      function Enemies() {

      };
      Enemies.value = new Enemies();
      return Enemies;
  })();
  var REnemy = (function () {
      function REnemy() {

      };
      REnemy.value = new REnemy();
      return REnemy;
  })();
  var XEnemies = (function () {
      function XEnemies() {

      };
      XEnemies.value = new XEnemies();
      return XEnemies;
  })();
  var Everyone = (function () {
      function Everyone() {

      };
      Everyone.value = new Everyone();
      return Everyone;
  })();
  var Specific = (function () {
      function Specific(value0) {
          this.value0 = value0;
      };
      Specific.create = function (value0) {
          return new Specific(value0);
      };
      return Specific;
  })();
  var Usable = (function () {
      function Usable() {

      };
      Usable.value = new Usable();
      return Usable;
  })();
  var Unusable = (function () {
      function Unusable() {

      };
      Unusable.value = new Unusable();
      return Unusable;
  })();
  var HasI = (function () {
      function HasI(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      HasI.create = function (value0) {
          return function (value1) {
              return new HasI(value0, value1);
          };
      };
      return HasI;
  })();
  var HasU = (function () {
      function HasU(value0) {
          this.value0 = value0;
      };
      HasU.create = function (value0) {
          return new HasU(value0);
      };
      return HasU;
  })();
  var Normal = (function () {
      function Normal() {

      };
      Normal.value = new Normal();
      return Normal;
  })();
  var Moderator = (function () {
      function Moderator() {

      };
      Moderator.value = new Moderator();
      return Moderator;
  })();
  var Admin = (function () {
      function Admin() {

      };
      Admin.value = new Admin();
      return Admin;
  })();
  var User = function (x) {
      return x;
  };
  var Face = function (x) {
      return x;
  };
  var Effect = function (x) {
      return x;
  };
  var Defense = function (x) {
      return x;
  };
  var Shallow = (function () {
      function Shallow(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Shallow.create = function (value0) {
          return function (value1) {
              return new Shallow(value0, value1);
          };
      };
      return Shallow;
  })();
  var Deep = (function () {
      function Deep(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Deep.create = function (value0) {
          return function (value1) {
              return new Deep(value0, value1);
          };
      };
      return Deep;
  })();
  var NotCopied = (function () {
      function NotCopied() {

      };
      NotCopied.value = new NotCopied();
      return NotCopied;
  })();
  var Trap = function (x) {
      return x;
  };
  var Instant = (function () {
      function Instant() {

      };
      Instant.value = new Instant();
      return Instant;
  })();
  var Passive = (function () {
      function Passive() {

      };
      Passive.value = new Passive();
      return Passive;
  })();
  var Action = (function () {
      function Action(value0) {
          this.value0 = value0;
      };
      Action.create = function (value0) {
          return new Action(value0);
      };
      return Action;
  })();
  var Control = (function () {
      function Control(value0) {
          this.value0 = value0;
      };
      Control.create = function (value0) {
          return new Control(value0);
      };
      return Control;
  })();
  var Ongoing = (function () {
      function Ongoing(value0) {
          this.value0 = value0;
      };
      Ongoing.create = function (value0) {
          return new Ongoing(value0);
      };
      return Ongoing;
  })();
  var Chakras = function (x) {
      return x;
  };
  var Skill = function (x) {
      return x;
  };
  var Channel = function (x) {
      return x;
  };
  var ChannelTag = function (x) {
      return x;
  };
  var Character = function (x) {
      return x;
  };
  var Copied = function (x) {
      return x;
  };
  var Done = (function () {
      function Done() {

      };
      Done.value = new Done();
      return Done;
  })();
  var Expire = (function () {
      function Expire() {

      };
      Expire.value = new Expire();
      return Expire;
  })();
  var Remove = (function () {
      function Remove() {

      };
      Remove.value = new Remove();
      return Remove;
  })();
  var Status = function (x) {
      return x;
  };
  var Barrier = function (x) {
      return x;
  };
  var Ninja = function (x) {
      return x;
  };
  var Game = function (x) {
      return x;
  };
  var GameInfo = function (x) {
      return x;
  };
  var Act = function (x) {
      return x;
  };
  var χØ = {
      blood: 0,
      gen: 0,
      nin: 0,
      tai: 0,
      rand: 0
  };
  var label_ = function (v) {
      return v.label;
  };
  var genericVariant = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Variant" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Variant))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 4) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (variantDur1) {
                      return function (variantL1) {
                          return function (variantV1) {
                              return function (variantVCD1) {
                                  return {
                                      variantDur: variantDur1,
                                      variantL: variantL1,
                                      variantV: variantV1,
                                      variantVCD: variantVCD1
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][0].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)(r["value0"][1].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][2].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericBool)(r["value0"][3].recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Variant", [ {
          sigConstructor: "Structure.Variant",
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "variantDur",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "variantL",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "variantV",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "variantVCD",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Structure.Variant", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "variantDur",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.variantDur);
              }
          }, {
              recLabel: "variantL",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.variantL);
              }
          }, {
              recLabel: "variantV",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.variantV);
              }
          }, {
              recLabel: "variantVCD",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.variantVCD);
              }
          } ]);
      } ]);
  });
  var genericTrapType = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.TrapTo" && v.value1.length === 0)) {
          return new Data_Maybe.Just(TrapTo.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.TrapFrom" && v.value1.length === 0)) {
          return new Data_Maybe.Just(TrapFrom.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.TrapPer" && v.value1.length === 0)) {
          return new Data_Maybe.Just(TrapPer.value);
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.TrapType", [ {
          sigConstructor: "Structure.TrapTo",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.TrapFrom",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.TrapPer",
          sigValues: [  ]
      } ]);
  }, function (v) {
      if (v instanceof TrapTo) {
          return new Data_Generic.SProd("Structure.TrapTo", [  ]);
      };
      if (v instanceof TrapFrom) {
          return new Data_Generic.SProd("Structure.TrapFrom", [  ]);
      };
      if (v instanceof TrapPer) {
          return new Data_Generic.SProd("Structure.TrapPer", [  ]);
      };
      throw new Error("Failed pattern match at Structure line 226, column 8 - line 226, column 51: " + [ v.constructor.name ]);
  });
  var genericTrap = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Trap" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Trap))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 8) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (trapClasses1) {
                      return function (trapDesc1) {
                          return function (trapDur1) {
                              return function (trapL1) {
                                  return function (trapSrc1) {
                                      return function (trapTrack1) {
                                          return function (trapTrigger1) {
                                              return function (trapType1) {
                                                  return {
                                                      trapClasses: trapClasses1,
                                                      trapDesc: trapDesc1,
                                                      trapDur: trapDur1,
                                                      trapL: trapL1,
                                                      trapSrc: trapSrc1,
                                                      trapTrack: trapTrack1,
                                                      trapTrigger: trapTrigger1,
                                                      trapType: trapType1
                                                  };
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericArray(Data_Generic.genericString))(r["value0"][0].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)(r["value0"][1].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][2].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)(r["value0"][3].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][4].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][5].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)(r["value0"][6].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(genericTrapType)(r["value0"][7].recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Trap", [ {
          sigConstructor: "Structure.Trap",
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "trapClasses",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(Data_Generic.genericString))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "trapDesc",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "trapDur",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "trapL",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "trapSrc",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "trapTrack",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "trapTrigger",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "trapType",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(genericTrapType)(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Structure.Trap", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "trapClasses",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(Data_Generic.genericString))(v.trapClasses);
              }
          }, {
              recLabel: "trapDesc",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.trapDesc);
              }
          }, {
              recLabel: "trapDur",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.trapDur);
              }
          }, {
              recLabel: "trapL",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.trapL);
              }
          }, {
              recLabel: "trapSrc",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.trapSrc);
              }
          }, {
              recLabel: "trapTrack",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.trapTrack);
              }
          }, {
              recLabel: "trapTrigger",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.trapTrigger);
              }
          }, {
              recLabel: "trapType",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(genericTrapType)(v.trapType);
              }
          } ]);
      } ]);
  });
  var genericTarget = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Self" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Self.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Ally" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Ally.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Allies" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Allies.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.RAlly" && v.value1.length === 0)) {
          return new Data_Maybe.Just(RAlly.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.XAlly" && v.value1.length === 0)) {
          return new Data_Maybe.Just(XAlly.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.XAllies" && v.value1.length === 0)) {
          return new Data_Maybe.Just(XAllies.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Enemy" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Enemy.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Enemies" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Enemies.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.REnemy" && v.value1.length === 0)) {
          return new Data_Maybe.Just(REnemy.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.XEnemies" && v.value1.length === 0)) {
          return new Data_Maybe.Just(XEnemies.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Everyone" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Everyone.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Specific" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Specific.create))(Data_Generic.fromSpine(Data_Generic.genericInt)(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Target", [ {
          sigConstructor: "Structure.Self",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.Ally",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.Allies",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.RAlly",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.XAlly",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.XAllies",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.Enemy",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.Enemies",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.REnemy",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.XEnemies",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.Everyone",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.Specific",
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      if (v instanceof Self) {
          return new Data_Generic.SProd("Structure.Self", [  ]);
      };
      if (v instanceof Ally) {
          return new Data_Generic.SProd("Structure.Ally", [  ]);
      };
      if (v instanceof Allies) {
          return new Data_Generic.SProd("Structure.Allies", [  ]);
      };
      if (v instanceof RAlly) {
          return new Data_Generic.SProd("Structure.RAlly", [  ]);
      };
      if (v instanceof XAlly) {
          return new Data_Generic.SProd("Structure.XAlly", [  ]);
      };
      if (v instanceof XAllies) {
          return new Data_Generic.SProd("Structure.XAllies", [  ]);
      };
      if (v instanceof Enemy) {
          return new Data_Generic.SProd("Structure.Enemy", [  ]);
      };
      if (v instanceof Enemies) {
          return new Data_Generic.SProd("Structure.Enemies", [  ]);
      };
      if (v instanceof REnemy) {
          return new Data_Generic.SProd("Structure.REnemy", [  ]);
      };
      if (v instanceof XEnemies) {
          return new Data_Generic.SProd("Structure.XEnemies", [  ]);
      };
      if (v instanceof Everyone) {
          return new Data_Generic.SProd("Structure.Everyone", [  ]);
      };
      if (v instanceof Specific) {
          return new Data_Generic.SProd("Structure.Specific", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0);
          } ]);
      };
      throw new Error("Failed pattern match at Structure line 211, column 8 - line 211, column 47: " + [ v.constructor.name ]);
  });
  var genericRequirement = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Usable" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Usable.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Unusable" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Unusable.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.HasI" && v.value1.length === 2)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(HasI.create))(Data_Generic.fromSpine(Data_Generic.genericInt)(v["value1"][0](Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)(v["value1"][1](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.HasU" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(HasU.create))(Data_Generic.fromSpine(Data_Generic.genericString)(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Requirement", [ {
          sigConstructor: "Structure.Usable",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.Unusable",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.HasI",
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "Structure.HasU",
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      if (v instanceof Usable) {
          return new Data_Generic.SProd("Structure.Usable", [  ]);
      };
      if (v instanceof Unusable) {
          return new Data_Generic.SProd("Structure.Unusable", [  ]);
      };
      if (v instanceof HasI) {
          return new Data_Generic.SProd("Structure.HasI", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0);
          }, function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericString)(v.value1);
          } ]);
      };
      if (v instanceof HasU) {
          return new Data_Generic.SProd("Structure.HasU", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericString)(v.value0);
          } ]);
      };
      throw new Error("Failed pattern match at Structure line 162, column 8 - line 162, column 57: " + [ v.constructor.name ]);
  });
  var genericPrivilege = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Normal" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Normal.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Moderator" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Moderator.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Admin" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Admin.value);
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Privilege", [ {
          sigConstructor: "Structure.Normal",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.Moderator",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.Admin",
          sigValues: [  ]
      } ]);
  }, function (v) {
      if (v instanceof Normal) {
          return new Data_Generic.SProd("Structure.Normal", [  ]);
      };
      if (v instanceof Moderator) {
          return new Data_Generic.SProd("Structure.Moderator", [  ]);
      };
      if (v instanceof Admin) {
          return new Data_Generic.SProd("Structure.Admin", [  ]);
      };
      throw new Error("Failed pattern match at Structure line 229, column 8 - line 229, column 53: " + [ v.constructor.name ]);
  });
  var genericUser = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.User" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(User))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 9) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (avatar1) {
                      return function (background1) {
                          return function (clan1) {
                              return function (losses1) {
                                  return function (name1) {
                                      return function (privilege1) {
                                          return function (streak1) {
                                              return function (wins1) {
                                                  return function (xp1) {
                                                      return {
                                                          avatar: avatar1,
                                                          background: background1,
                                                          clan: clan1,
                                                          losses: losses1,
                                                          name: name1,
                                                          privilege: privilege1,
                                                          streak: streak1,
                                                          wins: wins1,
                                                          xp: xp1
                                                      };
                                                  };
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericString)(r["value0"][0].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericMaybe(Data_Generic.genericString))(r["value0"][1].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericMaybe(Data_Generic.genericString))(r["value0"][2].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][3].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)(r["value0"][4].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(genericPrivilege)(r["value0"][5].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][6].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][7].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][8].recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.User", [ {
          sigConstructor: "Structure.User",
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "avatar",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "background",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericMaybe(Data_Generic.genericString))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "clan",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericMaybe(Data_Generic.genericString))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "losses",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "name",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "privilege",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(genericPrivilege)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "streak",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "wins",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "xp",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Structure.User", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "avatar",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.avatar);
              }
          }, {
              recLabel: "background",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericMaybe(Data_Generic.genericString))(v.background);
              }
          }, {
              recLabel: "clan",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericMaybe(Data_Generic.genericString))(v.clan);
              }
          }, {
              recLabel: "losses",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.losses);
              }
          }, {
              recLabel: "name",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.name);
              }
          }, {
              recLabel: "privilege",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(genericPrivilege)(v.privilege);
              }
          }, {
              recLabel: "streak",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.streak);
              }
          }, {
              recLabel: "wins",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.wins);
              }
          }, {
              recLabel: "xp",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.xp);
              }
          } ]);
      } ]);
  });
  var genericFace = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Face" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Face))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 3) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (faceDur1) {
                      return function (faceIcon1) {
                          return function (faceSrc1) {
                              return {
                                  faceDur: faceDur1,
                                  faceIcon: faceIcon1,
                                  faceSrc: faceSrc1
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][0].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)(r["value0"][1].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][2].recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Face", [ {
          sigConstructor: "Structure.Face",
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "faceDur",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "faceIcon",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "faceSrc",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Structure.Face", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "faceDur",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.faceDur);
              }
          }, {
              recLabel: "faceIcon",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.faceIcon);
              }
          }, {
              recLabel: "faceSrc",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.faceSrc);
              }
          } ]);
      } ]);
  });
  var genericEffect = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Effect" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Effect))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 4) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (effectDesc1) {
                      return function (effectHelpful1) {
                          return function (effectSticky1) {
                              return function (effectTrap1) {
                                  return {
                                      effectDesc: effectDesc1,
                                      effectHelpful: effectHelpful1,
                                      effectSticky: effectSticky1,
                                      effectTrap: effectTrap1
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericString)(r["value0"][0].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericBool)(r["value0"][1].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericBool)(r["value0"][2].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericBool)(r["value0"][3].recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Effect", [ {
          sigConstructor: "Structure.Effect",
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "effectDesc",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "effectHelpful",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "effectSticky",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "effectTrap",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Structure.Effect", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "effectDesc",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.effectDesc);
              }
          }, {
              recLabel: "effectHelpful",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.effectHelpful);
              }
          }, {
              recLabel: "effectSticky",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.effectSticky);
              }
          }, {
              recLabel: "effectTrap",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.effectTrap);
              }
          } ]);
      } ]);
  });
  var genericDefense = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Defense" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Defense))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 4) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (defenseAmount1) {
                      return function (defenseDur1) {
                          return function (defenseL1) {
                              return function (defenseSrc1) {
                                  return {
                                      defenseAmount: defenseAmount1,
                                      defenseDur: defenseDur1,
                                      defenseL: defenseL1,
                                      defenseSrc: defenseSrc1
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][0].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][1].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)(r["value0"][2].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][3].recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Defense", [ {
          sigConstructor: "Structure.Defense",
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "defenseAmount",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "defenseDur",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "defenseL",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "defenseSrc",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Structure.Defense", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "defenseAmount",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.defenseAmount);
              }
          }, {
              recLabel: "defenseDur",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.defenseDur);
              }
          }, {
              recLabel: "defenseL",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.defenseL);
              }
          }, {
              recLabel: "defenseSrc",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.defenseSrc);
              }
          } ]);
      } ]);
  });
  var genericCopying = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Shallow" && v.value1.length === 2)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Shallow.create))(Data_Generic.fromSpine(Data_Generic.genericInt)(v["value1"][0](Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(v["value1"][1](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Deep" && v.value1.length === 2)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Deep.create))(Data_Generic.fromSpine(Data_Generic.genericInt)(v["value1"][0](Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(v["value1"][1](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.NotCopied" && v.value1.length === 0)) {
          return new Data_Maybe.Just(NotCopied.value);
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Copying", [ {
          sigConstructor: "Structure.Shallow",
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "Structure.Deep",
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "Structure.NotCopied",
          sigValues: [  ]
      } ]);
  }, function (v) {
      if (v instanceof Shallow) {
          return new Data_Generic.SProd("Structure.Shallow", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0);
          }, function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericInt)(v.value1);
          } ]);
      };
      if (v instanceof Deep) {
          return new Data_Generic.SProd("Structure.Deep", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0);
          }, function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericInt)(v.value1);
          } ]);
      };
      if (v instanceof NotCopied) {
          return new Data_Generic.SProd("Structure.NotCopied", [  ]);
      };
      throw new Error("Failed pattern match at Structure line 96, column 8 - line 96, column 49: " + [ v.constructor.name ]);
  });
  var genericChanneling = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Instant" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Instant.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Passive" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Passive.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Action" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Action.create))(Data_Generic.fromSpine(Data_Generic.genericInt)(v["value1"][0](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Control" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Control.create))(Data_Generic.fromSpine(Data_Generic.genericInt)(v["value1"][0](Data_Unit.unit)));
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Ongoing" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Ongoing.create))(Data_Generic.fromSpine(Data_Generic.genericInt)(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Channeling", [ {
          sigConstructor: "Structure.Instant",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.Passive",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.Action",
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "Structure.Control",
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "Structure.Ongoing",
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      if (v instanceof Instant) {
          return new Data_Generic.SProd("Structure.Instant", [  ]);
      };
      if (v instanceof Passive) {
          return new Data_Generic.SProd("Structure.Passive", [  ]);
      };
      if (v instanceof Action) {
          return new Data_Generic.SProd("Structure.Action", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0);
          } ]);
      };
      if (v instanceof Control) {
          return new Data_Generic.SProd("Structure.Control", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0);
          } ]);
      };
      if (v instanceof Ongoing) {
          return new Data_Generic.SProd("Structure.Ongoing", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericInt)(v.value0);
          } ]);
      };
      throw new Error("Failed pattern match at Structure line 63, column 8 - line 63, column 55: " + [ v.constructor.name ]);
  });
  var genericChakras = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Chakras" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Chakras))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 5) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (blood1) {
                      return function (gen1) {
                          return function (nin1) {
                              return function (rand1) {
                                  return function (tai1) {
                                      return {
                                          blood: blood1,
                                          gen: gen1,
                                          nin: nin1,
                                          rand: rand1,
                                          tai: tai1
                                      };
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][0].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][1].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][2].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][3].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][4].recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Chakras", [ {
          sigConstructor: "Structure.Chakras",
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "blood",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "gen",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "nin",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "rand",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "tai",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Structure.Chakras", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "blood",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.blood);
              }
          }, {
              recLabel: "gen",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.gen);
              }
          }, {
              recLabel: "nin",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.nin);
              }
          }, {
              recLabel: "rand",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.rand);
              }
          }, {
              recLabel: "tai",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.tai);
              }
          } ]);
      } ]);
  });
  var genericSkill = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Skill" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Skill))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 14) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (cd1) {
                      return function (channel1) {
                          return function (charges1) {
                              return function (classes1) {
                                  return function (copying1) {
                                      return function (cost1) {
                                          return function (desc1) {
                                              return function (disrupt1) {
                                                  return function (effects1) {
                                                      return function (label1) {
                                                          return function (require1) {
                                                              return function (skPic1) {
                                                                  return function (start1) {
                                                                      return function (varicd1) {
                                                                          return {
                                                                              cd: cd1,
                                                                              channel: channel1,
                                                                              charges: charges1,
                                                                              classes: classes1,
                                                                              copying: copying1,
                                                                              cost: cost1,
                                                                              desc: desc1,
                                                                              disrupt: disrupt1,
                                                                              effects: effects1,
                                                                              label: label1,
                                                                              require: require1,
                                                                              skPic: skPic1,
                                                                              start: start1,
                                                                              varicd: varicd1
                                                                          };
                                                                      };
                                                                  };
                                                              };
                                                          };
                                                      };
                                                  };
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][0].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(genericChanneling)(r["value0"][1].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][2].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(Data_Generic.genericString))(r["value0"][3].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(genericCopying)(r["value0"][4].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(genericChakras)(r["value0"][5].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)(r["value0"][6].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(Data_Generic.genericTuple(genericTarget)(Data_Generic.genericMaybe(genericTarget))))(r["value0"][7].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(Data_Generic.genericTuple(genericTarget)(Data_Generic.genericMaybe(genericTarget))))(r["value0"][8].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)(r["value0"][9].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(genericRequirement)(r["value0"][10].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericBool)(r["value0"][11].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(Data_Generic.genericTuple(genericTarget)(Data_Generic.genericMaybe(genericTarget))))(r["value0"][12].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericBool)(r["value0"][13].recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Skill", [ {
          sigConstructor: "Structure.Skill",
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "cd",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "channel",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(genericChanneling)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "charges",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "classes",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(Data_Generic.genericString))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "copying",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(genericCopying)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "cost",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(genericChakras)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "desc",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "disrupt",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(Data_Generic.genericTuple(genericTarget)(Data_Generic.genericMaybe(genericTarget))))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "effects",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(Data_Generic.genericTuple(genericTarget)(Data_Generic.genericMaybe(genericTarget))))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "label",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "require",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(genericRequirement)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "skPic",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "start",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(Data_Generic.genericTuple(genericTarget)(Data_Generic.genericMaybe(genericTarget))))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "varicd",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Structure.Skill", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "cd",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.cd);
              }
          }, {
              recLabel: "channel",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(genericChanneling)(v.channel);
              }
          }, {
              recLabel: "charges",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.charges);
              }
          }, {
              recLabel: "classes",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(Data_Generic.genericString))(v.classes);
              }
          }, {
              recLabel: "copying",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(genericCopying)(v.copying);
              }
          }, {
              recLabel: "cost",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(genericChakras)(v.cost);
              }
          }, {
              recLabel: "desc",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.desc);
              }
          }, {
              recLabel: "disrupt",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(Data_Generic.genericTuple(genericTarget)(Data_Generic.genericMaybe(genericTarget))))(v.disrupt);
              }
          }, {
              recLabel: "effects",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(Data_Generic.genericTuple(genericTarget)(Data_Generic.genericMaybe(genericTarget))))(v.effects);
              }
          }, {
              recLabel: "label",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.label);
              }
          }, {
              recLabel: "require",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(genericRequirement)(v.require);
              }
          }, {
              recLabel: "skPic",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.skPic);
              }
          }, {
              recLabel: "start",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(Data_Generic.genericTuple(genericTarget)(Data_Generic.genericMaybe(genericTarget))))(v.start);
              }
          }, {
              recLabel: "varicd",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.varicd);
              }
          } ]);
      } ]);
  });
  var genericChannel = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Channel" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Channel))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 4) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (channelDur1) {
                      return function (channelRoot1) {
                          return function (channelSkill1) {
                              return function (channelT1) {
                                  return {
                                      channelDur: channelDur1,
                                      channelRoot: channelRoot1,
                                      channelSkill: channelSkill1,
                                      channelT: channelT1
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(genericChanneling)(r["value0"][0].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][1].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(genericSkill)(r["value0"][2].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][3].recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Channel", [ {
          sigConstructor: "Structure.Channel",
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "channelDur",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(genericChanneling)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "channelRoot",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "channelSkill",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(genericSkill)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "channelT",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Structure.Channel", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "channelDur",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(genericChanneling)(v.channelDur);
              }
          }, {
              recLabel: "channelRoot",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.channelRoot);
              }
          }, {
              recLabel: "channelSkill",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(genericSkill)(v.channelSkill);
              }
          }, {
              recLabel: "channelT",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.channelT);
              }
          } ]);
      } ]);
  });
  var genericChannelTag = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.ChannelTag" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(ChannelTag))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 5) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (tagDur1) {
                      return function (tagGhost1) {
                          return function (tagRoot1) {
                              return function (tagSkill1) {
                                  return function (tagSrc1) {
                                      return {
                                          tagDur: tagDur1,
                                          tagGhost: tagGhost1,
                                          tagRoot: tagRoot1,
                                          tagSkill: tagSkill1,
                                          tagSrc: tagSrc1
                                      };
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][0].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericBool)(r["value0"][1].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][2].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(genericSkill)(r["value0"][3].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][4].recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.ChannelTag", [ {
          sigConstructor: "Structure.ChannelTag",
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "tagDur",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "tagGhost",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericBool)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "tagRoot",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "tagSkill",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(genericSkill)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "tagSrc",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Structure.ChannelTag", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "tagDur",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.tagDur);
              }
          }, {
              recLabel: "tagGhost",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericBool)(v.tagGhost);
              }
          }, {
              recLabel: "tagRoot",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.tagRoot);
              }
          }, {
              recLabel: "tagSkill",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(genericSkill)(v.tagSkill);
              }
          }, {
              recLabel: "tagSrc",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.tagSrc);
              }
          } ]);
      } ]);
  });
  var genericCharacter = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Character" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Character))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 3) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (characterBio1) {
                      return function (characterName1) {
                          return function (characterSkills1) {
                              return {
                                  characterBio: characterBio1,
                                  characterName: characterName1,
                                  characterSkills: characterSkills1
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericString)(r["value0"][0].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)(r["value0"][1].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(Data_Generic.genericArray(genericSkill)))(r["value0"][2].recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Character", [ {
          sigConstructor: "Structure.Character",
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "characterBio",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "characterName",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "characterSkills",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(Data_Generic.genericArray(genericSkill)))(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Structure.Character", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "characterBio",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.characterBio);
              }
          }, {
              recLabel: "characterName",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.characterName);
              }
          }, {
              recLabel: "characterSkills",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(Data_Generic.genericArray(genericSkill)))(v.characterSkills);
              }
          } ]);
      } ]);
  });
  var genericCopied = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Copied" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Copied))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 2) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (copiedDur1) {
                      return function (copiedSkill1) {
                          return {
                              copiedDur: copiedDur1,
                              copiedSkill: copiedSkill1
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][0].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(genericSkill)(r["value0"][1].recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Copied", [ {
          sigConstructor: "Structure.Copied",
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "copiedDur",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "copiedSkill",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(genericSkill)(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Structure.Copied", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "copiedDur",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.copiedDur);
              }
          }, {
              recLabel: "copiedSkill",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(genericSkill)(v.copiedSkill);
              }
          } ]);
      } ]);
  });
  var genericBomb = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Done" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Done.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Expire" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Expire.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Remove" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Remove.value);
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Bomb", [ {
          sigConstructor: "Structure.Done",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.Expire",
          sigValues: [  ]
      }, {
          sigConstructor: "Structure.Remove",
          sigValues: [  ]
      } ]);
  }, function (v) {
      if (v instanceof Done) {
          return new Data_Generic.SProd("Structure.Done", [  ]);
      };
      if (v instanceof Expire) {
          return new Data_Generic.SProd("Structure.Expire", [  ]);
      };
      if (v instanceof Remove) {
          return new Data_Generic.SProd("Structure.Remove", [  ]);
      };
      throw new Error("Failed pattern match at Structure line 37, column 8 - line 37, column 43: " + [ v.constructor.name ]);
  });
  var genericStatus = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Status" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Status))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 10) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (statusBombs1) {
                      return function (statusC1) {
                          return function (statusClasses1) {
                              return function (statusDur1) {
                                  return function (statusEfs1) {
                                      return function (statusL1) {
                                          return function (statusMaxDur1) {
                                              return function (statusRoot1) {
                                                  return function (statusSkill1) {
                                                      return function (statusSrc1) {
                                                          return {
                                                              statusBombs: statusBombs1,
                                                              statusC: statusC1,
                                                              statusClasses: statusClasses1,
                                                              statusDur: statusDur1,
                                                              statusEfs: statusEfs1,
                                                              statusL: statusL1,
                                                              statusMaxDur: statusMaxDur1,
                                                              statusRoot: statusRoot1,
                                                              statusSkill: statusSkill1,
                                                              statusSrc: statusSrc1
                                                          };
                                                      };
                                                  };
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericArray(Data_Generic.genericTuple(genericBomb)(Data_Generic.genericMaybe(genericBomb))))(r["value0"][0].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][1].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(Data_Generic.genericString))(r["value0"][2].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][3].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(genericEffect))(r["value0"][4].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)(r["value0"][5].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][6].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][7].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(genericSkill)(r["value0"][8].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][9].recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Status", [ {
          sigConstructor: "Structure.Status",
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "statusBombs",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(Data_Generic.genericTuple(genericBomb)(Data_Generic.genericMaybe(genericBomb))))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "statusC",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "statusClasses",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(Data_Generic.genericString))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "statusDur",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "statusEfs",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(genericEffect))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "statusL",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "statusMaxDur",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "statusRoot",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "statusSkill",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(genericSkill)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "statusSrc",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Structure.Status", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "statusBombs",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(Data_Generic.genericTuple(genericBomb)(Data_Generic.genericMaybe(genericBomb))))(v.statusBombs);
              }
          }, {
              recLabel: "statusC",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.statusC);
              }
          }, {
              recLabel: "statusClasses",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(Data_Generic.genericString))(v.statusClasses);
              }
          }, {
              recLabel: "statusDur",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.statusDur);
              }
          }, {
              recLabel: "statusEfs",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(genericEffect))(v.statusEfs);
              }
          }, {
              recLabel: "statusL",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.statusL);
              }
          }, {
              recLabel: "statusMaxDur",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.statusMaxDur);
              }
          }, {
              recLabel: "statusRoot",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.statusRoot);
              }
          }, {
              recLabel: "statusSkill",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(genericSkill)(v.statusSkill);
              }
          }, {
              recLabel: "statusSrc",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.statusSrc);
              }
          } ]);
      } ]);
  });
  var genericBarrier = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Barrier" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Barrier))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 4) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (barrierAmount1) {
                      return function (barrierDur1) {
                          return function (barrierL1) {
                              return function (barrierSrc1) {
                                  return {
                                      barrierAmount: barrierAmount1,
                                      barrierDur: barrierDur1,
                                      barrierL: barrierL1,
                                      barrierSrc: barrierSrc1
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][0].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][1].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)(r["value0"][2].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][3].recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Barrier", [ {
          sigConstructor: "Structure.Barrier",
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "barrierAmount",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "barrierDur",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "barrierL",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "barrierSrc",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Structure.Barrier", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "barrierAmount",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.barrierAmount);
              }
          }, {
              recLabel: "barrierDur",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.barrierDur);
              }
          }, {
              recLabel: "barrierL",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.barrierL);
              }
          }, {
              recLabel: "barrierSrc",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.barrierSrc);
              }
          } ]);
      } ]);
  });
  var genericNinja = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Ninja" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Ninja))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 16) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (nBarrier1) {
                      return function (nChannels1) {
                          return function (nCharges1) {
                              return function (nCooldowns1) {
                                  return function (nCopied1) {
                                      return function (nDefense1) {
                                          return function (nFace1) {
                                              return function (nHealth1) {
                                                  return function (nId1) {
                                                      return function (nName1) {
                                                          return function (nParrying1) {
                                                              return function (nSkills1) {
                                                                  return function (nStatuses1) {
                                                                      return function (nTags1) {
                                                                          return function (nTraps1) {
                                                                              return function (nVariants1) {
                                                                                  return {
                                                                                      nBarrier: nBarrier1,
                                                                                      nChannels: nChannels1,
                                                                                      nCharges: nCharges1,
                                                                                      nCooldowns: nCooldowns1,
                                                                                      nCopied: nCopied1,
                                                                                      nDefense: nDefense1,
                                                                                      nFace: nFace1,
                                                                                      nHealth: nHealth1,
                                                                                      nId: nId1,
                                                                                      nName: nName1,
                                                                                      nParrying: nParrying1,
                                                                                      nSkills: nSkills1,
                                                                                      nStatuses: nStatuses1,
                                                                                      nTags: nTags1,
                                                                                      nTraps: nTraps1,
                                                                                      nVariants: nVariants1
                                                                                  };
                                                                              };
                                                                          };
                                                                      };
                                                                  };
                                                              };
                                                          };
                                                      };
                                                  };
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericArray(genericBarrier))(r["value0"][0].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(genericChannel))(r["value0"][1].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(Data_Generic.genericInt))(r["value0"][2].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(Data_Generic.genericInt))(r["value0"][3].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(Data_Generic.genericMaybe(genericCopied)))(r["value0"][4].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(genericDefense))(r["value0"][5].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(genericFace))(r["value0"][6].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][7].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][8].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericString)(r["value0"][9].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(genericSkill))(r["value0"][10].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(genericSkill))(r["value0"][11].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(genericStatus))(r["value0"][12].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(genericChannelTag))(r["value0"][13].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(genericTrap))(r["value0"][14].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(Data_Generic.genericArray(genericVariant)))(r["value0"][15].recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Ninja", [ {
          sigConstructor: "Structure.Ninja",
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "nBarrier",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(genericBarrier))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "nChannels",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(genericChannel))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "nCharges",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(Data_Generic.genericInt))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "nCooldowns",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(Data_Generic.genericInt))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "nCopied",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(Data_Generic.genericMaybe(genericCopied)))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "nDefense",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(genericDefense))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "nFace",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(genericFace))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "nHealth",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "nId",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "nName",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "nParrying",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(genericSkill))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "nSkills",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(genericSkill))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "nStatuses",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(genericStatus))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "nTags",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(genericChannelTag))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "nTraps",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(genericTrap))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "nVariants",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(Data_Generic.genericArray(genericVariant)))(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Structure.Ninja", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "nBarrier",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(genericBarrier))(v.nBarrier);
              }
          }, {
              recLabel: "nChannels",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(genericChannel))(v.nChannels);
              }
          }, {
              recLabel: "nCharges",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(Data_Generic.genericInt))(v.nCharges);
              }
          }, {
              recLabel: "nCooldowns",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(Data_Generic.genericInt))(v.nCooldowns);
              }
          }, {
              recLabel: "nCopied",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(Data_Generic.genericMaybe(genericCopied)))(v.nCopied);
              }
          }, {
              recLabel: "nDefense",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(genericDefense))(v.nDefense);
              }
          }, {
              recLabel: "nFace",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(genericFace))(v.nFace);
              }
          }, {
              recLabel: "nHealth",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.nHealth);
              }
          }, {
              recLabel: "nId",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.nId);
              }
          }, {
              recLabel: "nName",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericString)(v.nName);
              }
          }, {
              recLabel: "nParrying",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(genericSkill))(v.nParrying);
              }
          }, {
              recLabel: "nSkills",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(genericSkill))(v.nSkills);
              }
          }, {
              recLabel: "nStatuses",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(genericStatus))(v.nStatuses);
              }
          }, {
              recLabel: "nTags",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(genericChannelTag))(v.nTags);
              }
          }, {
              recLabel: "nTraps",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(genericTrap))(v.nTraps);
              }
          }, {
              recLabel: "nVariants",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(Data_Generic.genericArray(genericVariant)))(v.nVariants);
              }
          } ]);
      } ]);
  });
  var genericGame = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.Game" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Game))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 5) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (gameChakra1) {
                      return function (gameNinjas1) {
                          return function (gamePlaying1) {
                              return function (gameTargets1) {
                                  return function (gameVictor1) {
                                      return {
                                          gameChakra: gameChakra1,
                                          gameNinjas: gameNinjas1,
                                          gamePlaying: gamePlaying1,
                                          gameTargets: gameTargets1,
                                          gameVictor: gameVictor1
                                      };
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericArray(genericChakras))(r["value0"][0].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(genericNinja))(r["value0"][1].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][2].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericArray(Data_Generic.genericArray(Data_Generic.genericArray(Data_Generic.genericInt))))(r["value0"][3].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericMaybe(Data_Generic.genericInt))(r["value0"][4].recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.Game", [ {
          sigConstructor: "Structure.Game",
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "gameChakra",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(genericChakras))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "gameNinjas",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(genericNinja))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "gamePlaying",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "gameTargets",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(Data_Generic.genericArray(Data_Generic.genericArray(Data_Generic.genericInt))))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "gameVictor",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericMaybe(Data_Generic.genericInt))(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Structure.Game", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "gameChakra",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(genericChakras))(v.gameChakra);
              }
          }, {
              recLabel: "gameNinjas",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(genericNinja))(v.gameNinjas);
              }
          }, {
              recLabel: "gamePlaying",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.gamePlaying);
              }
          }, {
              recLabel: "gameTargets",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(Data_Generic.genericArray(Data_Generic.genericArray(Data_Generic.genericInt))))(v.gameTargets);
              }
          }, {
              recLabel: "gameVictor",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericMaybe(Data_Generic.genericInt))(v.gameVictor);
              }
          } ]);
      } ]);
  });
  var genericGameInfo = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Structure.GameInfo" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(GameInfo))((function (r) {
              if (r instanceof Data_Generic.SRecord && r.value0.length === 5) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (gameCharacters1) {
                      return function (gameGame1) {
                          return function (gameLeft1) {
                              return function (gamePar1) {
                                  return function (gameVsUser1) {
                                      return {
                                          gameCharacters: gameCharacters1,
                                          gameGame: gameGame1,
                                          gameLeft: gameLeft1,
                                          gamePar: gamePar1,
                                          gameVsUser: gameVsUser1
                                      };
                                  };
                              };
                          };
                      };
                  }))(Data_Generic.fromSpine(Data_Generic.genericArray(genericCharacter))(r["value0"][0].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(genericGame)(r["value0"][1].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][2].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericInt)(r["value0"][3].recValue(Data_Unit.unit))))(Data_Generic.fromSpine(genericUser)(r["value0"][4].recValue(Data_Unit.unit)));
              };
              return Data_Maybe.Nothing.value;
          })(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Structure.GameInfo", [ {
          sigConstructor: "Structure.GameInfo",
          sigValues: [ function ($dollarq1) {
              return new Data_Generic.SigRecord([ {
                  recLabel: "gameCharacters",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericArray(genericCharacter))(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "gameGame",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(genericGame)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "gameLeft",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "gamePar",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
                  }
              }, {
                  recLabel: "gameVsUser",
                  recValue: function ($dollarq2) {
                      return Data_Generic.toSignature(genericUser)(Data_Generic.anyProxy);
                  }
              } ]);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Structure.GameInfo", [ function ($dollarq) {
          return new Data_Generic.SRecord([ {
              recLabel: "gameCharacters",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericArray(genericCharacter))(v.gameCharacters);
              }
          }, {
              recLabel: "gameGame",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(genericGame)(v.gameGame);
              }
          }, {
              recLabel: "gameLeft",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.gameLeft);
              }
          }, {
              recLabel: "gamePar",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(Data_Generic.genericInt)(v.gamePar);
              }
          }, {
              recLabel: "gameVsUser",
              recValue: function ($dollarq1) {
                  return Data_Generic.toSpine(genericUser)(v.gameVsUser);
              }
          } ]);
      } ]);
  });
  var eqTarget = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Self && y instanceof Self) {
              return true;
          };
          if (x instanceof Ally && y instanceof Ally) {
              return true;
          };
          if (x instanceof Allies && y instanceof Allies) {
              return true;
          };
          if (x instanceof RAlly && y instanceof RAlly) {
              return true;
          };
          if (x instanceof XAlly && y instanceof XAlly) {
              return true;
          };
          if (x instanceof XAllies && y instanceof XAllies) {
              return true;
          };
          if (x instanceof Enemy && y instanceof Enemy) {
              return true;
          };
          if (x instanceof Enemies && y instanceof Enemies) {
              return true;
          };
          if (x instanceof REnemy && y instanceof REnemy) {
              return true;
          };
          if (x instanceof XEnemies && y instanceof XEnemies) {
              return true;
          };
          if (x instanceof Everyone && y instanceof Everyone) {
              return true;
          };
          if (x instanceof Specific && y instanceof Specific) {
              return x.value0 === y.value0;
          };
          return false;
      };
  });
  var eqRequirement = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Usable && y instanceof Usable) {
              return true;
          };
          if (x instanceof Unusable && y instanceof Unusable) {
              return true;
          };
          if (x instanceof HasI && y instanceof HasI) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof HasU && y instanceof HasU) {
              return x.value0 === y.value0;
          };
          return false;
      };
  });
  var eqPrivilege = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Normal && y instanceof Normal) {
              return true;
          };
          if (x instanceof Moderator && y instanceof Moderator) {
              return true;
          };
          if (x instanceof Admin && y instanceof Admin) {
              return true;
          };
          return false;
      };
  });
  var eqCharacter = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.characterName === v1.characterName;
      };
  });
  var eqChakras = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x.blood === y.blood && x.gen === y.gen && x.nin === y.nin && x.rand === y.rand && x.tai === y.tai;
      };
  });
  var eqAct = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.actC === v1.actC && (v.actS === v1.actS && v.actT === v1.actT);
      };
  });
  var decodeGames = Data_Argonaut_Generic_Aeson.decodeJson(Data_Generic.genericArray(genericGame));
  var characterName_ = function (v) {
      return v.characterName;
  };
  var channelingDur = function (v) {
      if (v instanceof Instant) {
          return 1;
      };
      if (v instanceof Passive) {
          return 1;
      };
      if (v instanceof Action) {
          return v.value0;
      };
      if (v instanceof Control) {
          return v.value0;
      };
      if (v instanceof Ongoing) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Structure line 65, column 1 - line 65, column 33: " + [ v.constructor.name ]);
  };
  var actCost = function (v) {
      return v.actSkill.cost;
  };
  var actC_ = function (v) {
      return v.actC;
  };
  exports["Act"] = Act;
  exports["actC_"] = actC_;
  exports["actCost"] = actCost;
  exports["Barrier"] = Barrier;
  exports["Done"] = Done;
  exports["Expire"] = Expire;
  exports["Remove"] = Remove;
  exports["Chakras"] = Chakras;
  exports["χØ"] = χØ;
  exports["Channel"] = Channel;
  exports["Instant"] = Instant;
  exports["Passive"] = Passive;
  exports["Action"] = Action;
  exports["Control"] = Control;
  exports["Ongoing"] = Ongoing;
  exports["channelingDur"] = channelingDur;
  exports["ChannelTag"] = ChannelTag;
  exports["Character"] = Character;
  exports["characterName_"] = characterName_;
  exports["Copied"] = Copied;
  exports["Shallow"] = Shallow;
  exports["Deep"] = Deep;
  exports["NotCopied"] = NotCopied;
  exports["Defense"] = Defense;
  exports["Effect"] = Effect;
  exports["Face"] = Face;
  exports["Game"] = Game;
  exports["GameInfo"] = GameInfo;
  exports["decodeGames"] = decodeGames;
  exports["Ninja"] = Ninja;
  exports["Usable"] = Usable;
  exports["Unusable"] = Unusable;
  exports["HasI"] = HasI;
  exports["HasU"] = HasU;
  exports["Skill"] = Skill;
  exports["label_"] = label_;
  exports["Status"] = Status;
  exports["Self"] = Self;
  exports["Ally"] = Ally;
  exports["Allies"] = Allies;
  exports["RAlly"] = RAlly;
  exports["XAlly"] = XAlly;
  exports["XAllies"] = XAllies;
  exports["Enemy"] = Enemy;
  exports["Enemies"] = Enemies;
  exports["REnemy"] = REnemy;
  exports["XEnemies"] = XEnemies;
  exports["Everyone"] = Everyone;
  exports["Specific"] = Specific;
  exports["Trap"] = Trap;
  exports["TrapTo"] = TrapTo;
  exports["TrapFrom"] = TrapFrom;
  exports["TrapPer"] = TrapPer;
  exports["Normal"] = Normal;
  exports["Moderator"] = Moderator;
  exports["Admin"] = Admin;
  exports["User"] = User;
  exports["Variant"] = Variant;
  exports["eqAct"] = eqAct;
  exports["genericBarrier"] = genericBarrier;
  exports["genericBomb"] = genericBomb;
  exports["genericChakras"] = genericChakras;
  exports["eqChakras"] = eqChakras;
  exports["genericChannel"] = genericChannel;
  exports["genericChanneling"] = genericChanneling;
  exports["genericChannelTag"] = genericChannelTag;
  exports["genericCharacter"] = genericCharacter;
  exports["eqCharacter"] = eqCharacter;
  exports["genericCopied"] = genericCopied;
  exports["genericCopying"] = genericCopying;
  exports["genericDefense"] = genericDefense;
  exports["genericEffect"] = genericEffect;
  exports["genericFace"] = genericFace;
  exports["genericGame"] = genericGame;
  exports["genericGameInfo"] = genericGameInfo;
  exports["genericNinja"] = genericNinja;
  exports["genericRequirement"] = genericRequirement;
  exports["eqRequirement"] = eqRequirement;
  exports["genericSkill"] = genericSkill;
  exports["genericStatus"] = genericStatus;
  exports["genericTarget"] = genericTarget;
  exports["eqTarget"] = eqTarget;
  exports["genericTrap"] = genericTrap;
  exports["genericTrapType"] = genericTrapType;
  exports["genericPrivilege"] = genericPrivilege;
  exports["eqPrivilege"] = eqPrivilege;
  exports["genericUser"] = genericUser;
  exports["genericVariant"] = genericVariant;
})(PS["Structure"] = PS["Structure"] || {});
(function(exports) {
    "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Memoize = PS["Data.Function.Memoize"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Operators = PS["Operators"];
  var Prelude = PS["Prelude"];
  var Structure = PS["Structure"];        
  var χf = function (f) {
      return Structure.Chakras(f(Structure.χØ));
  };
  var χSum = function (v) {
      return ((v.blood + v.gen | 0) + v.nin | 0) + v.tai | 0;
  };
  var χNeg = function (v) {
      return {
          blood: -v.blood | 0,
          gen: -v.gen | 0,
          nin: -v.nin | 0,
          tai: -v.tai | 0,
          rand: -v.rand | 0
      };
  };
  var χMinus = function (v) {
      return function (v1) {
          return {
              blood: v.blood - v1.blood | 0,
              gen: v.gen - v1.gen | 0,
              nin: v.nin - v1.nin | 0,
              tai: v.tai - v1.tai | 0,
              rand: v.rand - v1.rand | 0
          };
      };
  };
  var χAdd = function (v) {
      return function (v1) {
          return {
              blood: v.blood + v1.blood | 0,
              gen: v.gen + v1.gen | 0,
              nin: v.nin + v1.nin | 0,
              tai: v.tai + v1.tai | 0,
              rand: v.rand + v1.rand | 0
          };
      };
  };
  var zip3 = function (f) {
      return function (as) {
          return function (bs) {
              return function (cs) {
                  return Data_Array.zipWith(Data_Function.apply)(Data_Array.zipWith(f)(as)(bs))(cs);
              };
          };
      };
  };
  var zip4 = function (f) {
      return function (as) {
          return function (bs) {
              return function (cs) {
                  return function (ds) {
                      return Data_Array.zipWith(Data_Function.apply)(zip3(f)(as)(bs)(cs))(ds);
                  };
              };
          };
      };
  };
  var userXP = function (v) {
      return v.xp / 1000 | 0;
  };
  var userLevel = function (v) {
      return v.xp / 1000 | 0;
  };
  var updateAt$prime = function (i) {
      return function (x) {
          return function (xs) {
              return Data_Maybe.fromMaybe(xs)(Data_Array.updateAt(i)(x)(xs));
          };
      };
  };
  var unχ = function (v) {
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(v.blood)("blood"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(v.gen)("gen"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(v.nin)("nin"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(v.tai)("tai"))(Data_Array.replicate(v.rand)("rand")))));
  };
  var skillRoot = function (v) {
      return function (nId) {
          if (v.copying instanceof Structure.NotCopied) {
              return nId;
          };
          if (v.copying instanceof Structure.Shallow) {
              return v.copying.value0;
          };
          if (v.copying instanceof Structure.Deep) {
              return v.copying.value0;
          };
          throw new Error("Failed pattern match at Functions line 127, column 35 - line 130, column 20: " + [ v.copying.constructor.name ]);
      };
  };
  var skillDur = function (v) {
      if (v.channel instanceof Structure.Instant) {
          return "Instant";
      };
      if (v.channel instanceof Structure.Passive) {
          return "Instant";
      };
      if (v.channel instanceof Structure.Action && v.channel.value0 === 0) {
          return "Action";
      };
      if (v.channel instanceof Structure.Control && v.channel.value0 === 0) {
          return "Control";
      };
      if (v.channel instanceof Structure.Ongoing && v.channel.value0 === 0) {
          return "Ongoing";
      };
      if (v.channel instanceof Structure.Action) {
          return "Action " + Data_Show.show(Data_Show.showInt)(v.channel.value0);
      };
      if (v.channel instanceof Structure.Control) {
          return "Control " + Data_Show.show(Data_Show.showInt)(v.channel.value0);
      };
      if (v.channel instanceof Structure.Ongoing) {
          return "Ongoing " + Data_Show.show(Data_Show.showInt)(v.channel.value0);
      };
      throw new Error("Failed pattern match at Functions line 113, column 30 - line 121, column 38: " + [ v.channel.constructor.name ]);
  };
  var shorten = (function () {
      var shorten$prime = function (v) {
          if (v === "\u014d") {
              return "o";
          };
          if (v === "\u014c") {
              return "O";
          };
          if (v === "\u016b") {
              return "u";
          };
          if (v === "\u016a") {
              return "U";
          };
          if (v === "\xe4") {
              return "a";
          };
          return v;
      };
      return function ($116) {
          return Data_String.fromCharArray(Operators.multimap(Data_Functor.functorArray)(shorten$prime)(function ($117) {
              return Data_Array.filter(function (v) {
                  return Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqChar)(v)([ " ", "-", ":", "(", ")", "\xae", "\u2218", "/", "?", "'" ]);
              })(Data_String.toCharArray($117));
          })($116));
      };
  })();
  var removable = function (onAlly) {
      return function (v) {
          return !v.effectSticky && onAlly !== v.effectHelpful;
      };
  };
  var ranks = [ "Academy Student", "Genin", "Ch\u016bnin", "Missing-Nin", "Anbu", "J\u014dnin", "Sannin", "Jinch\u016briki", "Akatsuki", "Kage", "Hokage" ];
  var userRank = function (v) {
      if (Data_Eq.eq(Structure.eqPrivilege)(v.privilege)(Structure.Admin.value) || Data_Eq.eq(Structure.eqPrivilege)(v.privilege)(Structure.Moderator.value)) {
          return "Staff";
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe("Hokage")(Data_Array.index(ranks)(v.xp / 5000 | 0));
      };
      throw new Error("Failed pattern match at Functions line 201, column 1 - line 201, column 25: " + [ v.constructor.name ]);
  };
  var par = function (v) {
      return v % 2;
  };
  var living = function (p) {
      return function (v) {
          var health = function (v1) {
              var $85 = par(v1.nId) === p;
              if ($85) {
                  return Data_Ord.min(Data_Ord.ordInt)(1)(v1.nHealth);
              };
              return 0;
          };
          return Data_Foldable.sum(Data_Foldable.foldableArray)(Data_Semiring.semiringInt)(Data_Functor.map(Data_Functor.functorArray)(health)(v.gameNinjas));
      };
  };
  var lacks = function (v) {
      return v.blood < 0 || (v.gen < 0 || (v.nin < 0 || (v.tai < 0 || v.rand < 0)));
  };
  var lMatch = function (v) {
      return function (v1) {
          return v.label === v1.label;
      };
  };
  var mergeSkills = function (v) {
      return function (v1) {
          var f = function (cSkills) {
              return function (nSkill) {
                  var f$prime = function (cSkill) {
                      if (lMatch(cSkill)(nSkill)) {
                          return nSkill;
                      };
                      if (Data_Boolean.otherwise) {
                          return cSkill;
                      };
                      throw new Error("Failed pattern match at Functions line 214, column 13 - line 215, column 48: " + [ cSkill.constructor.name ]);
                  };
                  return Data_Functor.map(Data_Functor.functorArray)(f$prime)(cSkills);
              };
          };
          var $102 = {};
          for (var $103 in v) {
              if ({}.hasOwnProperty.call(v, $103)) {
                  $102[$103] = v[$103];
              };
          };
          $102.characterSkills = Data_Array.zipWith(f)(v.characterSkills)(v1.nSkills);
          return $102;
      };
  };
  var filterClasses$prime = function (hideMore) {
      var moreHidden = [ "Single", "Bypassing", "Uncounterable", "Unreflectable" ];
      var hiddenClasses = [ "NonMental", "Bloodline", "Genjutsu", "Ninjutsu", "Taijutsu", "Random", "Necromancy", "All", "Affliction", "NonAffliction", "NonMental", "Nonstacking", "Multi", "Extending", "Hidden", "Shifted", "Unshifted", "Direct", "BaseTrap" ];
      var filtered = Operators.doIf(hideMore)(function (v) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(moreHidden)(v);
      })(hiddenClasses);
      return function (v) {
          return Data_Array.difference(Data_Eq.eqString)(v)(filtered);
      };
  };
  var filterClasses = Data_Function_Memoize.memoize(Data_Function_Memoize.tabulateBool)(filterClasses$prime);
  var allied = function (a) {
      return function (b) {
          return par(a) === par(b);
      };
  };
  var allSlots = Data_Array.range(0)(5);
  var teamSlots = Data_Array.filter(function ($118) {
      return (function (v) {
          return 0 === v;
      })(par($118));
  })(allSlots);
  var skillTarget$prime = function (c) {
      return function (v) {
          var targets = Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.start)(v.effects));
          var xally = Data_Foldable.elem(Data_Foldable.foldableArray)(Structure.eqTarget)(Structure.XAlly.value)(targets);
          var enemy = Data_Foldable.elem(Data_Foldable.foldableArray)(Structure.eqTarget)(Structure.Enemy.value)(targets);
          var ally = Data_Foldable.elem(Data_Foldable.foldableArray)(Structure.eqTarget)(Structure.Ally.value)(targets);
          var $109 = enemy && ally;
          if ($109) {
              return allSlots;
          };
          var $110 = enemy && xally;
          if ($110) {
              return Data_Array["delete"](Data_Eq.eqInt)(c)(allSlots);
          };
          if (enemy) {
              return Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                  return v1 + (1 - par(c) | 0) | 0;
              })(teamSlots);
          };
          if (ally) {
              return Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                  return v1 + par(c) | 0;
              })(teamSlots);
          };
          if (xally) {
              return Data_Array["delete"](Data_Eq.eqInt)(c)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                  return v1 + par(c) | 0;
              })(teamSlots));
          };
          return [ c ];
      };
  };
  var skillTarget = Data_Function_Memoize.memoize(Data_Function_Memoize.tabulateNat)(skillTarget$prime);
  exports["updateAt'"] = updateAt$prime;
  exports["allied"] = allied;
  exports["unχ"] = unχ;
  exports["χf"] = χf;
  exports["χNeg"] = χNeg;
  exports["χSum"] = χSum;
  exports["χAdd"] = χAdd;
  exports["χMinus"] = χMinus;
  exports["lacks"] = lacks;
  exports["filterClasses"] = filterClasses;
  exports["living"] = living;
  exports["removable"] = removable;
  exports["shorten"] = shorten;
  exports["skillDur"] = skillDur;
  exports["skillRoot"] = skillRoot;
  exports["skillTarget"] = skillTarget;
  exports["zip3"] = zip3;
  exports["zip4"] = zip4;
  exports["userXP"] = userXP;
  exports["userLevel"] = userLevel;
  exports["userRank"] = userRank;
  exports["lMatch"] = lMatch;
  exports["mergeSkills"] = mergeSkills;
})(PS["Functions"] = PS["Functions"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];        
  var OrdBox = (function () {
      function OrdBox(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      OrdBox.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new OrdBox(value0, value1, value2);
              };
          };
      };
      return OrdBox;
  })();
  var unOrdBox = function (v) {
      return v.value2;
  };
  var mkOrdBox = function (dictOrd) {
      return OrdBox.create(Data_Eq.eq(dictOrd.Eq0()))(Data_Ord.compare(dictOrd));
  };
  var eqOrdBox = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.value0(v.value2)(v1.value2);
      };
  });
  var ordOrdBox = new Data_Ord.Ord(function () {
      return eqOrdBox;
  }, function (v) {
      return function (v1) {
          return v.value1(v.value2)(v1.value2);
      };
  });
  exports["mkOrdBox"] = mkOrdBox;
  exports["unOrdBox"] = unOrdBox;
  exports["eqOrdBox"] = eqOrdBox;
  exports["ordOrdBox"] = ordOrdBox;
})(PS["Halogen.Data.OrdBox"] = PS["Halogen.Data.OrdBox"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var ButtonButton = (function () {
      function ButtonButton() {

      };
      ButtonButton.value = new ButtonButton();
      return ButtonButton;
  })();
  var ButtonSubmit = (function () {
      function ButtonSubmit() {

      };
      ButtonSubmit.value = new ButtonSubmit();
      return ButtonSubmit;
  })();
  var ButtonReset = (function () {
      function ButtonReset() {

      };
      ButtonReset.value = new ButtonReset();
      return ButtonReset;
  })();
  var renderButtonType = function (v) {
      if (v instanceof ButtonButton) {
          return "button";
      };
      if (v instanceof ButtonSubmit) {
          return "submit";
      };
      if (v instanceof ButtonReset) {
          return "reset";
      };
      throw new Error("Failed pattern match at DOM.HTML.Indexed.ButtonType line 9, column 20 - line 12, column 18: " + [ v.constructor.name ]);
  };
  exports["ButtonButton"] = ButtonButton;
  exports["ButtonSubmit"] = ButtonSubmit;
  exports["ButtonReset"] = ButtonReset;
  exports["renderButtonType"] = renderButtonType;
})(PS["DOM.HTML.Indexed.ButtonType"] = PS["DOM.HTML.Indexed.ButtonType"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var POST = (function () {
      function POST() {

      };
      POST.value = new POST();
      return POST;
  })();
  var GET = (function () {
      function GET() {

      };
      GET.value = new GET();
      return GET;
  })();
  var renderFormMethod = function (v) {
      if (v instanceof POST) {
          return "post";
      };
      if (v instanceof GET) {
          return "get";
      };
      throw new Error("Failed pattern match at DOM.HTML.Indexed.FormMethod line 8, column 20 - line 10, column 10: " + [ v.constructor.name ]);
  };
  exports["POST"] = POST;
  exports["GET"] = GET;
  exports["renderFormMethod"] = renderFormMethod;
})(PS["DOM.HTML.Indexed.FormMethod"] = PS["DOM.HTML.Indexed.FormMethod"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var InputButton = (function () {
      function InputButton() {

      };
      InputButton.value = new InputButton();
      return InputButton;
  })();
  var InputCheckbox = (function () {
      function InputCheckbox() {

      };
      InputCheckbox.value = new InputCheckbox();
      return InputCheckbox;
  })();
  var InputColor = (function () {
      function InputColor() {

      };
      InputColor.value = new InputColor();
      return InputColor;
  })();
  var InputDate = (function () {
      function InputDate() {

      };
      InputDate.value = new InputDate();
      return InputDate;
  })();
  var InputDatetimeLocal = (function () {
      function InputDatetimeLocal() {

      };
      InputDatetimeLocal.value = new InputDatetimeLocal();
      return InputDatetimeLocal;
  })();
  var InputEmail = (function () {
      function InputEmail() {

      };
      InputEmail.value = new InputEmail();
      return InputEmail;
  })();
  var InputFile = (function () {
      function InputFile() {

      };
      InputFile.value = new InputFile();
      return InputFile;
  })();
  var InputHidden = (function () {
      function InputHidden() {

      };
      InputHidden.value = new InputHidden();
      return InputHidden;
  })();
  var InputImage = (function () {
      function InputImage() {

      };
      InputImage.value = new InputImage();
      return InputImage;
  })();
  var InputMonth = (function () {
      function InputMonth() {

      };
      InputMonth.value = new InputMonth();
      return InputMonth;
  })();
  var InputNumber = (function () {
      function InputNumber() {

      };
      InputNumber.value = new InputNumber();
      return InputNumber;
  })();
  var InputPassword = (function () {
      function InputPassword() {

      };
      InputPassword.value = new InputPassword();
      return InputPassword;
  })();
  var InputRadio = (function () {
      function InputRadio() {

      };
      InputRadio.value = new InputRadio();
      return InputRadio;
  })();
  var InputRange = (function () {
      function InputRange() {

      };
      InputRange.value = new InputRange();
      return InputRange;
  })();
  var InputReset = (function () {
      function InputReset() {

      };
      InputReset.value = new InputReset();
      return InputReset;
  })();
  var InputSearch = (function () {
      function InputSearch() {

      };
      InputSearch.value = new InputSearch();
      return InputSearch;
  })();
  var InputSubmit = (function () {
      function InputSubmit() {

      };
      InputSubmit.value = new InputSubmit();
      return InputSubmit;
  })();
  var InputTel = (function () {
      function InputTel() {

      };
      InputTel.value = new InputTel();
      return InputTel;
  })();
  var InputText = (function () {
      function InputText() {

      };
      InputText.value = new InputText();
      return InputText;
  })();
  var InputTime = (function () {
      function InputTime() {

      };
      InputTime.value = new InputTime();
      return InputTime;
  })();
  var InputUrl = (function () {
      function InputUrl() {

      };
      InputUrl.value = new InputUrl();
      return InputUrl;
  })();
  var InputWeek = (function () {
      function InputWeek() {

      };
      InputWeek.value = new InputWeek();
      return InputWeek;
  })();
  var renderInputType = function (v) {
      if (v instanceof InputButton) {
          return "button";
      };
      if (v instanceof InputCheckbox) {
          return "checkbox";
      };
      if (v instanceof InputColor) {
          return "color";
      };
      if (v instanceof InputDate) {
          return "date";
      };
      if (v instanceof InputDatetimeLocal) {
          return "datetime-local";
      };
      if (v instanceof InputEmail) {
          return "email";
      };
      if (v instanceof InputFile) {
          return "file";
      };
      if (v instanceof InputHidden) {
          return "hidden";
      };
      if (v instanceof InputImage) {
          return "image";
      };
      if (v instanceof InputMonth) {
          return "month";
      };
      if (v instanceof InputNumber) {
          return "number";
      };
      if (v instanceof InputPassword) {
          return "password";
      };
      if (v instanceof InputRadio) {
          return "radio";
      };
      if (v instanceof InputRange) {
          return "range";
      };
      if (v instanceof InputReset) {
          return "reset";
      };
      if (v instanceof InputSearch) {
          return "search";
      };
      if (v instanceof InputSubmit) {
          return "submit";
      };
      if (v instanceof InputTel) {
          return "tel";
      };
      if (v instanceof InputText) {
          return "text";
      };
      if (v instanceof InputTime) {
          return "time";
      };
      if (v instanceof InputUrl) {
          return "url";
      };
      if (v instanceof InputWeek) {
          return "week";
      };
      throw new Error("Failed pattern match at DOM.HTML.Indexed.InputType line 28, column 19 - line 50, column 16: " + [ v.constructor.name ]);
  };
  exports["InputButton"] = InputButton;
  exports["InputCheckbox"] = InputCheckbox;
  exports["InputColor"] = InputColor;
  exports["InputDate"] = InputDate;
  exports["InputDatetimeLocal"] = InputDatetimeLocal;
  exports["InputEmail"] = InputEmail;
  exports["InputFile"] = InputFile;
  exports["InputHidden"] = InputHidden;
  exports["InputImage"] = InputImage;
  exports["InputMonth"] = InputMonth;
  exports["InputNumber"] = InputNumber;
  exports["InputPassword"] = InputPassword;
  exports["InputRadio"] = InputRadio;
  exports["InputRange"] = InputRange;
  exports["InputReset"] = InputReset;
  exports["InputSearch"] = InputSearch;
  exports["InputSubmit"] = InputSubmit;
  exports["InputTel"] = InputTel;
  exports["InputText"] = InputText;
  exports["InputTime"] = InputTime;
  exports["InputUrl"] = InputUrl;
  exports["InputWeek"] = InputWeek;
  exports["renderInputType"] = renderInputType;
})(PS["DOM.HTML.Indexed.InputType"] = PS["DOM.HTML.Indexed.InputType"] || {});
(function(exports) {
    "use strict";

  exports.toForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  }; 
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))(function ($21) {
              return Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Either.Left.create($21));
          });
      };
  };
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["try"] = $$try;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (Monad0, liftEff) {
      this.Monad0 = Monad0;
      this.liftEff = liftEff;
  };                                                   
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["liftEff"] = liftEff;
  exports["MonadEff"] = MonadEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["modify"] = modify;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Prelude = PS["Prelude"];        
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS["Control.Monad.Trans.Class"] = PS["Control.Monad.Trans.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var except = function (dictApplicative) {
      return function ($96) {
          return ExceptT(Control_Applicative.pure(dictApplicative)($96));
      };
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, function ($102) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["except"] = except;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];                                                           
  var runExcept = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Except_Trans.runExceptT($0));
  };
  exports["runExcept"] = runExcept;
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var singleton = function ($160) {
      return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)($160));
  };
  exports["singleton"] = singleton;
})(PS["Data.List.NonEmpty"] = PS["Data.List.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];        
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var JSONError = (function () {
      function JSONError(value0) {
          this.value0 = value0;
      };
      JSONError.create = function (value0) {
          return new JSONError(value0);
      };
      return JSONError;
  })();
  var showForeignError = new Data_Show.Show(function (v) {
      if (v instanceof ForeignError) {
          return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof ErrorAtIndex) {
          return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof ErrorAtProperty) {
          return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof JSONError) {
          return "(JSONError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Data.Foreign line 64, column 1 - line 64, column 47: " + [ v.constructor.name ]);
  });
  var fail = function ($121) {
      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton($121));
  };
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Data.Foreign line 104, column 1 - line 104, column 55: " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  var readString = unsafeReadTagged("String");
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["JSONError"] = JSONError;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["readString"] = readString;
  exports["fail"] = fail;
  exports["showForeignError"] = showForeignError;
  exports["toForeign"] = $foreign.toForeign;
  exports["typeOf"] = $foreign.typeOf;
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Util_FFI = PS["DOM.Util.FFI"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                           
  var elementToNode = Unsafe_Coerce.unsafeCoerce;
  exports["elementToNode"] = elementToNode;
})(PS["DOM.Node.Types"] = PS["DOM.Node.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MediaType = function (x) {
      return x;
  }; 
  var newtypeMediaType = new Data_Newtype.Newtype(function (n) {
      return n;
  }, MediaType);
  exports["MediaType"] = MediaType;
  exports["newtypeMediaType"] = newtypeMediaType;
})(PS["Data.MediaType"] = PS["Data.MediaType"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var RefUpdate = (function () {
      function RefUpdate(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RefUpdate.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RefUpdate(value0, value1, value2);
              };
          };
      };
      return RefUpdate;
  })();
  var Query = (function () {
      function Query(value0) {
          this.value0 = value0;
      };
      Query.create = function (value0) {
          return new Query(value0);
      };
      return Query;
  })();                             
  var bifunctorInputF = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              if (v instanceof RefUpdate) {
                  return new RefUpdate(v.value0, v.value1, f(v.value2));
              };
              if (v instanceof Query) {
                  return new Query(g(v.value0));
              };
              throw new Error("Failed pattern match at Halogen.Query.InputF line 21, column 15 - line 23, column 27: " + [ v.constructor.name ]);
          };
      };
  });
  var functorInputF = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorInputF));
  exports["RefUpdate"] = RefUpdate;
  exports["Query"] = Query;
  exports["bifunctorInputF"] = bifunctorInputF;
  exports["functorInputF"] = functorInputF;
})(PS["Halogen.Query.InputF"] = PS["Halogen.Query.InputF"] || {});
(function(exports) {
    "use strict";

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modifyRef'"] = function (ref) {
    return function (f) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var modifyRef = function (ref) {
      return function (f) {
          return $foreign["modifyRef'"](ref)(function (s) {
              return {
                  state: f(s),
                  value: Data_Unit.unit
              };
          });
      };
  };
  exports["modifyRef"] = modifyRef;
  exports["newRef"] = $foreign.newRef;
  exports["readRef"] = $foreign.readRef;
  exports["modifyRef'"] = $foreign["modifyRef'"];
  exports["writeRef"] = $foreign.writeRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
    "use strict";

  exports.eventListener = function (fn) {
    return function (event) {
      return fn(event)();
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            target.addEventListener(type, listener, useCapture);
            return {};
          };
        };
      };
    };
  };

  exports.removeEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            target.removeEventListener(type, listener, useCapture);
            return {};
          };
        };
      };
    };
  };
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
    "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var $$throw = function ($1) {
      return $foreign.throwException($foreign.error($1));
  };
  exports["throw"] = $$throw;
  exports["error"] = $foreign.error;
  exports["throwException"] = $foreign.throwException;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.Event.EventTarget"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var DOM = PS["DOM"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Prelude = PS["Prelude"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
    "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Prelude = PS["Prelude"];        
  var Step = (function () {
      function Step(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Step.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Step(value0, value1, value2);
              };
          };
      };
      return Step;
  })();
  var step = function (v) {
      return v.value1;
  };
  var halt = function (v) {
      return v.value2;
  };
  var extract = function (v) {
      return v.value0;
  };
  exports["Step"] = Step;
  exports["extract"] = extract;
  exports["step"] = step;
  exports["halt"] = halt;
})(PS["Halogen.VDom.Machine"] = PS["Halogen.VDom.Machine"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var ElemSpec = (function () {
      function ElemSpec(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ElemSpec.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ElemSpec(value0, value1, value2);
              };
          };
      };
      return ElemSpec;
  })();
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var Elem = (function () {
      function Elem(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Elem.create = function (value0) {
          return function (value1) {
              return new Elem(value0, value1);
          };
      };
      return Elem;
  })();
  var Keyed = (function () {
      function Keyed(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Keyed.create = function (value0) {
          return function (value1) {
              return new Keyed(value0, value1);
          };
      };
      return Keyed;
  })();
  var Widget = (function () {
      function Widget(value0) {
          this.value0 = value0;
      };
      Widget.create = function (value0) {
          return new Widget(value0);
      };
      return Widget;
  })();
  var Grafted = (function () {
      function Grafted(value0) {
          this.value0 = value0;
      };
      Grafted.create = function (value0) {
          return new Grafted(value0);
      };
      return Grafted;
  })();
  var Graft = (function () {
      function Graft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Graft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Graft(value0, value1, value2);
              };
          };
      };
      return Graft;
  })();
  var unGraft = function (f) {
      return function ($124) {
          return f($124);
      };
  };           
  var graft = Unsafe_Coerce.unsafeCoerce;
  var functorElemSpec = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new ElemSpec(v.value0, v.value1, f(v.value2));
      };
  });                                
  var eqElemName = Data_Eq.eqString;
  var bifunctorGraft = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return unGraft(function (v) {
              return graft(new Graft(function ($126) {
                  return f(v.value0($126));
              }, function ($127) {
                  return g(v.value1($127));
              }, v.value2));
          });
      };
  });
  var bifunctorVDom = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              if (v instanceof Text) {
                  return new Text(v.value0);
              };
              if (v instanceof Grafted) {
                  return new Grafted(Data_Bifunctor.bimap(bifunctorGraft)(f)(g)(v.value0));
              };
              return new Grafted(graft(new Graft(f, g, v)));
          };
      };
  });
  var runGraft = unGraft(function (v) {
      var go = function (v2) {
          if (v2 instanceof Text) {
              return new Text(v2.value0);
          };
          if (v2 instanceof Elem) {
              return new Elem(Data_Functor.map(functorElemSpec)(v.value0)(v2.value0), Data_Functor.map(Data_Functor.functorArray)(go)(v2.value1));
          };
          if (v2 instanceof Keyed) {
              return new Keyed(Data_Functor.map(functorElemSpec)(v.value0)(v2.value0), Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(go))(v2.value1));
          };
          if (v2 instanceof Widget) {
              return new Widget(v.value1(v2.value0));
          };
          if (v2 instanceof Grafted) {
              return new Grafted(Data_Bifunctor.bimap(bifunctorGraft)(v.value0)(v.value1)(v2.value0));
          };
          throw new Error("Failed pattern match at Halogen.VDom.Types line 75, column 7 - line 75, column 27: " + [ v2.constructor.name ]);
      };
      return go(v.value2);
  });
  exports["Text"] = Text;
  exports["Elem"] = Elem;
  exports["Keyed"] = Keyed;
  exports["Widget"] = Widget;
  exports["Grafted"] = Grafted;
  exports["Graft"] = Graft;
  exports["graft"] = graft;
  exports["unGraft"] = unGraft;
  exports["runGraft"] = runGraft;
  exports["ElemSpec"] = ElemSpec;
  exports["bifunctorVDom"] = bifunctorVDom;
  exports["bifunctorGraft"] = bifunctorGraft;
  exports["functorElemSpec"] = functorElemSpec;
  exports["eqElemName"] = eqElemName;
})(PS["Halogen.VDom.Types"] = PS["Halogen.VDom.Types"] || {});
(function(exports) {
    "use strict";

  exports.unsafeGetAny = function (key, obj) {
    return obj[key];
  };

  exports.unsafeHasAny = function (key, obj) {
    return obj.hasOwnProperty(key);
  };

  exports.unsafeSetAny = function (key, val, obj) {
    return function () {
      obj[key] = val;
    };
  };

  exports.forE = function (a, f) {
    return function () {
      var b = [];
      for (var i = 0; i < a.length; i++) {
        b.push(f(i, a[i])());
      }
      return b;
    };
  };

  exports.forInE = function (o, f) {
    return function () {
      var ks = Object.keys(o);
      for (var i = 0; i < ks.length; i++) {
        var k = ks[i];
        f(k, o[k])();
      }
    };
  };

  exports.diffWithIxE = function (a1, a2, f1, f2, f3) {
    return function () {
      var a3 = [];
      var l1 = a1.length;
      var l2 = a2.length;
      var i  = 0;
      while (1) {
        if (i < l1) {
          if (i < l2) {
            a3.push(f1(i, a1[i], a2[i])());
          } else {
            f2(i, a1[i])();
          }
        } else if (i < l2) {
          a3.push(f3(i, a2[i])());
        } else {
          break;
        }
        i++;
      }
      return a3;
    };
  };

  exports.strMapWithIxE = function (as, fk, f) {
    return function () {
      var o = {};
      for (var i = 0; i < as.length; i++) {
        var a = as[i];
        var k = fk(a);
        o[k] = f(k, i, a)();
      }
      return o;
    };
  };

  exports.diffWithKeyAndIxE = function (o1, as, fk, f1, f2, f3) {
    return function () {
      var o2 = {};
      for (var i = 0; i < as.length; i++) {
        var a = as[i];
        var k = fk(a);
        if (o1.hasOwnProperty(k)) {
          o2[k] = f1(k, i, o1[k], a)();
        } else {
          o2[k] = f3(k, i, a)();
        }
      }
      for (var k in o1) {
        if (k in o2) {
          continue;
        }
        f2(k, o1[k])();
      }
      return o2;
    };
  };

  exports.refEq = function (a, b) {
    return a === b;
  };

  exports.createTextNode = function (s, doc) {
    return function () {
      return doc.createTextNode(s);
    };
  };

  exports.setTextContent = function (s, n) {
    return function () {
      n.textContent = s;
    };
  };

  exports.createElement = function (ns, name, doc) {
    return function () {
      if (ns != null) {
        return doc.createElementNS(ns, name);
      } else {
        return doc.createElement(name)
      }
    };
  };

  exports.insertChildIx = function (i, a, b) {
    return function () {
      var n = b.childNodes.item(i) || null;
      if (n !== a) {
        b.insertBefore(a, n);
      }
    };
  };

  exports.removeChild = function (a, b) {
    return function () {
      if (b && a.parentNode === b) {
        b.removeChild(a);
      }
    };
  };

  exports.unsafeParent = function (a) {
    return a.parentNode;
  };

  exports.setAttribute = function (ns, attr, val, el) {
    return function () {
      if (ns != null) {
        el.setAttributeNS(ns, attr, val);
      } else {
        el.setAttribute(attr, val);
      }
    };
  };

  exports.removeAttribute = function (ns, attr, el) {
    return function () {
      if (ns != null) {
        el.removeAttributeNS(ns, attr);
      } else {
        el.removeAttribute(attr);
      }
    };
  };

  exports.addEventListener = function (ev, listener, el) {
    return function () {
      el.addEventListener(ev, listener, false);
    };
  };

  exports.removeEventListener = function (ev, listener, el) {
    return function () {
      el.removeEventListener(ev, listener, false);
    };
  };

  exports.jsUndefined = void 0;
})(PS["Halogen.VDom.Util"] = PS["Halogen.VDom.Util"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Halogen.VDom.Util"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var DOM = PS["DOM"];
  var DOM_Event_EventTarget = PS["DOM.Event.EventTarget"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen_VDom_Types = PS["Halogen.VDom.Types"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var unsafeLookup = $foreign.unsafeGetAny;
  var unsafeFreeze = Unsafe_Coerce.unsafeCoerce;
  var pokeMutMap = $foreign.unsafeSetAny;
  var newMutMap = Data_StrMap_ST["new"];
  var effUnit = Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
  var effPure = Control_Applicative.pure(Control_Monad_Eff.applicativeEff);
  exports["effPure"] = effPure;
  exports["effUnit"] = effUnit;
  exports["newMutMap"] = newMutMap;
  exports["pokeMutMap"] = pokeMutMap;
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["unsafeLookup"] = unsafeLookup;
  exports["unsafeGetAny"] = $foreign.unsafeGetAny;
  exports["unsafeHasAny"] = $foreign.unsafeHasAny;
  exports["unsafeSetAny"] = $foreign.unsafeSetAny;
  exports["forE"] = $foreign.forE;
  exports["forInE"] = $foreign.forInE;
  exports["diffWithIxE"] = $foreign.diffWithIxE;
  exports["diffWithKeyAndIxE"] = $foreign.diffWithKeyAndIxE;
  exports["strMapWithIxE"] = $foreign.strMapWithIxE;
  exports["refEq"] = $foreign.refEq;
  exports["createTextNode"] = $foreign.createTextNode;
  exports["setTextContent"] = $foreign.setTextContent;
  exports["createElement"] = $foreign.createElement;
  exports["insertChildIx"] = $foreign.insertChildIx;
  exports["removeChild"] = $foreign.removeChild;
  exports["unsafeParent"] = $foreign.unsafeParent;
  exports["setAttribute"] = $foreign.setAttribute;
  exports["removeAttribute"] = $foreign.removeAttribute;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
  exports["jsUndefined"] = $foreign.jsUndefined;
})(PS["Halogen.VDom.Util"] = PS["Halogen.VDom.Util"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var DOM = PS["DOM"];
  var DOM_Event_EventTarget = PS["DOM.Event.EventTarget"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen_VDom = PS["Halogen.VDom"];
  var Halogen_VDom_Machine = PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Types = PS["Halogen.VDom.Types"];
  var Halogen_VDom_Util = PS["Halogen.VDom.Util"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Created = (function () {
      function Created(value0) {
          this.value0 = value0;
      };
      Created.create = function (value0) {
          return new Created(value0);
      };
      return Created;
  })();
  var Removed = (function () {
      function Removed(value0) {
          this.value0 = value0;
      };
      Removed.create = function (value0) {
          return new Removed(value0);
      };
      return Removed;
  })();
  var Attribute = (function () {
      function Attribute(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Attribute.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Attribute(value0, value1, value2);
              };
          };
      };
      return Attribute;
  })();
  var Property = (function () {
      function Property(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Property.create = function (value0) {
          return function (value1) {
              return new Property(value0, value1);
          };
      };
      return Property;
  })();
  var Handler = (function () {
      function Handler(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Handler.create = function (value0) {
          return function (value1) {
              return new Handler(value0, value1);
          };
      };
      return Handler;
  })();
  var Ref = (function () {
      function Ref(value0) {
          this.value0 = value0;
      };
      Ref.create = function (value0) {
          return new Ref(value0);
      };
      return Ref;
  })();
  var unsafeGetProperty = Halogen_VDom_Util.unsafeGetAny;
  var setProperty = Halogen_VDom_Util.unsafeSetAny;
  var removeProperty = function (key, el) {
      var v = Data_Foreign.typeOf(Halogen_VDom_Util.unsafeGetAny(key, el));
      if (v === "string") {
          return Halogen_VDom_Util.unsafeSetAny(key, "", el);
      };
      if (key === "rowSpan") {
          return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
      };
      if (key === "colSpan") {
          return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
      };
      return Halogen_VDom_Util.unsafeSetAny(key, Halogen_VDom_Util.jsUndefined, el);
  };
  var propToStrKey = function (v) {
      if (v instanceof Attribute && v.value0 instanceof Data_Maybe.Just) {
          return "attr/" + (v.value0.value0 + (":" + v.value1));
      };
      if (v instanceof Attribute) {
          return "attr/:" + v.value1;
      };
      if (v instanceof Property) {
          return "prop/" + v.value0;
      };
      if (v instanceof Handler) {
          return "handler/" + v.value0;
      };
      if (v instanceof Ref) {
          return "ref";
      };
      throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop line 179, column 16 - line 186, column 1: " + [ v.constructor.name ]);
  };
  var propFromString = Unsafe_Coerce.unsafeCoerce;
  var propFromBoolean = Unsafe_Coerce.unsafeCoerce;
  var functorProp = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof Handler) {
              return new Handler(v.value0, Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v.value1));
          };
          if (v instanceof Ref) {
              return new Ref(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v.value0));
          };
          return v;
      };
  });
  var buildProp = function (emit) {
      return function (el) {
          var removeProp = function (prevEvents) {
              return function (v, v1) {
                  if (v1 instanceof Attribute) {
                      return Halogen_VDom_Util.removeAttribute(Data_Nullable.toNullable(v1.value0), v1.value1, el);
                  };
                  if (v1 instanceof Property) {
                      return removeProperty(v1.value0, el);
                  };
                  if (v1 instanceof Handler) {
                      var handler = Halogen_VDom_Util.unsafeLookup(v1.value0, prevEvents);
                      return Halogen_VDom_Util.removeEventListener(v1.value0, Data_Tuple.fst(handler), el);
                  };
                  if (v1 instanceof Ref) {
                      return Halogen_VDom_Util.effUnit;
                  };
                  throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop line 166, column 5 - line 176, column 21: " + [ v1.constructor.name ]);
              };
          };
          var mbEmit = Data_Maybe.maybe(Halogen_VDom_Util.effUnit)(emit);
          var done = function (ps) {
              var v = Data_StrMap.lookup("ref")(ps);
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Ref) {
                  return mbEmit(v.value0.value0(new Removed(el)));
              };
              return Halogen_VDom_Util.effUnit;
          };
          var diffProp = function (prevEvents, events) {
              return function (v, v1, v11, v2) {
                  if (v11 instanceof Attribute && v2 instanceof Attribute) {
                      var v3 = v11.value2 !== v2.value2;
                      if (v3) {
                          return function __do() {
                              Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el)();
                              return v2;
                          };
                      };
                      return Halogen_VDom_Util.effPure(v2);
                  };
                  if (v11 instanceof Property && v2 instanceof Property) {
                      var v4 = Halogen_VDom_Util.refEq(v11.value1, v2.value1);
                      if (v4) {
                          return Halogen_VDom_Util.effPure(v2);
                      };
                      if (v2.value0 === "value") {
                          var elVal = unsafeGetProperty("value", el);
                          var v5 = !Halogen_VDom_Util.refEq(elVal, v2.value1);
                          if (v5) {
                              return function __do() {
                                  setProperty(v2.value0, v2.value1, el)();
                                  return v2;
                              };
                          };
                          return Halogen_VDom_Util.effPure(v2);
                      };
                      return function __do() {
                          setProperty(v2.value0, v2.value1, el)();
                          return v2;
                      };
                  };
                  if (v11 instanceof Handler && v2 instanceof Handler) {
                      var handler = Halogen_VDom_Util.unsafeLookup(v2.value0, prevEvents);
                      return function __do() {
                          Control_Monad_Eff_Ref.writeRef(Data_Tuple.snd(handler))(v2.value1)();
                          Halogen_VDom_Util.pokeMutMap(v2.value0, handler, events)();
                          return v2;
                      };
                  };
                  return Halogen_VDom_Util.effPure(v2);
              };
          };
          var applyProp = function (events) {
              return function (v, v1, v2) {
                  if (v2 instanceof Attribute) {
                      return function __do() {
                          Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el)();
                          return v2;
                      };
                  };
                  if (v2 instanceof Property) {
                      return function __do() {
                          setProperty(v2.value0, v2.value1, el)();
                          return v2;
                      };
                  };
                  if (v2 instanceof Handler) {
                      var v3 = Halogen_VDom_Util.unsafeGetAny(v2.value0, events);
                      if (Halogen_VDom_Util.unsafeHasAny(v2.value0, events)) {
                          return function __do() {
                              Control_Monad_Eff_Ref.writeRef(Data_Tuple.snd(v3))(v2.value1)();
                              return v2;
                          };
                      };
                      return function __do() {
                          var v4 = Control_Monad_Eff_Ref.newRef(v2.value1)();
                          var listener = DOM_Event_EventTarget.eventListener(function (ev) {
                              return function __do() {
                                  var v5 = Control_Monad_Eff_Ref.readRef(v4)();
                                  return mbEmit(v5(ev))();
                              };
                          });
                          Halogen_VDom_Util.pokeMutMap(v2.value0, new Data_Tuple.Tuple(listener, v4), events)();
                          Halogen_VDom_Util.addEventListener(v2.value0, listener, el)();
                          return v2;
                      };
                  };
                  if (v2 instanceof Ref) {
                      return function __do() {
                          mbEmit(v2.value0(new Created(el)))();
                          return v2;
                      };
                  };
                  throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop line 107, column 5 - line 130, column 15: " + [ v2.constructor.name ]);
              };
          };
          var patch = function (prevEvents, ps1) {
              return function (ps2) {
                  return function __do() {
                      var v = Halogen_VDom_Util.newMutMap();
                      var onThis = removeProp(prevEvents);
                      var onThese = diffProp(prevEvents, v);
                      var onThat = applyProp(v);
                      var v1 = Halogen_VDom_Util.diffWithKeyAndIxE(ps1, ps2, propToStrKey, onThese, onThis, onThat)();
                      return new Halogen_VDom_Machine.Step(Data_Unit.unit, patch(Halogen_VDom_Util.unsafeFreeze(v), v1), done(v1));
                  };
              };
          };
          var render = function (ps1) {
              return function __do() {
                  var v = Halogen_VDom_Util.newMutMap();
                  var v1 = Halogen_VDom_Util.strMapWithIxE(ps1, propToStrKey, applyProp(v))();
                  return new Halogen_VDom_Machine.Step(Data_Unit.unit, patch(Halogen_VDom_Util.unsafeFreeze(v), v1), done(v1));
              };
          };
          return render;
      };
  };
  exports["Attribute"] = Attribute;
  exports["Property"] = Property;
  exports["Handler"] = Handler;
  exports["Ref"] = Ref;
  exports["Created"] = Created;
  exports["Removed"] = Removed;
  exports["propFromString"] = propFromString;
  exports["propFromBoolean"] = propFromBoolean;
  exports["buildProp"] = buildProp;
  exports["functorProp"] = functorProp;
})(PS["Halogen.VDom.DOM.Prop"] = PS["Halogen.VDom.DOM.Prop"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_HTML_Indexed_ButtonType = PS["DOM.HTML.Indexed.ButtonType"];
  var DOM_HTML_Indexed_CrossOriginValue = PS["DOM.HTML.Indexed.CrossOriginValue"];
  var DOM_HTML_Indexed_DirValue = PS["DOM.HTML.Indexed.DirValue"];
  var DOM_HTML_Indexed_FormMethod = PS["DOM.HTML.Indexed.FormMethod"];
  var DOM_HTML_Indexed_InputType = PS["DOM.HTML.Indexed.InputType"];
  var DOM_HTML_Indexed_KindValue = PS["DOM.HTML.Indexed.KindValue"];
  var DOM_HTML_Indexed_MenuType = PS["DOM.HTML.Indexed.MenuType"];
  var DOM_HTML_Indexed_MenuitemType = PS["DOM.HTML.Indexed.MenuitemType"];
  var DOM_HTML_Indexed_OnOff = PS["DOM.HTML.Indexed.OnOff"];
  var DOM_HTML_Indexed_OrderedListType = PS["DOM.HTML.Indexed.OrderedListType"];
  var DOM_HTML_Indexed_PreloadValue = PS["DOM.HTML.Indexed.PreloadValue"];
  var DOM_HTML_Indexed_ScopeValue = PS["DOM.HTML.Indexed.ScopeValue"];
  var DOM_HTML_Indexed_StepValue = PS["DOM.HTML.Indexed.StepValue"];
  var DOM_HTML_Indexed_WrapValue = PS["DOM.HTML.Indexed.WrapValue"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Halogen_VDom = PS["Halogen.VDom"];
  var Halogen_VDom_DOM_Prop = PS["Halogen.VDom.DOM.Prop"];
  var Halogen_VDom_Types = PS["Halogen.VDom.Types"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var HTML = function (x) {
      return x;
  };
  var ClassName = function (x) {
      return x;
  };
  var IsProp = function (toPropValue) {
      this.toPropValue = toPropValue;
  }; 
  var toPropValue = function (dict) {
      return dict.toPropValue;
  };
  var text = function ($54) {
      return HTML(Halogen_VDom_Types.Text.create($54));
  };
  var stringIsProp = new IsProp(Halogen_VDom_DOM_Prop.propFromString);
  var slot = function ($56) {
      return HTML(Halogen_VDom_Types.Widget.create($56));
  };
  var prop = function (dictIsProp) {
      return function (v) {
          return function ($59) {
              return Halogen_VDom_DOM_Prop.Property.create(v)(toPropValue(dictIsProp)($59));
          };
      };
  };       
  var newtypeClassName = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ClassName);                                                
  var inputTypeIsProp = new IsProp(function ($67) {
      return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_InputType.renderInputType($67));
  });
  var handler = Halogen_VDom_DOM_Prop.Handler.create;
  var formMethodIsProp = new IsProp(function ($68) {
      return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_FormMethod.renderFormMethod($68));
  });                               
  var element = function (ns) {
      return function (name) {
          return function (props) {
              return function (children) {
                  return new Halogen_VDom_Types.Elem(new Halogen_VDom_Types.ElemSpec(ns, name, props), children);
              };
          };
      };
  }; 
  var buttonTypeIsProp = new IsProp(function ($71) {
      return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_ButtonType.renderButtonType($71));
  });
  var booleanIsProp = new IsProp(Halogen_VDom_DOM_Prop.propFromBoolean);
  var bifunctorHTML = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return Data_Bifunctor.bimap(Halogen_VDom_Types.bifunctorVDom)(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Halogen_VDom_DOM_Prop.functorProp)(Data_Functor.map(Halogen_Query_InputF.functorInputF)(g))))(f)(v);
          };
      };
  });                                                                            
  var attr = function (ns) {
      return function (v) {
          return Halogen_VDom_DOM_Prop.Attribute.create(ns)(v);
      };
  };
  exports["HTML"] = HTML;
  exports["slot"] = slot;
  exports["text"] = text;
  exports["element"] = element;
  exports["prop"] = prop;
  exports["attr"] = attr;
  exports["handler"] = handler;
  exports["IsProp"] = IsProp;
  exports["toPropValue"] = toPropValue;
  exports["ClassName"] = ClassName;
  exports["bifunctorHTML"] = bifunctorHTML;
  exports["stringIsProp"] = stringIsProp;
  exports["booleanIsProp"] = booleanIsProp;
  exports["buttonTypeIsProp"] = buttonTypeIsProp;
  exports["formMethodIsProp"] = formMethodIsProp;
  exports["inputTypeIsProp"] = inputTypeIsProp;
  exports["newtypeClassName"] = newtypeClassName;
})(PS["Halogen.HTML.Core"] = PS["Halogen.HTML.Core"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS["Data.Exists"] = PS["Data.Exists"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Const = PS["Data.Const"];
  var Data_Exists = PS["Data.Exists"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var ApF = (function () {
      function ApF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ApF.create = function (value0) {
          return function (value1) {
              return new ApF(value0, value1);
          };
      };
      return ApF;
  })();
  var Pure = (function () {
      function Pure(value0) {
          this.value0 = value0;
      };
      Pure.create = function (value0) {
          return new Pure(value0);
      };
      return Pure;
  })();
  var Ap = (function () {
      function Ap(value0) {
          this.value0 = value0;
      };
      Ap.create = function (value0) {
          return new Ap(value0);
      };
      return Ap;
  })();
  var retractFreeAp = function (dictApplicative) {
      return function (v) {
          if (v instanceof Pure) {
              return Control_Applicative.pure(dictApplicative)(v.value0);
          };
          if (v instanceof Ap) {
              return Data_Exists.runExists(function (v1) {
                  return Control_Apply.apply(dictApplicative.Apply0())(retractFreeAp(dictApplicative)(v1.value1(Data_Unit.unit)))(v1.value0(Data_Unit.unit));
              })(v.value0);
          };
          throw new Error("Failed pattern match at Control.Applicative.Free line 32, column 1 - line 32, column 64: " + [ v.constructor.name ]);
      };
  };
  var ap = function (v) {
      return function (k) {
          return new Ap(Data_Exists.mkExists(new ApF(v, k)));
      };
  };              
  var hoistFreeAp = function (k) {
      return function (v) {
          if (v instanceof Pure) {
              return new Pure(v.value0);
          };
          if (v instanceof Ap) {
              return Data_Exists.runExists(function (v1) {
                  return ap(function (v3) {
                      return k(v1.value0(Data_Unit.unit));
                  })(function (v3) {
                      return hoistFreeAp(k)(v1.value1(Data_Unit.unit));
                  });
              })(v.value0);
          };
          throw new Error("Failed pattern match at Control.Applicative.Free line 44, column 1 - line 44, column 66: " + [ k.constructor.name, v.constructor.name ]);
      };
  };
  exports["retractFreeAp"] = retractFreeAp;
  exports["hoistFreeAp"] = hoistFreeAp;
})(PS["Control.Applicative.Free"] = PS["Control.Applicative.Free"] || {});
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          });
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt, canceler;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;
          canceler  = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            step   = bhead(step);
            if (btail === null) {
              bhead = null;
            } else {
              bhead = btail._1;
              btail = btail._2;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item.
                if (interrupt && interrupt !== tmp) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._fork = function (immediate) {
    return function (aff) {
      return Aff.Fork(immediate, aff);
    };
  };

  exports._liftEff = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };

  exports._delay = function () {
    function setDelay(n, k) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k);
      } else {
        return setTimeout(k, n);
      }
    }

    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }

    return function (right, ms) {
      return Aff.Async(function (cb) {
        return function () {
          var timer = setDelay(ms, cb(right()));
          return function () {
            return Aff.Sync(function () {
              return right(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();

  exports._sequential = Aff.Seq;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Compose = PS["Data.Functor.Compose"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Parallel = function (Applicative1, Monad0, parallel, sequential) {
      this.Applicative1 = Applicative1;
      this.Monad0 = Monad0;
      this.parallel = parallel;
      this.sequential = sequential;
  };                                                           
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["Parallel"] = Parallel;
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
})(PS["Control.Parallel.Class"] = PS["Control.Parallel.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              return function ($17) {
                  return Control_Parallel_Class.sequential(dictParallel)(Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)(function ($18) {
                      return Control_Parallel_Class.parallel(dictParallel)(f($18));
                  })($17));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["parTraverse_"] = parTraverse_;
  exports["parSequence_"] = parSequence_;
})(PS["Control.Parallel"] = PS["Control.Parallel"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Canceler = function (x) {
      return x;
  };
  var suspendAff = $foreign._fork(false);
  var functorParAff = new Data_Functor.Functor($foreign._parAffMap);
  var functorAff = new Data_Functor.Functor($foreign._map);
  var forkAff = $foreign._fork(true);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Control.Monad.Aff line 402, column 21 - line 404, column 31: " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Control.Monad.Aff line 397, column 20 - line 401, column 3: " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Control.Monad.Aff line 392, column 12 - line 394, column 20: " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign._makeFiber(ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var v = makeFiber(aff)();
          v.run();
          return v;
      };
  };                                 
  var delay = function (v) {
      return $foreign._delay(Data_Either.Right.create, v);
  };
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, $foreign._parAffApply);
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign._bind);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign._pure);
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, $foreign._liftEff);
  var effCanceler = function ($50) {
      return Canceler(Data_Function["const"](Control_Monad_Eff_Class.liftEff(monadEffAff)($50)));
  };
  var joinFiber = function (v) {
      return $foreign.makeAff(function (k) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(effCanceler)(v.join(k));
      });
  };
  var functorFiber = new Data_Functor.Functor(function (f) {
      return function (t) {
          return Control_Monad_Eff_Unsafe.unsafePerformEff(makeFiber(Data_Functor.map(functorAff)(f)(joinFiber(t))));
      };
  });
  var killFiber = function (e) {
      return function (v) {
          return Control_Bind.bind(bindAff)(Control_Monad_Eff_Class.liftEff(monadEffAff)(v.isSuspended))(function (v1) {
              if (v1) {
                  return Control_Monad_Eff_Class.liftEff(monadEffAff)(Data_Functor["void"](Control_Monad_Eff.functorEff)(v.kill(e, Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit)))));
              };
              return $foreign.makeAff(function (k) {
                  return Data_Functor.map(Control_Monad_Eff.functorEff)(effCanceler)(v.kill(e, k));
              });
          });
      };
  };
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign._throwError);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign._catchError);                                     
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)(function ($52) {
              return Control_Monad_Eff_Class.liftEff(monadEffAff)(k($52));
          })(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var runAff_ = function (k) {
      return function (aff) {
          return Data_Functor["void"](Control_Monad_Eff.functorEff)(runAff(k)(aff));
      };
  };
  var parallelAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, Unsafe_Coerce.unsafeCoerce, $foreign._sequential);
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, function ($54) {
      return Control_Parallel_Class.parallel(parallelAff)(Control_Applicative.pure(applicativeAff)($54));
  });
  var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadAff;
  }, function (k) {
      var go = function (a) {
          return Control_Bind.bind(bindAff)(k(a))(function (v) {
              if (v instanceof Control_Monad_Rec_Class.Done) {
                  return Control_Applicative.pure(applicativeAff)(v.value0);
              };
              if (v instanceof Control_Monad_Rec_Class.Loop) {
                  return go(v.value0);
              };
              throw new Error("Failed pattern match at Control.Monad.Aff line 101, column 7 - line 103, column 22: " + [ v.constructor.name ]);
          });
      };
      return go;
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["Canceler"] = Canceler;
  exports["launchAff"] = launchAff;
  exports["runAff"] = runAff;
  exports["runAff_"] = runAff_;
  exports["forkAff"] = forkAff;
  exports["suspendAff"] = suspendAff;
  exports["delay"] = delay;
  exports["killFiber"] = killFiber;
  exports["joinFiber"] = joinFiber;
  exports["nonCanceler"] = nonCanceler;
  exports["effCanceler"] = effCanceler;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadRecAff"] = monadRecAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffAff"] = monadEffAff;
  exports["functorParAff"] = functorParAff;
  exports["applyParAff"] = applyParAff;
  exports["applicativeParAff"] = applicativeParAff;
  exports["parallelAff"] = parallelAff;
  exports["functorFiber"] = functorFiber;
  exports["makeAff"] = $foreign.makeAff;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_List_Trans = PS["Control.Monad.List.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_RWS_Trans = PS["Control.Monad.RWS.Trans"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Monoid = PS["Data.Monoid"];
  var Prelude = PS["Prelude"];        
  var MonadAff = function (MonadEff0, liftAff) {
      this.MonadEff0 = MonadEff0;
      this.liftAff = liftAff;
  };
  var monadAffAff = new MonadAff(function () {
      return Control_Monad_Aff.monadEffAff;
  }, Control_Category.id(Control_Category.categoryFn));
  var liftAff = function (dict) {
      return dict.liftAff;
  };
  exports["liftAff"] = liftAff;
  exports["MonadAff"] = MonadAff;
  exports["monadAffAff"] = monadAffAff;
})(PS["Control.Monad.Aff.Class"] = PS["Control.Monad.Aff.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];        
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue line 50, column 1 - line 50, column 63: " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["CatQueue"] = CatQueue;
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS["Data.CatQueue"] = PS["Data.CatQueue"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_CatQueue = PS["Data.CatQueue"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NaturalTransformation = PS["Data.NaturalTransformation"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];        
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (cat) {
          if (v instanceof CatNil) {
              return cat;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(cat));
          };
          throw new Error("Failed pattern match at Data.CatList line 110, column 1 - line 110, column 54: " + [ v.constructor.name, cat.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList line 125, column 3 - line 125, column 59: " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList line 121, column 14 - line 123, column 67: " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $41 = Data_CatQueue["null"](v.value1);
              if ($41) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList line 101, column 1 - line 101, column 61: " + [ v.constructor.name ]);
  }; 
  var empty = CatNil.value;
  var append = function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatNil) {
              return v1;
          };
          return link(v)(v1);
      };
  }; 
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["CatNil"] = CatNil;
  exports["CatCons"] = CatCons;
  exports["empty"] = empty;
  exports["append"] = append;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS["Data.CatList"] = PS["Data.CatList"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 220, column 7 - line 224, column 64: " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free line 218, column 3 - line 226, column 56: " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)(function ($118) {
              return Control_Applicative.pure(freeApplicative)(k($118));
          })(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($119) {
      return fromView(Return.create($119));
  });
  var liftF = function (f) {
      return fromView(new Bind(f, function ($120) {
          return Control_Applicative.pure(freeApplicative)($120);
      }));
  };
  var foldFree = function (dictMonadRec) {
      return function (k) {
          var go = function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(v.value0));
              };
              if (v instanceof Bind) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(function ($127) {
                      return Control_Monad_Rec_Class.Loop.create(v.value1($127));
                  })(k(v.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 151, column 10 - line 153, column 37: " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  exports["liftF"] = liftF;
  exports["foldFree"] = foldFree;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeApply"] = freeApply;
  exports["freeMonad"] = freeMonad;
})(PS["Control.Monad.Free"] = PS["Control.Monad.Free"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Exists = PS["Data.Exists"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var CoyonedaF = (function () {
      function CoyonedaF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CoyonedaF.create = function (value0) {
          return function (value1) {
              return new CoyonedaF(value0, value1);
          };
      };
      return CoyonedaF;
  })();
  var Coyoneda = function (x) {
      return x;
  };
  var unCoyoneda = function (f) {
      return function (v) {
          return Data_Exists.runExists(function (v1) {
              return f(v1.value0)(v1.value1);
          })(v);
      };
  };
  var coyoneda = function (k) {
      return function (fi) {
          return Coyoneda(Data_Exists.mkExists(new CoyonedaF(k, fi)));
      };
  };
  exports["Coyoneda"] = Coyoneda;
  exports["coyoneda"] = coyoneda;
  exports["unCoyoneda"] = unCoyoneda;
})(PS["Data.Coyoneda"] = PS["Data.Coyoneda"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Exists = PS["Data.Exists"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Bound = (function () {
      function Bound(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bound.create = function (value0) {
          return function (value1) {
              return new Bound(value0, value1);
          };
      };
      return Bound;
  })();
  var FreeT = (function () {
      function FreeT(value0) {
          this.value0 = value0;
      };
      FreeT.create = function (value0) {
          return new FreeT(value0);
      };
      return FreeT;
  })();
  var Bind = (function () {
      function Bind(value0) {
          this.value0 = value0;
      };
      Bind.create = function (value0) {
          return new Bind(value0);
      };
      return Bind;
  })();
  var monadTransFreeT = function (dictFunctor) {
      return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
          return function (ma) {
              return new FreeT(function (v) {
                  return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Either.Left.create)(ma);
              });
          };
      });
  };
  var freeT = FreeT.create;
  var bound = function (m) {
      return function (f) {
          return new Bind(Data_Exists.mkExists(new Bound(m, f)));
      };
  };
  var functorFreeT = function (dictFunctor) {
      return function (dictFunctor1) {
          return new Data_Functor.Functor(function (f) {
              return function (v) {
                  if (v instanceof FreeT) {
                      return new FreeT(function (v1) {
                          return Data_Functor.map(dictFunctor1)(Data_Bifunctor.bimap(Data_Either.bifunctorEither)(f)(Data_Functor.map(dictFunctor)(Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f))))(v.value0(Data_Unit.unit));
                      });
                  };
                  if (v instanceof Bind) {
                      return Data_Exists.runExists(function (v1) {
                          return bound(v1.value0)(function ($104) {
                              return Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f)(v1.value1($104));
                          });
                      })(v.value0);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans line 58, column 1 - line 58, column 71: " + [ f.constructor.name, v.constructor.name ]);
              };
          });
      };
  };
  var monadFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Monad.Monad(function () {
              return applicativeFreeT(dictFunctor)(dictMonad);
          }, function () {
              return bindFreeT(dictFunctor)(dictMonad);
          });
      };
  };
  var bindFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Bind.Bind(function () {
              return applyFreeT(dictFunctor)(dictMonad);
          }, function (v) {
              return function (f) {
                  if (v instanceof Bind) {
                      return Data_Exists.runExists(function (v1) {
                          return bound(v1.value0)(function (x) {
                              return bound(function (v2) {
                                  return v1.value1(x);
                              })(f);
                          });
                      })(v.value0);
                  };
                  return bound(function (v1) {
                      return v;
                  })(f);
              };
          });
      };
  };
  var applyFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Apply.Apply(function () {
              return functorFreeT(dictFunctor)(((dictMonad.Bind1()).Apply0()).Functor0());
          }, Control_Monad.ap(monadFreeT(dictFunctor)(dictMonad)));
      };
  };
  var applicativeFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Applicative.Applicative(function () {
              return applyFreeT(dictFunctor)(dictMonad);
          }, function (a) {
              return new FreeT(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(a));
              });
          });
      };
  };
  var liftFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return function (fa) {
              return new FreeT(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(Data_Functor.map(dictFunctor)(Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad)))(fa)));
              });
          };
      };
  };
  var resume = function (dictFunctor) {
      return function (dictMonadRec) {
          var go = function (v) {
              if (v instanceof FreeT) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(v.value0(Data_Unit.unit));
              };
              if (v instanceof Bind) {
                  return Data_Exists.runExists(function (v1) {
                      var v2 = v1.value0(Data_Unit.unit);
                      if (v2 instanceof FreeT) {
                          return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v2.value0(Data_Unit.unit))(function (v3) {
                              if (v3 instanceof Data_Either.Left) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(v1.value1(v3.value0)));
                              };
                              if (v3 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(new Data_Either.Right(Data_Functor.map(dictFunctor)(function (h) {
                                      return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(h)(v1.value1);
                                  })(v3.value0))));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Free.Trans line 53, column 20 - line 55, column 67: " + [ v3.constructor.name ]);
                          });
                      };
                      if (v2 instanceof Bind) {
                          return Data_Exists.runExists(function (v3) {
                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value0(Data_Unit.unit))(function (z) {
                                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value1(z))(v1.value1);
                              })));
                          })(v2.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans line 51, column 5 - line 56, column 98: " + [ v2.constructor.name ]);
                  })(v.value0);
              };
              throw new Error("Failed pattern match at Control.Monad.Free.Trans line 48, column 3 - line 48, column 75: " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  var runFreeT = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (interp) {
              var go = function (v) {
                  if (v instanceof Data_Either.Left) {
                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(v.value0));
                  };
                  if (v instanceof Data_Either.Right) {
                      return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(interp(v.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans line 127, column 3 - line 127, column 63: " + [ v.constructor.name ]);
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(Control_Bind.composeKleisliFlipped((dictMonadRec.Monad0()).Bind1())(go)(resume(dictFunctor)(dictMonadRec)));
          };
      };
  };
  var monadRecFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadFreeT(dictFunctor)(dictMonad);
          }, function (f) {
              var go = function (s) {
                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonad))(f(s))(function (v) {
                      if (v instanceof Control_Monad_Rec_Class.Loop) {
                          return go(v.value0);
                      };
                      if (v instanceof Control_Monad_Rec_Class.Done) {
                          return Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(v.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans line 81, column 15 - line 83, column 25: " + [ v.constructor.name ]);
                  });
              };
              return go;
          });
      };
  };
  exports["freeT"] = freeT;
  exports["liftFreeT"] = liftFreeT;
  exports["resume"] = resume;
  exports["runFreeT"] = runFreeT;
  exports["functorFreeT"] = functorFreeT;
  exports["applyFreeT"] = applyFreeT;
  exports["applicativeFreeT"] = applicativeFreeT;
  exports["bindFreeT"] = bindFreeT;
  exports["monadFreeT"] = monadFreeT;
  exports["monadTransFreeT"] = monadTransFreeT;
  exports["monadRecFreeT"] = monadRecFreeT;
})(PS["Control.Monad.Free.Trans"] = PS["Control.Monad.Free.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];        
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  var rmap = function (dictProfunctor) {
      return function (b2c) {
          return dimap(dictProfunctor)(Control_Category.id(Control_Category.categoryFn))(b2c);
      };
  };
  exports["dimap"] = dimap;
  exports["Profunctor"] = Profunctor;
  exports["rmap"] = rmap;
  exports["profunctorFn"] = profunctorFn;
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Emit = (function () {
      function Emit(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Emit.create = function (value0) {
          return function (value1) {
              return new Emit(value0, value1);
          };
      };
      return Emit;
  })();
  var runProcess = function (dictMonadRec) {
      return Control_Monad_Free_Trans.runFreeT(Data_Identity.functorIdentity)(dictMonadRec)(function ($186) {
          return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($186));
      });
  };
  var profunctorAwait = new Data_Profunctor.Profunctor(function (f) {
      return function (g) {
          return function (v) {
              return Data_Profunctor.dimap(Data_Profunctor.profunctorFn)(f)(g)(v);
          };
      };
  });
  var loop = function (dictFunctor) {
      return function (dictMonad) {
          return function (me) {
              return Control_Monad_Rec_Class.tailRecM(Control_Monad_Free_Trans.monadRecFreeT(dictFunctor)(dictMonad))(function (v) {
                  return Data_Functor.map(Control_Monad_Free_Trans.functorFreeT(dictFunctor)(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.maybe(new Control_Monad_Rec_Class.Loop(Data_Unit.unit))(Control_Monad_Rec_Class.Done.create))(me);
              })(Data_Unit.unit);
          };
      };
  };
  var fuseWithL = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictFunctor2) {
              return function (dictMonadRec) {
                  return function (zap) {
                      return function (fs) {
                          return function (gs) {
                              var go = function (v) {
                                  return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(dictMonadRec.Monad0()))(Control_Monad_Except_Trans.ExceptT(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0)))(function (v1) {
                                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(dictMonadRec.Monad0()))(Control_Monad_Except_Trans.ExceptT(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1)))(function (v2) {
                                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonadRec.Monad0()))(Data_Functor.map(dictFunctor2)(function (t) {
                                              return Control_Monad_Free_Trans.freeT(function (v3) {
                                                  return go(t);
                                              });
                                          })(zap(Data_Tuple.Tuple.create)(v1)(v2)));
                                      });
                                  }));
                              };
                              return Control_Monad_Free_Trans.freeT(function (v) {
                                  return go(new Data_Tuple.Tuple(fs, gs));
                              });
                          };
                      };
                  };
              };
          };
      };
  };
  var fuseWith = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictFunctor2) {
              return function (dictMonadRec) {
                  return function (dictParallel) {
                      return function (zap) {
                          return function (fs) {
                              return function (gs) {
                                  var go = function (v) {
                                      return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Parallel_Class.sequential(dictParallel)(Control_Apply.apply((dictParallel.Applicative1()).Apply0())(Data_Functor.map(((dictParallel.Applicative1()).Apply0()).Functor0())(Control_Apply.lift2(Data_Either.applyEither)(zap(Data_Tuple.Tuple.create)))(Control_Parallel_Class.parallel(dictParallel)(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0))))(Control_Parallel_Class.parallel(dictParallel)(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1)))))(function (v1) {
                                          if (v1 instanceof Data_Either.Left) {
                                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Data_Either.Left(v1.value0));
                                          };
                                          if (v1 instanceof Data_Either.Right) {
                                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Data_Either.Right(Data_Functor.map(dictFunctor2)(function (t) {
                                                  return Control_Monad_Free_Trans.freeT(function (v2) {
                                                      return go(t);
                                                  });
                                              })(v1.value0)));
                                          };
                                          throw new Error("Failed pattern match at Control.Coroutine line 80, column 5 - line 82, column 63: " + [ v1.constructor.name ]);
                                      });
                                  };
                                  return Control_Monad_Free_Trans.freeT(function (v) {
                                      return go(new Data_Tuple.Tuple(fs, gs));
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var functorAwait = new Data_Functor.Functor(Data_Profunctor.rmap(profunctorAwait));
  var bifunctorEmit = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Emit(f(v.value0), g(v.value1));
          };
      };
  });
  var functorEmit = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorEmit));
  var connect = function (dictMonadRec) {
      return function (dictParallel) {
          return fuseWith(functorEmit)(functorAwait)(Data_Identity.functorIdentity)(dictMonadRec)(dictParallel)(function (f) {
              return function (v) {
                  return function (v1) {
                      return f(v.value1)(v1(v.value0));
                  };
              };
          });
      };
  };
  var emit = function (dictMonad) {
      return function (o) {
          return Control_Monad_Free_Trans.liftFreeT(functorEmit)(dictMonad)(new Emit(o, Data_Unit.unit));
      };
  };
  var producer = function (dictMonad) {
      return function (recv) {
          return loop(functorEmit)(dictMonad)(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(functorEmit)(dictMonad))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(functorEmit))(dictMonad)(recv))(function (v) {
              if (v instanceof Data_Either.Left) {
                  return Data_Functor.voidLeft(Control_Monad_Free_Trans.functorFreeT(functorEmit)(((dictMonad.Bind1()).Apply0()).Functor0()))(emit(dictMonad)(v.value0))(Data_Maybe.Nothing.value);
              };
              if (v instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(functorEmit)(dictMonad))(new Data_Maybe.Just(v.value0));
              };
              throw new Error("Failed pattern match at Control.Coroutine line 126, column 3 - line 128, column 29: " + [ v.constructor.name ]);
          }));
      };
  };
  var pullFrom = function (dictMonadRec) {
      return fuseWithL(functorAwait)(functorEmit)(Data_Identity.functorIdentity)(dictMonadRec)(function (f) {
          return function (v) {
              return function (v1) {
                  return Control_Applicative.pure(Data_Identity.applicativeIdentity)(f(v(v1.value0))(v1.value1));
              };
          };
      });
  };
  var $$await = function (dictMonad) {
      return Control_Monad_Free_Trans.liftFreeT(functorAwait)(dictMonad)(Control_Category.id(Control_Category.categoryFn));
  };
  var consumer = function (dictMonad) {
      return function (send) {
          return loop(functorAwait)(dictMonad)(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(functorAwait)(dictMonad))($$await(dictMonad))(function (v) {
              return Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(functorAwait))(dictMonad)(send(v));
          }));
      };
  };
  exports["loop"] = loop;
  exports["runProcess"] = runProcess;
  exports["fuseWith"] = fuseWith;
  exports["fuseWithL"] = fuseWithL;
  exports["Emit"] = Emit;
  exports["emit"] = emit;
  exports["producer"] = producer;
  exports["await"] = $$await;
  exports["consumer"] = consumer;
  exports["connect"] = connect;
  exports["pullFrom"] = pullFrom;
  exports["bifunctorEmit"] = bifunctorEmit;
  exports["functorEmit"] = functorEmit;
  exports["profunctorAwait"] = profunctorAwait;
  exports["functorAwait"] = functorAwait;
})(PS["Control.Coroutine"] = PS["Control.Coroutine"] || {});
(function(exports) {
  /* globals exports, setTimeout */
  /* jshint -W097 */

  "use strict";

  var AVar = function () {
    function MutableQueue () {
      this.head = null;
      this.last = null;
      this.size = 0;
    }

    function MutableCell (queue, value) {
      this.queue = queue;
      this.value = value;
      this.next  = null;
      this.prev  = null;
    }

    function AVar (value) {
      this.draining = false;
      this.error    = null;
      this.value    = value;
      this.takes    = new MutableQueue();
      this.reads    = new MutableQueue();
      this.puts     = new MutableQueue();
    }

    var EMPTY = {};

    function putLast (queue, value) {
      var cell = new MutableCell(queue, value);
      switch (queue.size) {
      case 0:
        queue.head = cell;
        break;
      case 1:
        cell.prev = queue.head;
        queue.head.next = cell;
        queue.last = cell;
        break;
      default:
        cell.prev = queue.last;
        queue.last.next = cell;
        queue.last = cell;
      }
      queue.size++;
      return cell;
    }

    function takeLast (queue) {
      var cell;
      switch (queue.size) {
      case 0:
        return null;
      case 1:
        cell = queue.head;
        queue.head = null;
        break;
      case 2:
        cell = queue.last;
        queue.head.next = null;
        queue.last = null;
        break;
      default:
        cell = queue.last;
        queue.last = cell.prev;
        queue.last.next = null;
      }
      cell.prev = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }

    function takeHead (queue) {
      var cell;
      switch (queue.size) {
      case 0:
        return null;
      case 1:
        cell = queue.head;
        queue.head = null;
        break;
      case 2:
        cell = queue.head;
        queue.last.prev = null;
        queue.head = queue.last;
        queue.last = null;
        break;
      default:
        cell = queue.head;
        queue.head = cell.next;
        queue.head.prev = null;
      }
      cell.next = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }

    function deleteCell (cell) {
      if (cell.queue === null) {
        return;
      }
      if (cell.queue.last === cell) {
        takeLast(cell.queue);
        return;
      }
      if (cell.queue.head === cell) {
        takeHead(cell.queue);
        return;
      }
      if (cell.prev) {
        cell.prev.next = cell.next;
      }
      if (cell.next) {
        cell.next.prev = cell.prev;
      }
      cell.queue.size--;
      cell.queue = null;
      cell.value = null;
      cell.next  = null;
      cell.prev  = null;
    }

    function drainVar (util, avar) {
      if (avar.draining) {
        return;
      }

      var ps = avar.puts;
      var ts = avar.takes;
      var rs = avar.reads;
      var p, r, t, value, rsize;

      avar.draining = true;

      /* jshint -W084 */
      while (1) {
        p = null;
        r = null;
        t = null;
        value = avar.value;
        rsize = rs.size;

        if (avar.error !== null) {
          value = util.left(avar.error);
          while (p = takeHead(ps)) {
            runEff(p.cb(value));
          }
          while (r = takeHead(rs)) {
            runEff(r(value));
          }
          while (t = takeHead(ts)) {
            runEff(t(value));
          }
          break;
        }

        // Process the next put. We do not immediately invoke the callback
        // because we want to preserve ordering. If there are takes/reads
        // we want to run those first.
        if (value === EMPTY && (p = takeHead(ps))) {
          avar.value = value = p.value;
        }

        if (value !== EMPTY) {
          // We go ahead and queue up the next take for the same reasons as
          // above. Invoking the read callbacks can affect the mutable queue.
          t = takeHead(ts);
          // We only want to process the reads queued up before running these
          // callbacks so we guard on rsize.
          while (rsize-- && (r = takeHead(rs))) {
            runEff(r(util.right(value)));
          }
          if (t !== null) {
            avar.value = EMPTY;
            runEff(t(util.right(value)));
          }
        }

        if (p !== null) {
          runEff(p.cb(util.right(void 0)));
        }

        // Callbacks could have queued up more items so we need to guard on the
        // actual mutable properties.
        if (avar.value === EMPTY && ps.size === 0 || avar.value !== EMPTY && ts.size === 0) {
          break;
        }
      }
      /* jshint +W084 */

      avar.draining = false;
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    AVar.EMPTY      = EMPTY;
    AVar.putLast    = putLast;
    AVar.takeLast   = takeLast;
    AVar.takeHead   = takeHead;
    AVar.deleteCell = deleteCell;
    AVar.drainVar   = drainVar;

    return AVar;
  }();

  exports.makeEmptyVar = function () {
    return new AVar(AVar.EMPTY);
  };

  exports._killVar = function (util, error, avar) {
    return function () {
      if (avar.error === null) {
        avar.error = error;
        avar.value = AVar.EMPTY;
        AVar.drainVar(util, avar);
      }
    };
  };

  exports._putVar = function (util, value, avar, cb) {
    return function () {
      var cell = AVar.putLast(avar.puts, { cb: cb, value: value });
      AVar.drainVar(util, avar);
      return function () {
        AVar.deleteCell(cell);
      };
    };
  };

  exports._takeVar = function (util, avar, cb) {
    return function () {
      var cell = AVar.putLast(avar.takes, cb);
      AVar.drainVar(util, avar);
      return function () {
        AVar.deleteCell(cell);
      };
    };
  };
})(PS["Control.Monad.Eff.AVar"] = PS["Control.Monad.Eff.AVar"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.AVar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];        
  var Killed = (function () {
      function Killed(value0) {
          this.value0 = value0;
      };
      Killed.create = function (value0) {
          return new Killed(value0);
      };
      return Killed;
  })();
  var Filled = (function () {
      function Filled(value0) {
          this.value0 = value0;
      };
      Filled.create = function (value0) {
          return new Filled(value0);
      };
      return Filled;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var ffiUtil = {
      left: Data_Either.Left.create,
      right: Data_Either.Right.create,
      nothing: Data_Maybe.Nothing.value,
      just: Data_Maybe.Just.create,
      killed: Killed.create,
      filled: Filled.create,
      empty: Empty.value
  };
  var killVar = function (err) {
      return function (avar) {
          return $foreign._killVar(ffiUtil, err, avar);
      };
  };
  var putVar = function (value) {
      return function (avar) {
          return function (cb) {
              return $foreign._putVar(ffiUtil, value, avar, cb);
          };
      };
  };
  var takeVar = function (avar) {
      return function (cb) {
          return $foreign._takeVar(ffiUtil, avar, cb);
      };
  };
  exports["Killed"] = Killed;
  exports["Filled"] = Filled;
  exports["Empty"] = Empty;
  exports["takeVar"] = takeVar;
  exports["putVar"] = putVar;
  exports["killVar"] = killVar;
  exports["makeEmptyVar"] = $foreign.makeEmptyVar;
})(PS["Control.Monad.Eff.AVar"] = PS["Control.Monad.Eff.AVar"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_AVar = PS["Control.Monad.Eff.AVar"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  var takeVar = function (avar) {
      return Control_Monad_Aff.makeAff(function (k) {
          return function __do() {
              var v = Control_Monad_Eff_AVar.takeVar(avar)(k)();
              return Control_Monad_Aff.effCanceler(v);
          };
      });
  };
  var putVar = function (value) {
      return function (avar) {
          return Control_Monad_Aff.makeAff(function (k) {
              return function __do() {
                  var v = Control_Monad_Eff_AVar.putVar(value)(avar)(k)();
                  return Control_Monad_Aff.effCanceler(v);
              };
          });
      };
  };
  var makeEmptyVar = Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_AVar.makeEmptyVar);
  var killVar = function (error) {
      return function ($11) {
          return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_AVar.killVar(error)($11));
      };
  };
  exports["makeEmptyVar"] = makeEmptyVar;
  exports["takeVar"] = takeVar;
  exports["putVar"] = putVar;
  exports["killVar"] = killVar;
})(PS["Control.Monad.Aff.AVar"] = PS["Control.Monad.Aff.AVar"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Listening = (function () {
      function Listening() {

      };
      Listening.value = new Listening();
      return Listening;
  })();
  var Done = (function () {
      function Done() {

      };
      Done.value = new Done();
      return Done;
  })();
  var unEventSource = function (v) {
      return v;
  };
  var eqSubscribeStatus = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Listening && y instanceof Listening) {
              return true;
          };
          if (x instanceof Done && y instanceof Done) {
              return true;
          };
          return false;
      };
  });
  exports["Listening"] = Listening;
  exports["Done"] = Done;
  exports["unEventSource"] = unEventSource;
  exports["eqSubscribeStatus"] = eqSubscribeStatus;
})(PS["Halogen.Query.EventSource"] = PS["Halogen.Query.EventSource"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var unFork = Unsafe_Coerce.unsafeCoerce;
  exports["unFork"] = unFork;
})(PS["Halogen.Query.ForkF"] = PS["Halogen.Query.ForkF"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Applicative_Free = PS["Control.Applicative.Free"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Coyoneda = PS["Data.Coyoneda"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen_Query_EventSource = PS["Halogen.Query.EventSource"];
  var Halogen_Query_ForkF = PS["Halogen.Query.ForkF"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Prelude = PS["Prelude"];
  var HalogenM = function (x) {
      return x;
  };
  var State = (function () {
      function State(value0) {
          this.value0 = value0;
      };
      State.create = function (value0) {
          return new State(value0);
      };
      return State;
  })();
  var Subscribe = (function () {
      function Subscribe(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Subscribe.create = function (value0) {
          return function (value1) {
              return new Subscribe(value0, value1);
          };
      };
      return Subscribe;
  })();
  var Lift = (function () {
      function Lift(value0) {
          this.value0 = value0;
      };
      Lift.create = function (value0) {
          return new Lift(value0);
      };
      return Lift;
  })();
  var Halt = (function () {
      function Halt(value0) {
          this.value0 = value0;
      };
      Halt.create = function (value0) {
          return new Halt(value0);
      };
      return Halt;
  })();
  var GetSlots = (function () {
      function GetSlots(value0) {
          this.value0 = value0;
      };
      GetSlots.create = function (value0) {
          return new GetSlots(value0);
      };
      return GetSlots;
  })();
  var CheckSlot = (function () {
      function CheckSlot(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CheckSlot.create = function (value0) {
          return function (value1) {
              return new CheckSlot(value0, value1);
          };
      };
      return CheckSlot;
  })();
  var ChildQuery = (function () {
      function ChildQuery(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ChildQuery.create = function (value0) {
          return function (value1) {
              return new ChildQuery(value0, value1);
          };
      };
      return ChildQuery;
  })();
  var Raise = (function () {
      function Raise(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Raise.create = function (value0) {
          return function (value1) {
              return new Raise(value0, value1);
          };
      };
      return Raise;
  })();
  var Par = (function () {
      function Par(value0) {
          this.value0 = value0;
      };
      Par.create = function (value0) {
          return new Par(value0);
      };
      return Par;
  })();
  var Fork = (function () {
      function Fork(value0) {
          this.value0 = value0;
      };
      Fork.create = function (value0) {
          return new Fork(value0);
      };
      return Fork;
  })();
  var GetRef = (function () {
      function GetRef(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GetRef.create = function (value0) {
          return function (value1) {
              return new GetRef(value0, value1);
          };
      };
      return GetRef;
  })();
  var raise = function (o) {
      return HalogenM(Control_Monad_Free.liftF(new Raise(o, Data_Unit.unit)));
  }; 
  var mkQuery = function (dictEq) {
      return function (p) {
          return function ($176) {
              return HalogenM(Control_Monad_Free.liftF(ChildQuery.create(p)(Data_Coyoneda.coyoneda(Control_Category.id(Control_Category.categoryFn))($176))));
          };
      };
  };
  var functorHalogenM = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Data_Functor.map(Control_Monad_Free.freeFunctor)(f)(v);
      };
  });
  var checkSlot = function (p) {
      return HalogenM(Control_Monad_Free.liftF(new CheckSlot(p, Control_Category.id(Control_Category.categoryFn))));
  };
  var applyHalogenM = new Control_Apply.Apply(function () {
      return functorHalogenM;
  }, function (v) {
      return function (v1) {
          return Control_Apply.apply(Control_Monad_Free.freeApply)(v)(v1);
      };
  });
  var bindHalogenM = new Control_Bind.Bind(function () {
      return applyHalogenM;
  }, function (v) {
      return function (f) {
          return Control_Bind.bind(Control_Monad_Free.freeBind)(v)(function (x) {
              var v1 = f(x);
              return v1;
          });
      };
  });                                                       
  var applicativeHalogenM = new Control_Applicative.Applicative(function () {
      return applyHalogenM;
  }, function (a) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(a);
  });
  var monadHalogenM = new Control_Monad.Monad(function () {
      return applicativeHalogenM;
  }, function () {
      return bindHalogenM;
  });
  var monadEffHalogenM = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadHalogenM;
      }, function (eff) {
          return HalogenM(Control_Monad_Free.liftF(Lift.create(Control_Monad_Eff_Class.liftEff(dictMonadEff)(eff))));
      });
  };
  var monadAffHalogenM = function (dictMonadAff) {
      return new Control_Monad_Aff_Class.MonadAff(function () {
          return monadEffHalogenM(dictMonadAff.MonadEff0());
      }, function (aff) {
          return HalogenM(Control_Monad_Free.liftF(Lift.create(Control_Monad_Aff_Class.liftAff(dictMonadAff)(aff))));
      });
  };
  var monadStateHalogenM = new Control_Monad_State_Class.MonadState(function () {
      return monadHalogenM;
  }, function ($180) {
      return HalogenM(Control_Monad_Free.liftF(State.create($180)));
  });
  exports["State"] = State;
  exports["Subscribe"] = Subscribe;
  exports["Lift"] = Lift;
  exports["Halt"] = Halt;
  exports["GetSlots"] = GetSlots;
  exports["CheckSlot"] = CheckSlot;
  exports["ChildQuery"] = ChildQuery;
  exports["Raise"] = Raise;
  exports["Par"] = Par;
  exports["Fork"] = Fork;
  exports["GetRef"] = GetRef;
  exports["HalogenM"] = HalogenM;
  exports["mkQuery"] = mkQuery;
  exports["checkSlot"] = checkSlot;
  exports["raise"] = raise;
  exports["functorHalogenM"] = functorHalogenM;
  exports["applyHalogenM"] = applyHalogenM;
  exports["applicativeHalogenM"] = applicativeHalogenM;
  exports["bindHalogenM"] = bindHalogenM;
  exports["monadHalogenM"] = monadHalogenM;
  exports["monadEffHalogenM"] = monadEffHalogenM;
  exports["monadAffHalogenM"] = monadAffHalogenM;
  exports["monadStateHalogenM"] = monadStateHalogenM;
})(PS["Halogen.Query.HalogenM"] = PS["Halogen.Query.HalogenM"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Const = PS["Data.Const"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Halogen_Data_OrdBox = PS["Halogen.Data.OrdBox"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var ComponentSlot = (function () {
      function ComponentSlot(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ComponentSlot.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ComponentSlot(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ComponentSlot;
  })();
  var unComponentSlot = function (f) {
      return function (cs) {
          return f(cs.value0)(cs.value1)(cs.value2)(cs.value3)(cs.value4)(cs.value5);
      };
  };
  var unComponent = Unsafe_Coerce.unsafeCoerce;
  var mkComponentSlot = ComponentSlot.create;
  var mkComponent = Unsafe_Coerce.unsafeCoerce;
  var parentComponent = function (dictOrd) {
      return function (spec) {
          return mkComponent({
              initialState: spec.initialState,
              render: spec.render,
              "eval": spec["eval"],
              receiver: spec.receiver,
              initializer: Data_Maybe.Nothing.value,
              finalizer: Data_Maybe.Nothing.value,
              mkOrdBox: Halogen_Data_OrdBox.mkOrdBox(dictOrd)
          });
      };
  };
  var lifecycleComponent = function (dictBifunctor) {
      return function (spec) {
          return mkComponent({
              initialState: spec.initialState,
              render: spec.render,
              "eval": spec["eval"],
              receiver: spec.receiver,
              initializer: spec.initializer,
              finalizer: spec.finalizer,
              mkOrdBox: Halogen_Data_OrdBox.mkOrdBox(Data_Ord.ordVoid)
          });
      };
  }; 
  var component = function (dictBifunctor) {
      return function (spec) {
          return lifecycleComponent(dictBifunctor)({
              initialState: spec.initialState,
              render: spec.render,
              "eval": spec["eval"],
              receiver: spec.receiver,
              initializer: Data_Maybe.Nothing.value,
              finalizer: Data_Maybe.Nothing.value
          });
      };
  };
  exports["mkComponent"] = mkComponent;
  exports["unComponent"] = unComponent;
  exports["component"] = component;
  exports["lifecycleComponent"] = lifecycleComponent;
  exports["parentComponent"] = parentComponent;
  exports["mkComponentSlot"] = mkComponentSlot;
  exports["unComponentSlot"] = unComponentSlot;
})(PS["Halogen.Component"] = PS["Halogen.Component"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_HTML_Indexed = PS["DOM.HTML.Indexed"];
  var DOM_HTML_Indexed_ButtonType = PS["DOM.HTML.Indexed.ButtonType"];
  var DOM_HTML_Indexed_FormMethod = PS["DOM.HTML.Indexed.FormMethod"];
  var DOM_HTML_Indexed_InputType = PS["DOM.HTML.Indexed.InputType"];
  var DOM_HTML_Indexed_MenuType = PS["DOM.HTML.Indexed.MenuType"];
  var DOM_HTML_Indexed_MenuitemType = PS["DOM.HTML.Indexed.MenuitemType"];
  var DOM_HTML_Indexed_OnOff = PS["DOM.HTML.Indexed.OnOff"];
  var DOM_HTML_Indexed_OrderedListType = PS["DOM.HTML.Indexed.OrderedListType"];
  var DOM_HTML_Indexed_PreloadValue = PS["DOM.HTML.Indexed.PreloadValue"];
  var DOM_HTML_Indexed_StepValue = PS["DOM.HTML.Indexed.StepValue"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_String = PS["Data.String"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Halogen_VDom_DOM_Prop = PS["Halogen.VDom.DOM.Prop"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var prop = function (dictIsProp) {
      return Halogen_HTML_Core.prop(dictIsProp);
  };                                                    
  var required = prop(Halogen_HTML_Core.booleanIsProp)("required");    
  var src = prop(Halogen_HTML_Core.stringIsProp)("src");    
  var type_ = function (dictIsProp) {
      return prop(dictIsProp)("type");
  };
  var value = prop(Halogen_HTML_Core.stringIsProp)("value");  
  var placeholder = prop(Halogen_HTML_Core.stringIsProp)("placeholder");
  var name = prop(Halogen_HTML_Core.stringIsProp)("name");
  var method = prop(Halogen_HTML_Core.formMethodIsProp)("method");
  var id_ = prop(Halogen_HTML_Core.stringIsProp)("id");
  var href = prop(Halogen_HTML_Core.stringIsProp)("href");
  var class_ = function ($13) {
      return prop(Halogen_HTML_Core.stringIsProp)("className")(Data_Newtype.unwrap(Halogen_HTML_Core.newtypeClassName)($13));
  };                                                               
  var autofocus = prop(Halogen_HTML_Core.booleanIsProp)("autofocus");
  var attr = Halogen_HTML_Core.attr(Data_Maybe.Nothing.value);
  var action = prop(Halogen_HTML_Core.stringIsProp)("action");
  exports["prop"] = prop;
  exports["attr"] = attr;
  exports["class_"] = class_;
  exports["href"] = href;
  exports["id_"] = id_;
  exports["name"] = name;
  exports["src"] = src;
  exports["method"] = method;
  exports["action"] = action;
  exports["type_"] = type_;
  exports["value"] = value;
  exports["required"] = required;
  exports["placeholder"] = placeholder;
  exports["autofocus"] = autofocus;
})(PS["Halogen.HTML.Properties"] = PS["Halogen.HTML.Properties"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_HTML_Indexed = PS["DOM.HTML.Indexed"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Halogen_VDom = PS["Halogen.VDom"];
  var Halogen_VDom_Types = PS["Halogen.VDom.Types"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var element = Halogen_HTML_Core.element(Data_Maybe.Nothing.value);
  var em = element("em");
  var em_ = em([  ]);        
  var form = element("form");
  var h1 = element("h1");
  var h1_ = h1([  ]);
  var img = function (props) {
      return element("img")(props)([  ]);
  };
  var input = function (props) {
      return element("input")(props)([  ]);
  };                         
  var p = element("p");
  var p_ = p([  ]);
  var span = element("span");
  var span_ = span([  ]);
  var div = element("div");
  var div_ = div([  ]);
  var button = element("button");
  var br = function (props) {
      return element("br")(props)([  ]);
  };
  var br_ = br([  ]);
  var b = element("b");
  var b_ = b([  ]);      
  var a = element("a");
  exports["element"] = element;
  exports["a"] = a;
  exports["b"] = b;
  exports["b_"] = b_;
  exports["br"] = br;
  exports["br_"] = br_;
  exports["button"] = button;
  exports["div"] = div;
  exports["div_"] = div_;
  exports["em"] = em;
  exports["em_"] = em_;
  exports["form"] = form;
  exports["h1"] = h1;
  exports["h1_"] = h1_;
  exports["img"] = img;
  exports["input"] = input;
  exports["p"] = p;
  exports["p_"] = p_;
  exports["span"] = span;
  exports["span_"] = span_;
})(PS["Halogen.HTML.Elements"] = PS["Halogen.HTML.Elements"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_Component_ChildPath = PS["Halogen.Component.ChildPath"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var slot = function (p) {
      return function (component) {
          return function (input) {
              return function (outputQuery) {
                  var f = Halogen_Component.unComponent(function (v) {
                      return v.receiver;
                  })(component);
                  return Halogen_HTML_Core.slot(Halogen_Component.mkComponentSlot(p)(component)(input)(f)(outputQuery)(Data_Maybe.Just.create));
              };
          };
      };
  };
  exports["slot"] = slot;
})(PS["Halogen.HTML"] = PS["Halogen.HTML"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Operators = PS["Operators"];
  var Prelude = PS["Prelude"];
  var Structure = PS["Structure"];        
  var infoTrap = function (v) {
      var toEf = function (trigger) {
          return {
              effectDesc: trigger,
              effectHelpful: false,
              effectSticky: true,
              effectTrap: true
          };
      };
      return {
          name: v.trapL,
          desc: v.trapDesc,
          classes: v.trapClasses,
          dur: v.trapDur,
          root: v.trapSrc,
          src: v.trapSrc,
          effects: [ toEf(v.trapTrigger) ],
          trap: true,
          ghost: false
      };
  };
  var infoStatus = function (v) {
      return {
          name: v.statusL,
          desc: v.statusSkill.desc,
          classes: v.statusClasses,
          dur: v.statusDur,
          root: v.statusRoot,
          src: v.statusSrc,
          effects: v.statusEfs,
          trap: false,
          ghost: false
      };
  };
  var eqInfo = function (a) {
      return function (b) {
          return a.desc === b.desc && (Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(a.classes)(b.classes) && a.dur === b.dur);
      };
  };
  var concatInfo = function (v) {
      var xs$prime = Data_Array.cons(v.value0)(v.value1);
      return {
          name: v.value0.name,
          desc: v.value0.desc,
          classes: v.value0.classes,
          dur: v.value0.dur,
          root: v.value0.root,
          src: v.value0.src,
          effects: Data_Array.concatMap(function (v1) {
              return v1.effects;
          })(xs$prime),
          trap: Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v1) {
              return v1.trap;
          })(xs$prime),
          ghost: Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v1) {
              return v1.ghost;
          })(xs$prime)
      };
  };
  var infos = function (v) {
      var statuses = Data_Functor.map(Data_Functor.functorArray)(infoStatus)(v.nStatuses);
      var reduce = function (v1) {
          var v2 = Data_Foldable.find(Data_Foldable.foldableArray)(eqInfo(v1.value0))(statuses);
          if (v2 instanceof Data_Maybe.Just) {
              return new Data_NonEmpty.NonEmpty(v2.value0, Data_Array.cons(v1.value0)(v1.value1));
          };
          if (v2 instanceof Data_Maybe.Nothing) {
              return v1;
          };
          throw new Error("Failed pattern match at Info line 28, column 32 - line 30, column 28: " + [ v2.constructor.name ]);
      };
      var traps = Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Functor.functorFn)(concatInfo)(reduce))(Data_Array.groupBy(eqInfo)(Data_Functor.map(Data_Functor.functorArray)(infoTrap)(v.nTraps)));
      var statuses$prime = Data_Array.filter(function ($53) {
          return !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(eqInfo)(traps)($53);
      })(statuses);
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(statuses$prime)(traps);
  };
  exports["infos"] = infos;
})(PS["Info"] = PS["Info"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Memoize = PS["Data.Function.Memoize"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_String = PS["Data.String"];
  var Functions = PS["Functions"];
  var Halogen = PS["Halogen"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Info = PS["Info"];
  var Operators = PS["Operators"];
  var Prelude = PS["Prelude"];
  var Structure = PS["Structure"];        
  var ViewBarrier = (function () {
      function ViewBarrier(value0) {
          this.value0 = value0;
      };
      ViewBarrier.create = function (value0) {
          return new ViewBarrier(value0);
      };
      return ViewBarrier;
  })();
  var ViewCharacter = (function () {
      function ViewCharacter(value0) {
          this.value0 = value0;
      };
      ViewCharacter.create = function (value0) {
          return new ViewCharacter(value0);
      };
      return ViewCharacter;
  })();
  var ViewDefense = (function () {
      function ViewDefense(value0) {
          this.value0 = value0;
      };
      ViewDefense.create = function (value0) {
          return new ViewDefense(value0);
      };
      return ViewDefense;
  })();
  var ViewInfo = (function () {
      function ViewInfo(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ViewInfo.create = function (value0) {
          return function (value1) {
              return new ViewInfo(value0, value1);
          };
      };
      return ViewInfo;
  })();
  var ViewSkill = (function () {
      function ViewSkill(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ViewSkill.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ViewSkill(value0, value1, value2);
              };
          };
      };
      return ViewSkill;
  })();
  var ViewUser = (function () {
      function ViewUser(value0) {
          this.value0 = value0;
      };
      ViewUser.create = function (value0) {
          return new ViewUser(value0);
      };
      return ViewUser;
  })();
  var Quick = (function () {
      function Quick() {

      };
      Quick.value = new Quick();
      return Quick;
  })();
  var Practice = (function () {
      function Practice() {

      };
      Practice.value = new Practice();
      return Practice;
  })();
  var Private = (function () {
      function Private() {

      };
      Private.value = new Private();
      return Private;
  })();
  var NoPreview = (function () {
      function NoPreview() {

      };
      NoPreview.value = new NoPreview();
      return NoPreview;
  })();
  var PreviewUser = (function () {
      function PreviewUser() {

      };
      PreviewUser.value = new PreviewUser();
      return PreviewUser;
  })();
  var PreviewCharacter = (function () {
      function PreviewCharacter(value0) {
          this.value0 = value0;
      };
      PreviewCharacter.create = function (value0) {
          return new PreviewCharacter(value0);
      };
      return PreviewCharacter;
  })();
  var Add = (function () {
      function Add() {

      };
      Add.value = new Add();
      return Add;
  })();
  var Delete = (function () {
      function Delete() {

      };
      Delete.value = new Delete();
      return Delete;
  })();
  var Enact = (function () {
      function Enact(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Enact.create = function (value0) {
          return function (value1) {
              return new Enact(value0, value1);
          };
      };
      return Enact;
  })();
  var ExchangeBegin = (function () {
      function ExchangeBegin() {

      };
      ExchangeBegin.value = new ExchangeBegin();
      return ExchangeBegin;
  })();
  var ExchangeConclude = (function () {
      function ExchangeConclude(value0) {
          this.value0 = value0;
      };
      ExchangeConclude.create = function (value0) {
          return new ExchangeConclude(value0);
      };
      return ExchangeConclude;
  })();
  var ExchangeReset = (function () {
      function ExchangeReset() {

      };
      ExchangeReset.value = new ExchangeReset();
      return ExchangeReset;
  })();
  var Ready = (function () {
      function Ready(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ready.create = function (value0) {
          return function (value1) {
              return new Ready(value0, value1);
          };
      };
      return Ready;
  })();
  var ReceiveGame = (function () {
      function ReceiveGame(value0) {
          this.value0 = value0;
      };
      ReceiveGame.create = function (value0) {
          return new ReceiveGame(value0);
      };
      return ReceiveGame;
  })();
  var Spend = (function () {
      function Spend(value0) {
          this.value0 = value0;
      };
      Spend.create = function (value0) {
          return new Spend(value0);
      };
      return Spend;
  })();
  var Toggle = (function () {
      function Toggle(value0) {
          this.value0 = value0;
      };
      Toggle.create = function (value0) {
          return new Toggle(value0);
      };
      return Toggle;
  })();
  var Unhighlight = (function () {
      function Unhighlight() {

      };
      Unhighlight.value = new Unhighlight();
      return Unhighlight;
  })();
  var View = (function () {
      function View(value0) {
          this.value0 = value0;
      };
      View.create = function (value0) {
          return new View(value0);
      };
      return View;
  })();
  var SwitchLogin = (function () {
      function SwitchLogin() {

      };
      SwitchLogin.value = new SwitchLogin();
      return SwitchLogin;
  })();
  var Scroll = (function () {
      function Scroll(value0) {
          this.value0 = value0;
      };
      Scroll.create = function (value0) {
          return new Scroll(value0);
      };
      return Scroll;
  })();
  var Preview = (function () {
      function Preview(value0) {
          this.value0 = value0;
      };
      Preview.create = function (value0) {
          return new Preview(value0);
      };
      return Preview;
  })();
  var Team = (function () {
      function Team(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Team.create = function (value0) {
          return function (value1) {
              return new Team(value0, value1);
          };
      };
      return Team;
  })();
  var Enqueue = (function () {
      function Enqueue(value0) {
          this.value0 = value0;
      };
      Enqueue.create = function (value0) {
          return new Enqueue(value0);
      };
      return Enqueue;
  })();
  var Vary = (function () {
      function Vary(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Vary.create = function (value0) {
          return function (value1) {
              return new Vary(value0, value1);
          };
      };
      return Vary;
  })();
  var ChooseAvatar = (function () {
      function ChooseAvatar(value0) {
          this.value0 = value0;
      };
      ChooseAvatar.create = function (value0) {
          return new ChooseAvatar(value0);
      };
      return ChooseAvatar;
  })();
  var QuerySelect = (function () {
      function QuerySelect(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      QuerySelect.create = function (value0) {
          return function (value1) {
              return new QuerySelect(value0, value1);
          };
      };
      return QuerySelect;
  })();
  var QueryPlay = (function () {
      function QueryPlay(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      QueryPlay.create = function (value0) {
          return function (value1) {
              return new QueryPlay(value0, value1);
          };
      };
      return QueryPlay;
  })();
  var splitBy = function (p) {
      return function (s) {
          return Data_Maybe.fromMaybe({
              before: s,
              after: ""
          })(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_String.indexOf(p)(s))(function (v) {
              return Data_String.splitAt(v)(s);
          }));
      };
  };
  var cIcon = function (v) {
      var shorten$prime = function ($37) {
          return Functions.shorten(Data_String.takeWhile(function (v1) {
              return "(" !== v1;
          })($37));
      };
      return Data_Function_Memoize.memoize(Data_Function_Memoize.tabulateString)(function (a) {
          return Halogen_HTML_Properties.src("/img/ninja/" + (Functions.shorten(v.characterName) + ("/" + (shorten$prime(a) + ".jpg"))));
      });
  };
  var _txt = function ($38) {
      return (function (v) {
          return Data_Array.cons(v)([  ]);
      })(Halogen_HTML_Core.text($38));
  };
  var _style = Halogen_HTML_Properties.attr("style");
  var _src = Halogen_HTML_Properties.src;
  var _span = function ($39) {
      return Halogen_HTML_Elements.span_(_txt($39));
  };
  var _i = Halogen_HTML_Properties.id_;
  var _c = function ($40) {
      return Halogen_HTML_Properties.class_(Halogen_HTML_Core.ClassName($40));
  };
  var _minor = function ($41) {
      return Halogen_HTML_Elements.span([ _c("minor") ])(_txt($41));
  };
  var hCost = (function () {
      var hCost$prime = function (s) {
          return Halogen_HTML_Elements.div([ _c("chakra " + s) ])([  ]);
      };
      return Operators.multimap(Data_Functor.functorArray)(hCost$prime)(Functions.unχ);
  })();
  var parseDesc = (function () {
      var parseBefore$prime = function (str) {
          var v = splitBy("[")(str);
          return parseBefore(v.before)(Data_String.drop(1)(v.after));
      };
      var parseBefore = function (v) {
          return function (v1) {
              if (v === "" && v1 === "") {
                  return [  ];
              };
              if (v === "") {
                  return parseAfter$prime(v1);
              };
              if (v1 === "") {
                  return [ Halogen_HTML_Core.text(v) ];
              };
              return Data_Array.cons(Halogen_HTML_Core.text(v))(parseAfter$prime(v1));
          };
      };
      var parseAfter$prime = function (b) {
          var v = splitBy("]")(b);
          return parseAfter(v.before)(Data_String.drop(1)(v.after));
      };
      var parseAfter = function (v) {
          return function (v1) {
              if (v === "" && v1 === "") {
                  return [  ];
              };
              if (v === "") {
                  return parseAfter$prime(v1);
              };
              if (v1 === "") {
                  return [ Halogen_HTML_Core.text(v) ];
              };
              if (v === "b") {
                  return Data_Array.cons(Halogen_HTML_Elements.div([ _c("chakra blood") ])([  ]))(parseBefore$prime(v1));
              };
              if (v === "g") {
                  return Data_Array.cons(Halogen_HTML_Elements.div([ _c("chakra gen") ])([  ]))(parseBefore$prime(v1));
              };
              if (v === "n") {
                  return Data_Array.cons(Halogen_HTML_Elements.div([ _c("chakra nin") ])([  ]))(parseBefore$prime(v1));
              };
              if (v === "t") {
                  return Data_Array.cons(Halogen_HTML_Elements.div([ _c("chakra tai") ])([  ]))(parseBefore$prime(v1));
              };
              if (v === "r") {
                  return Data_Array.cons(Halogen_HTML_Elements.div([ _c("chakra rand") ])([  ]))(parseBefore$prime(v1));
              };
              return Data_Array.cons(Halogen_HTML_Elements.em_([ Halogen_HTML_Core.text(v) ]))(parseBefore$prime(v1));
          };
      };
      return Data_Function_Memoize.memoize(Data_Function_Memoize.tabulateString)(parseBefore$prime);
  })();
  var _b = function ($42) {
      return Halogen_HTML_Elements.b_(_txt($42));
  };
  var _a = function (id$prime) {
      return function (class$prime) {
          return function (href$prime) {
              return function ($43) {
                  return Halogen_HTML_Elements.a([ _i(id$prime), _c(class$prime), Halogen_HTML_Properties.href(href$prime) ])(_txt($43));
              };
          };
      };
  };
  exports["Add"] = Add;
  exports["Delete"] = Delete;
  exports["QuerySelect"] = QuerySelect;
  exports["QueryPlay"] = QueryPlay;
  exports["Quick"] = Quick;
  exports["Practice"] = Practice;
  exports["Private"] = Private;
  exports["SwitchLogin"] = SwitchLogin;
  exports["Scroll"] = Scroll;
  exports["Preview"] = Preview;
  exports["Team"] = Team;
  exports["Enqueue"] = Enqueue;
  exports["Vary"] = Vary;
  exports["ChooseAvatar"] = ChooseAvatar;
  exports["Enact"] = Enact;
  exports["ExchangeBegin"] = ExchangeBegin;
  exports["ExchangeConclude"] = ExchangeConclude;
  exports["ExchangeReset"] = ExchangeReset;
  exports["Ready"] = Ready;
  exports["ReceiveGame"] = ReceiveGame;
  exports["Spend"] = Spend;
  exports["Toggle"] = Toggle;
  exports["Unhighlight"] = Unhighlight;
  exports["View"] = View;
  exports["NoPreview"] = NoPreview;
  exports["PreviewUser"] = PreviewUser;
  exports["PreviewCharacter"] = PreviewCharacter;
  exports["ViewBarrier"] = ViewBarrier;
  exports["ViewCharacter"] = ViewCharacter;
  exports["ViewDefense"] = ViewDefense;
  exports["ViewInfo"] = ViewInfo;
  exports["ViewSkill"] = ViewSkill;
  exports["ViewUser"] = ViewUser;
  exports["hCost"] = hCost;
  exports["parseDesc"] = parseDesc;
  exports["cIcon"] = cIcon;
  exports["_a"] = _a;
  exports["_b"] = _b;
  exports["_c"] = _c;
  exports["_i"] = _i;
  exports["_span"] = _span;
  exports["_src"] = _src;
  exports["_style"] = _style;
  exports["_txt"] = _txt;
  exports["_minor"] = _minor;
})(PS["Component.Common"] = PS["Component.Common"] || {});
(function(exports) {
  // module FFI.Import

  "use strict";

  exports["bg"]       = bg;
  exports["userTeam"] = userTeam;
  exports["user'"]    = user;
  exports["avatars"]  = avatars;
  exports["cs'"]      = cs$prime;
  exports["hostname"] = document.URL.replace("http:", "ws:").replace("https:", "wss:");
})(PS["FFI.Import"] = PS["FFI.Import"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["FFI.Import"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Generic_Aeson = PS["Data.Argonaut.Generic.Aeson"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_StrMap = PS["Data.StrMap"];
  var Prelude = PS["Prelude"];
  var Structure = PS["Structure"];        
  var user = (function () {
      var parseUser = function (a) {
          var v = Data_Argonaut_Generic_Aeson.decodeJson(Structure.genericUser)(a);
          if (v instanceof Data_Either.Left) {
              return Data_Maybe.Nothing.value;
          };
          if (v instanceof Data_Either.Right) {
              return new Data_Maybe.Just(v.value0);
          };
          throw new Error("Failed pattern match at FFI.Import line 24, column 23 - line 26, column 40: " + [ v.constructor.name ]);
      };
      return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(parseUser)(Data_Nullable.toMaybe($foreign["user'"]));
  })();
  exports["user"] = user;
  exports["avatars"] = $foreign.avatars;
  exports["bg"] = $foreign.bg;
  exports["cs'"] = $foreign["cs'"];
  exports["hostname"] = $foreign.hostname;
  exports["userTeam"] = $foreign.userTeam;
})(PS["FFI.Import"] = PS["FFI.Import"] || {});
(function(exports) {
  // module FFI.Sound

  "use strict";

  var vol;

  exports["sfxRegister"] = function (show) {
    return function(sounds) {
      return function() {
        vol = document.getElementById("volume")
        vol.onclick = function () {
          var muted = this.className === "click muted"
          this.className = muted ? "click unmuted" : "click muted"
          if (muted) 
            createjs.Sound.play("SFXClick")
          if (user) {
            var xmlhttp = new XMLHttpRequest();
            xmlhttp.open("GET", "/api/mute/" + (muted ? "False" : "True"), true)
            xmlhttp.send()
          }
        }
        createjs.Sound.registerSounds(sounds.map(show).map(function(file) {
          return {src: file + ".ogg", id: file}
        }), "audio/") // TODO
      }
    }
  }

  exports["sfxPlay"] = function (show) {
    return function(sound) {
      return function() {
        if (vol && vol.className !== "click muted")
          createjs.Sound.play(show(sound))
      }
    }
  }
})(PS["FFI.Sound"] = PS["FFI.Sound"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];        
  var GenericShow = function (genericShow$prime) {
      this["genericShow'"] = genericShow$prime;
  };
  var GenericShowArgs = function (genericShowArgs) {
      this.genericShowArgs = genericShowArgs;
  };
  var genericShowArgsNoArguments = new GenericShowArgs(function (v) {
      return [  ];
  });
  var genericShowArgs = function (dict) {
      return dict.genericShowArgs;
  };
  var genericShowConstructor = function (dictGenericShowArgs) {
      return function (dictIsSymbol) {
          return new GenericShow(function (v) {
              var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var v1 = genericShowArgs(dictGenericShowArgs)(v);
              if (v1.length === 0) {
                  return ctor;
              };
              return "(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
          });
      };
  };
  var genericShow$prime = function (dict) {
      return dict["genericShow'"];
  }; 
  var genericShowSum = function (dictGenericShow) {
      return function (dictGenericShow1) {
          return new GenericShow(function (v) {
              if (v instanceof Data_Generic_Rep.Inl) {
                  return genericShow$prime(dictGenericShow)(v.value0);
              };
              if (v instanceof Data_Generic_Rep.Inr) {
                  return genericShow$prime(dictGenericShow1)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Generic.Rep.Show line 31, column 1 - line 31, column 83: " + [ v.constructor.name ]);
          });
      };
  };
  var genericShow = function (dictGeneric) {
      return function (dictGenericShow) {
          return function (x) {
              return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
          };
      };
  };
  exports["GenericShow"] = GenericShow;
  exports["genericShow"] = genericShow;
  exports["GenericShowArgs"] = GenericShowArgs;
  exports["genericShowArgs"] = genericShowArgs;
  exports["genericShowArgsNoArguments"] = genericShowArgsNoArguments;
  exports["genericShowSum"] = genericShowSum;
  exports["genericShowConstructor"] = genericShowConstructor;
})(PS["Data.Generic.Rep.Show"] = PS["Data.Generic.Rep.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["FFI.Sound"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Show = PS["Data.Generic.Rep.Show"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Halogen = PS["Halogen"];
  var Operators = PS["Operators"];
  var Prelude = PS["Prelude"];        
  var SFXApplySkill = (function () {
      function SFXApplySkill() {

      };
      SFXApplySkill.value = new SFXApplySkill();
      return SFXApplySkill;
  })();
  var SFXCancel = (function () {
      function SFXCancel() {

      };
      SFXCancel.value = new SFXCancel();
      return SFXCancel;
  })();
  var SFXClick = (function () {
      function SFXClick() {

      };
      SFXClick.value = new SFXClick();
      return SFXClick;
  })();
  var SFXDeath = (function () {
      function SFXDeath() {

      };
      SFXDeath.value = new SFXDeath();
      return SFXDeath;
  })();
  var SFXLose = (function () {
      function SFXLose() {

      };
      SFXLose.value = new SFXLose();
      return SFXLose;
  })();
  var SFXNextTurn = (function () {
      function SFXNextTurn() {

      };
      SFXNextTurn.value = new SFXNextTurn();
      return SFXNextTurn;
  })();
  var SFXScroll = (function () {
      function SFXScroll() {

      };
      SFXScroll.value = new SFXScroll();
      return SFXScroll;
  })();
  var SFXStartFirst = (function () {
      function SFXStartFirst() {

      };
      SFXStartFirst.value = new SFXStartFirst();
      return SFXStartFirst;
  })();
  var SFXStartTurn = (function () {
      function SFXStartTurn() {

      };
      SFXStartTurn.value = new SFXStartTurn();
      return SFXStartTurn;
  })();
  var SFXStartSecond = (function () {
      function SFXStartSecond() {

      };
      SFXStartSecond.value = new SFXStartSecond();
      return SFXStartSecond;
  })();
  var SFXTarget = (function () {
      function SFXTarget() {

      };
      SFXTarget.value = new SFXTarget();
      return SFXTarget;
  })();
  var SFXWin = (function () {
      function SFXWin() {

      };
      SFXWin.value = new SFXWin();
      return SFXWin;
  })();
  var genericSound = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof SFXApplySkill) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof SFXCancel) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
      };
      if (x instanceof SFXClick) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
      };
      if (x instanceof SFXDeath) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
      };
      if (x instanceof SFXLose) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))));
      };
      if (x instanceof SFXNextTurn) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))));
      };
      if (x instanceof SFXScroll) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))));
      };
      if (x instanceof SFXStartFirst) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))));
      };
      if (x instanceof SFXStartTurn) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))));
      };
      if (x instanceof SFXStartSecond) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))));
      };
      if (x instanceof SFXTarget) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))));
      };
      if (x instanceof SFXWin) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))))))))));
      };
      throw new Error("Failed pattern match at FFI.Sound line 27, column 8 - line 27, column 47: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return SFXApplySkill.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return SFXCancel.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return SFXClick.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
          return SFXDeath.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
          return SFXLose.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
          return SFXNextTurn.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
          return SFXScroll.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))) {
          return SFXStartFirst.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))) {
          return SFXStartTurn.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))) {
          return SFXStartSecond.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))) {
          return SFXTarget.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))))))))) {
          return SFXWin.value;
      };
      throw new Error("Failed pattern match at FFI.Sound line 27, column 8 - line 27, column 47: " + [ x.constructor.name ]);
  });
  var showSound = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericSound)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "SFXApplySkill";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "SFXCancel";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "SFXClick";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "SFXDeath";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "SFXLose";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "SFXNextTurn";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "SFXScroll";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "SFXStartFirst";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "SFXStartTurn";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "SFXStartSecond";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "SFXTarget";
  })))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "SFXWin";
  })))))))))))))));
  var register = $foreign.sfxRegister(Data_Show.show(showSound))([ SFXApplySkill.value, SFXCancel.value, SFXClick.value, SFXDeath.value, SFXLose.value, SFXNextTurn.value, SFXScroll.value, SFXStartFirst.value, SFXStartTurn.value, SFXStartSecond.value, SFXTarget.value, SFXWin.value ]);
  var sound = function (dictMonadEff) {
      return function ($81) {
          return Control_Monad_Eff_Class.liftEff(dictMonadEff)($foreign.sfxPlay(Data_Show.show(showSound))($81));
      };
  };
  exports["SFXApplySkill"] = SFXApplySkill;
  exports["SFXCancel"] = SFXCancel;
  exports["SFXClick"] = SFXClick;
  exports["SFXDeath"] = SFXDeath;
  exports["SFXLose"] = SFXLose;
  exports["SFXNextTurn"] = SFXNextTurn;
  exports["SFXScroll"] = SFXScroll;
  exports["SFXStartFirst"] = SFXStartFirst;
  exports["SFXStartTurn"] = SFXStartTurn;
  exports["SFXStartSecond"] = SFXStartSecond;
  exports["SFXTarget"] = SFXTarget;
  exports["SFXWin"] = SFXWin;
  exports["register"] = register;
  exports["sound"] = sound;
  exports["genericSound"] = genericSound;
  exports["showSound"] = showSound;
})(PS["FFI.Sound"] = PS["FFI.Sound"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var mouseleave = "mouseleave";
  var mouseenter = "mouseenter";
  var click = "click";
  exports["click"] = click;
  exports["mouseenter"] = mouseenter;
  exports["mouseleave"] = mouseleave;
})(PS["DOM.HTML.Event.EventTypes"] = PS["DOM.HTML.Event.EventTypes"] || {});
(function(exports) {
    "use strict";

  exports._readHTMLElement = function (failure) {
    return function (success) {
      return function (value) {
        var tag = Object.prototype.toString.call(value);
        if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
          return success(value);
        } else {
          return failure(tag);
        }
      };
    };
  };
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.HTML.Types"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var windowToEventTarget = Unsafe_Coerce.unsafeCoerce;                        
  var readHTMLElement = $foreign._readHTMLElement(function ($0) {
      return Control_Monad_Except_Trans.except(Data_Identity.applicativeIdentity)(Data_Either.Left.create(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(Data_Foreign.TypeMismatch.create("HTMLElement")($0))));
  })(function ($1) {
      return Control_Monad_Except_Trans.except(Data_Identity.applicativeIdentity)(Data_Either.Right.create($1));
  });                                                                    
  var htmlElementToNode = Unsafe_Coerce.unsafeCoerce;   
  var htmlDocumentToParentNode = Unsafe_Coerce.unsafeCoerce; 
  var htmlDocumentToDocument = Unsafe_Coerce.unsafeCoerce;
  exports["windowToEventTarget"] = windowToEventTarget;
  exports["htmlDocumentToDocument"] = htmlDocumentToDocument;
  exports["htmlDocumentToParentNode"] = htmlDocumentToParentNode;
  exports["htmlElementToNode"] = htmlElementToNode;
  exports["readHTMLElement"] = readHTMLElement;
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map line 590, column 1 - line 590, column 40: " + [ v.constructor.name ]);
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map line 195, column 5 - line 195, column 22: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map line 584, column 1 - line 584, column 38: " + [ v.constructor.name ]);
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map line 91, column 1 - line 91, column 39: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map line 413, column 3 - line 418, column 88: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map line 410, column 1 - line 410, column 80: " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map line 449, column 5 - line 454, column 108: " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map line 446, column 3 - line 446, column 56: " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map line 429, column 3 - line 429, column 55: " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function (ctxs) {
              return function (tree) {
                  if (ctxs instanceof Data_List_Types.Nil) {
                      return tree;
                  };
                  if (ctxs instanceof Data_List_Types.Cons) {
                      var __unused = function (dictPartial1) {
                          return function ($dollar57) {
                              return $dollar57;
                          };
                      };
                      return __unused()((function () {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              return up(ctxs.value1)(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              return up(ctxs.value1)(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map line 499, column 9 - line 516, column 136: " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Map line 496, column 5 - line 516, column 136: " + [ ctxs.constructor.name ]);
              };
          };
          var removeMaxNode = function (ctx) {
              return function (m) {
                  var __unused = function (dictPartial1) {
                      return function ($dollar59) {
                          return $dollar59;
                      };
                  };
                  return __unused()((function () {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          return removeMaxNode(new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx))(m.value3);
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          return removeMaxNode(new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx))(m.value6);
                      };
                      throw new Error("Failed pattern match at Data.Map line 528, column 5 - line 532, column 107: " + [ m.constructor.name ]);
                  })());
              };
          };
          var maxNode = function (m) {
              var __unused = function (dictPartial1) {
                  return function ($dollar61) {
                      return $dollar61;
                  };
              };
              return __unused()((function () {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      return maxNode(m.value3);
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      return maxNode(m.value6);
                  };
                  throw new Error("Failed pattern match at Data.Map line 519, column 33 - line 523, column 45: " + [ m.constructor.name ]);
              })());
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map line 469, column 34 - line 492, column 80: " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var empty = Leaf.value;
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["delete"] = $$delete;
  exports["pop"] = pop;
  exports["member"] = member;
  exports["keys"] = keys;
  exports["values"] = values;
  exports["functorMap"] = functorMap;
  exports["foldableMap"] = foldableMap;
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen_Component_ChildPath = PS["Halogen.Component.ChildPath"];
  var Halogen_Query_EventSource = PS["Halogen.Query.EventSource"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Prelude = PS["Prelude"];
  var query = function (dictEq) {
      return function (p) {
          return function (q) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.checkSlot(p))(function (v) {
                  if (v) {
                      return Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Data_Maybe.Just.create)(Halogen_Query_HalogenM.mkQuery(dictEq)(p)(q));
                  };
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Maybe.Nothing.value);
              });
          };
      };
  };   
  var action = function (act) {
      return act(Data_Unit.unit);
  };
  exports["action"] = action;
  exports["query"] = query;
})(PS["Halogen.Query"] = PS["Halogen.Query"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_Event_Event = PS["DOM.Event.Event"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_HTML_Event_EventTypes = PS["DOM.HTML.Event.EventTypes"];
  var DOM_HTML_Event_Types = PS["DOM.HTML.Event.Types"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Halogen_Query = PS["Halogen.Query"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];      
  var mouseHandler = Unsafe_Coerce.unsafeCoerce;
  var input_ = function (f) {
      return function (v) {
          return Data_Maybe.Just.create(Halogen_Query.action(f));
      };
  };
  var input = function (f) {
      return function (x) {
          return Data_Maybe.Just.create(Halogen_Query.action(f(x)));
      };
  };
  var handler = function (et) {
      return function ($1) {
          return Halogen_HTML_Core.handler(et)(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Halogen_Query_InputF.Query.create))($1));
      };
  };                                                       
  var onClick = function ($2) {
      return handler(DOM_HTML_Event_EventTypes.click)(mouseHandler($2));
  };
  var onMouseEnter = function ($9) {
      return handler(DOM_HTML_Event_EventTypes.mouseenter)(mouseHandler($9));
  };
  var onMouseLeave = function ($10) {
      return handler(DOM_HTML_Event_EventTypes.mouseleave)(mouseHandler($10));
  };
  exports["input"] = input;
  exports["input_"] = input_;
  exports["handler"] = handler;
  exports["onClick"] = onClick;
  exports["onMouseEnter"] = onMouseEnter;
  exports["onMouseLeave"] = onMouseLeave;
})(PS["Halogen.HTML.Events"] = PS["Halogen.HTML.Events"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Component_Common = PS["Component.Common"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_HTML_Indexed_ButtonType = PS["DOM.HTML.Indexed.ButtonType"];
  var DOM_HTML_Indexed_FormMethod = PS["DOM.HTML.Indexed.FormMethod"];
  var DOM_HTML_Indexed_InputType = PS["DOM.HTML.Indexed.InputType"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var FFI_Import = PS["FFI.Import"];
  var FFI_Sound = PS["FFI.Sound"];
  var Functions = PS["Functions"];
  var Halogen = PS["Halogen"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Operators = PS["Operators"];
  var Prelude = PS["Prelude"];
  var Structure = PS["Structure"];        
  var Queued = (function () {
      function Queued(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Queued.create = function (value0) {
          return function (value1) {
              return new Queued(value0, value1);
          };
      };
      return Queued;
  })();
  var preview = function ($106) {
      return Halogen_HTML_Events.onMouseEnter(Halogen_HTML_Events.input_(Component_Common.QuerySelect.create(Component_Common.Preview.create(Component_Common.PreviewCharacter.create($106)))));
  };
  var pageSize = 36;
  var click = function (a) {
      return Halogen_HTML_Events.onClick(Halogen_HTML_Events.input_(Component_Common.QuerySelect.create(a)));
  };
  var previewSkill = function (character) {
      return function (slot) {
          return function (skills) {
              return function (i) {
                  var vPrev = Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(skills)(i))(function (v) {
                      return Data_Array.findLastIndex(function ($107) {
                          return !Functions.lMatch(v)($107);
                      })(Data_Array.take(i)(skills));
                  });
                  var vNext = Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(skills)(i))(function (v) {
                      return Data_Array.findIndex(function ($108) {
                          return !Functions.lMatch(v)($108);
                      })(Data_Array.drop(i)(skills));
                  });
                  var v = Data_Array.index(skills)(i);
                  if (v instanceof Data_Maybe.Nothing) {
                      return [  ];
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return [ Halogen_HTML_Elements.div([ Component_Common._c("skillPreview") ])(Data_Array.catMaybes([ Data_Maybe.Just.create(Halogen_HTML_Elements.img([ Component_Common._c("char"), Component_Common.cIcon(character)(v.value0.label) ])), Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(vPrev)(function (v1) {
                          return Halogen_HTML_Elements.a([ Component_Common._c("prevSkill click"), click(new Component_Common.Vary(slot, v1)) ])([  ]);
                      }), Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(vNext)(function (v1) {
                          return Halogen_HTML_Elements.a([ Component_Common._c("nextSkill click"), click(Component_Common.Vary.create(slot)(v1 + i | 0)) ])([  ]);
                      }) ])), Halogen_HTML_Elements.div([ Component_Common._c("skillname") ])(Data_Array.cons(Halogen_HTML_Core.text(v.value0.label))(Data_Array.snoc(Component_Common.hCost(v.value0.cost))(Halogen_HTML_Elements.div([ Component_Common._c("skillClasses") ])([ Halogen_HTML_Core.text(Data_String.joinWith(", ")(Functions.filterClasses(false)(v.value0.classes))) ])))), Halogen_HTML_Elements.div([ Component_Common._c("skilldesc") ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Component_Common.parseDesc(v.value0.desc))(Data_Array.catMaybes([ Operators.justIf(v.value0.charges > 1)(Component_Common._minor(Data_Show.show(Data_Show.showInt)(v.value0.charges) + " charges.")), Operators.justIf(v.value0.charges === 1)(Component_Common._minor(Data_Show.show(Data_Show.showInt)(v.value0.charges) + " charge.")), Operators.justIf(v.value0.cd > 0)(Component_Common._minor("CD: " + Data_Show.show(Data_Show.showInt)(v.value0.cd))) ]))) ];
                  };
                  throw new Error("Failed pattern match at Component.CharacterSelect line 179, column 40 - line 198, column 8: " + [ v.constructor.name ]);
              };
          };
      };
  };
  var previewBox = function (v) {
      return function (v1) {
          if (v1 instanceof Component_Common.NoPreview) {
              return Control_Category.id(Control_Category.categoryFn);
          };
          if (v1 instanceof Component_Common.PreviewUser) {
              if (FFI_Import.user instanceof Data_Maybe.Nothing) {
                  return Control_Category.id(Control_Category.categoryFn);
              };
              if (FFI_Import.user instanceof Data_Maybe.Just) {
                  return Data_Array.cons(Halogen_HTML_Elements.div([ Component_Common._i("charPreview"), Component_Common._c("parchment") ])([ Halogen_HTML_Elements.h1_(Component_Common._txt("Account Settings")), Halogen_HTML_Elements.p_([ Component_Common._span("Name"), Halogen_HTML_Elements.input([ Halogen_HTML_Properties.type_(Halogen_HTML_Core.inputTypeIsProp)(DOM_HTML_Indexed_InputType.InputText.value), Halogen_HTML_Properties.name("name"), Halogen_HTML_Properties.value(FFI_Import.user.value0.name) ]) ]), Halogen_HTML_Elements.p_([ Component_Common._span("Background"), Halogen_HTML_Elements.input([ Halogen_HTML_Properties.type_(Halogen_HTML_Core.inputTypeIsProp)(DOM_HTML_Indexed_InputType.InputText.value), Halogen_HTML_Properties.name("background"), Halogen_HTML_Properties.value(Data_Maybe.fromMaybe("")(FFI_Import.user.value0.background)) ]) ]), Halogen_HTML_Elements.p_([ Component_Common._span("Avatars") ]), Halogen_HTML_Elements.div([ Component_Common._i("avatars") ])(Data_Functor.mapFlipped(Data_Functor.functorArray)(FFI_Import.avatars)(function (avatar) {
                      return Halogen_HTML_Elements.img([ Component_Common._src(avatar) ]);
                  })) ]));
              };
              throw new Error("Failed pattern match at Component.CharacterSelect line 147, column 28 - line 166, column 6: " + [ FFI_Import.user.constructor.name ]);
          };
          if (v1 instanceof Component_Common.PreviewCharacter) {
              return Data_Array.cons(Halogen_HTML_Elements.div([ Component_Common._i("charPreview"), Component_Common._c("parchment") ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Halogen_HTML_Elements.img([ Component_Common._i("charIcon"), Component_Common._c("char"), Component_Common.cIcon(v1.value0)("icon") ]), Halogen_HTML_Elements.div([ Component_Common._i("charName") ])([ Halogen_HTML_Core.text(v1.value0.characterName) ]), Halogen_HTML_Elements.div([ Component_Common._i("charDesc") ])([ Halogen_HTML_Core.text(v1.value0.characterBio) ]) ])(Data_Array.concat(Functions.zip3(previewSkill(v1.value0))(Data_Array.range(0)(3))(v1.value0.characterSkills)(v)))));
          };
          throw new Error("Failed pattern match at Component.CharacterSelect line 144, column 1 - line 145, column 81: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var userBox = function (showLogin) {
      return function (team) {
          var playButton = Operators.doIf(Data_Array.length(team) === 3)(function (v) {
              return "click " + v;
          })("playButton parchment");
          if (FFI_Import.user instanceof Data_Maybe.Just) {
              return [ Halogen_HTML_Elements.div([ Component_Common._c("playButtons") ])([ Halogen_HTML_Elements.div([ Component_Common._i("queue"), Component_Common._c(playButton), click(new Component_Common.Enqueue(Component_Common.Quick.value)) ])([ Halogen_HTML_Core.text("Start Quick Match") ]), Halogen_HTML_Elements.div([ Component_Common._i("practicequeue"), Component_Common._c(playButton), click(new Component_Common.Enqueue(Component_Common.Practice.value)) ])([ Halogen_HTML_Core.text("Start Practice Match") ]), Halogen_HTML_Elements.div([ Component_Common._i("private"), Component_Common._c(playButton), click(new Component_Common.Enqueue(Component_Common.Private.value)) ])([ Halogen_HTML_Core.text("Start Private Match") ]), Component_Common._a("mainsite")("playButton parchment click")("/changelog")("Changelog") ]), Halogen_HTML_Elements.div([ Component_Common._c("teamContainer") ])([ Halogen_HTML_Elements.div([ Component_Common._i("userbox"), Component_Common._c("parchment loggedin") ])([ Halogen_HTML_Elements.img([ Component_Common._c("userimg char"), Component_Common._src(FFI_Import.user.value0.avatar) ]), Component_Common._b(FFI_Import.user.value0.name), Halogen_HTML_Elements.br_, Halogen_HTML_Core.text(Functions.userRank(FFI_Import.user.value0)), Halogen_HTML_Elements.br_, Component_Common._b("Clan: "), Halogen_HTML_Core.text(Data_Maybe.fromMaybe("Clanless")(FFI_Import.user.value0.clan)), Halogen_HTML_Elements.br_, Component_Common._b("Level: "), Halogen_HTML_Core.text(Data_Show.show(Data_Show.showInt)(Functions.userLevel(FFI_Import.user.value0)) + (" (" + (Data_Show.show(Data_Show.showInt)(Functions.userXP(FFI_Import.user.value0)) + " XP)"))), Halogen_HTML_Elements.br_, Component_Common._b("Ladder Rank: "), Halogen_HTML_Core.text("None"), Halogen_HTML_Elements.br_, Component_Common._b("Record: "), Halogen_HTML_Core.text(Data_Show.show(Data_Show.showInt)(FFI_Import.user.value0.wins) + (" - " + (Data_Show.show(Data_Show.showInt)(FFI_Import.user.value0.wins + FFI_Import.user.value0.losses | 0) + (" (+" + (Data_Show.show(Data_Show.showInt)(FFI_Import.user.value0.streak) + ")"))))) ]), Halogen_HTML_Elements.div([ Component_Common._i("teamButtons") ])(Data_Functor.mapFlipped(Data_Functor.functorArray)(team)(function (c) {
                  return Halogen_HTML_Elements.div([ Component_Common._c("char click") ])([ Halogen_HTML_Elements.img([ Component_Common.cIcon(c)("icon"), preview(c), click(new Component_Common.Team(Component_Common.Delete.value, c)) ]) ]);
              })), Halogen_HTML_Elements.div([ Component_Common._i("underTeam"), Component_Common._c("parchment") ])([  ]) ]) ];
          };
          if (FFI_Import.user instanceof Data_Maybe.Nothing) {
              return [ Halogen_HTML_Elements.div([ Component_Common._c("playButtons") ])([ Component_Common._a("mainsite")("playButton parchment click")("/changelog")("Changelog") ]), Halogen_HTML_Elements.div([ Component_Common._c("teamContainer") ])([ Halogen_HTML_Elements.div([ Component_Common._i("userbox"), Component_Common._c("parchment") ])([ Halogen_HTML_Elements.form([ Component_Common._c("userForm"), Halogen_HTML_Properties.method(DOM_HTML_Indexed_FormMethod.POST.value), Halogen_HTML_Properties.action("/auth/page/email/login") ])([ Halogen_HTML_Elements.div([ Component_Common._i((function () {
                  if (showLogin) {
                      return "loginForm";
                  };
                  return "registerForm";
              })()) ])(Data_Array.catMaybes([ Data_Maybe.Just.create(Halogen_HTML_Elements.div_([ Halogen_HTML_Elements.input([ Component_Common._c("email"), Halogen_HTML_Properties.name("email"), Halogen_HTML_Properties.type_(Halogen_HTML_Core.inputTypeIsProp)(DOM_HTML_Indexed_InputType.InputEmail.value), Halogen_HTML_Properties.required(true), Halogen_HTML_Properties.autofocus(true), Halogen_HTML_Properties.placeholder("Email") ]) ])), Operators.justIf(showLogin)(Halogen_HTML_Elements.div_([ Halogen_HTML_Elements.input([ Component_Common._c("password"), Halogen_HTML_Properties.name("password"), Halogen_HTML_Properties.type_(Halogen_HTML_Core.inputTypeIsProp)(DOM_HTML_Indexed_InputType.InputPassword.value), Halogen_HTML_Properties.required(true), Halogen_HTML_Properties.placeholder("Password") ]) ])), Data_Maybe.Just.create(Halogen_HTML_Elements.div([ Component_Common._c("controls") ])((function () {
                  if (showLogin) {
                      return [ Halogen_HTML_Elements.button([ Component_Common._c("playButton click"), Halogen_HTML_Properties.type_(Halogen_HTML_Core.buttonTypeIsProp)(DOM_HTML_Indexed_ButtonType.ButtonSubmit.value) ])([ Halogen_HTML_Core.text("Log in") ]), Halogen_HTML_Elements.a([ Component_Common._c("click"), click(Component_Common.SwitchLogin.value) ])([ Halogen_HTML_Core.text("Register") ]) ];
                  };
                  return [ Halogen_HTML_Elements.a([ Component_Common._c("click"), click(Component_Common.SwitchLogin.value) ])([ Halogen_HTML_Core.text("Log in") ]), Halogen_HTML_Elements.button([ Component_Common._c("playButton click"), Halogen_HTML_Properties.type_(Halogen_HTML_Core.buttonTypeIsProp)(DOM_HTML_Indexed_ButtonType.ButtonSubmit.value) ])([ Halogen_HTML_Core.text("Register") ]) ];
              })())) ])) ]) ]), Halogen_HTML_Elements.div([ Component_Common._i("teamButtons") ])(Data_Functor.mapFlipped(Data_Functor.functorArray)(team)(function (c) {
                  return Halogen_HTML_Elements.div([ Component_Common._c("char click") ])([ Halogen_HTML_Elements.img([ Component_Common.cIcon(c)("icon"), preview(c), click(new Component_Common.Team(Component_Common.Delete.value, c)) ]) ]);
              })), Halogen_HTML_Elements.div([ Component_Common._i("underTeam"), Component_Common._c("parchment") ])([  ]) ]) ];
          };
          throw new Error("Failed pattern match at Component.CharacterSelect line 207, column 26 - line 311, column 6: " + [ FFI_Import.user.constructor.name ]);
      };
  };
  var component = (function () {
      var render = function (v) {
          var size = Data_Array.length(FFI_Import["cs'"]);
          var playButton = Operators.doIf(Data_Array.length(v.team) === 3)(function (v1) {
              return "click " + v1;
          })("playButton parchment");
          var pageAction = (function () {
              if (v.showLogin) {
                  return "login";
              };
              return "register";
          })();
          var displays = Data_Array.drop(v.index)(FFI_Import["cs'"]);
          var atMin = v.index === 0;
          var back = (function () {
              if (atMin) {
                  return size - size % pageSize | 0;
              };
              if (v.index < pageSize) {
                  return 0;
              };
              if (Data_Boolean.otherwise) {
                  return v.index - pageSize | 0;
              };
              throw new Error("Failed pattern match at Component.CharacterSelect line 112, column 11 - line 114, column 59: " + [  ]);
          })();
          var atMax = (v.index + pageSize | 0) >= size;
          var forward = (function () {
              if (atMax) {
                  return 0;
              };
              if (Data_Boolean.otherwise) {
                  return v.index + pageSize | 0;
              };
              throw new Error("Failed pattern match at Component.CharacterSelect line 115, column 11 - line 116, column 59: " + [  ]);
          })();
          return Halogen_HTML_Elements.div([ Component_Common._i("charSelect") ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(userBox(v.showLogin)(v.team))(previewBox(v.variants)(v.previewing)([ Halogen_HTML_Elements.div([ Component_Common._c("characterButtons parchment") ])([ Halogen_HTML_Elements.div([ Component_Common._i("prevPage"), Component_Common._c(Operators.doIf(atMin)(function (v1) {
              return "wraparound " + v1;
          })("click")), click(new Component_Common.Scroll(back)) ])([  ]), Halogen_HTML_Elements.div([ Component_Common._i("nextPage"), Component_Common._c(Operators.doIf(atMax)(function (v1) {
              return "wraparound " + v1;
          })("click")), click(new Component_Common.Scroll(forward)) ])([  ]), Halogen_HTML_Elements.div([ Component_Common._i("charScroll") ])(Data_Functor.mapFlipped(Data_Functor.functorArray)(displays)(function (c) {
              var $55 = Data_Foldable.elem(Data_Foldable.foldableArray)(Structure.eqCharacter)(c)(v.team);
              if ($55) {
                  return Halogen_HTML_Elements.div([ Component_Common._c("char disabled") ])([ Halogen_HTML_Elements.img([ Component_Common.cIcon(c)("icon"), preview(c) ]) ]);
              };
              var $56 = Data_Array.length(v.team) < 3;
              if ($56) {
                  return Halogen_HTML_Elements.div([ Component_Common._c("char click") ])([ Halogen_HTML_Elements.img([ Component_Common.cIcon(c)("icon"), preview(c), click(new Component_Common.Team(Component_Common.Add.value, c)) ]) ]);
              };
              return Halogen_HTML_Elements.div([ Component_Common._c("char click") ])([ Halogen_HTML_Elements.img([ Component_Common.cIcon(c)("icon"), preview(c) ]) ]);
          })) ]) ])));
      };
      var initialState = {
          queueing: false,
          showLogin: true,
          index: 0,
          cols: 11,
          previewing: Component_Common.NoPreview.value,
          team: FFI_Import.userTeam,
          variants: [ 0, 0, 0, 0 ],
          avatar: Data_Maybe.Nothing.value
      };
      var $$eval = function (v) {
          if (v instanceof Component_Common.QuerySelect) {
              return (function (v1) {
                  return Operators.advance(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.applicativeHalogenM)(v1)(v.value1);
              })((function () {
                  if (v.value0 instanceof Component_Common.SwitchLogin) {
                      return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                          var $65 = {};
                          for (var $66 in v1) {
                              if ({}.hasOwnProperty.call(v1, $66)) {
                                  $65[$66] = v1[$66];
                              };
                          };
                          $65.showLogin = !v1.showLogin;
                          return $65;
                      });
                  };
                  if (v.value0 instanceof Component_Common.Scroll) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXScroll.value))(function () {
                          return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                              var $69 = {};
                              for (var $70 in v1) {
                                  if ({}.hasOwnProperty.call(v1, $70)) {
                                      $69[$70] = v1[$70];
                                  };
                              };
                              $69.index = v.value0.value0;
                              return $69;
                          });
                      });
                  };
                  if (v.value0 instanceof Component_Common.Preview) {
                      return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                          var $73 = {};
                          for (var $74 in v1) {
                              if ({}.hasOwnProperty.call(v1, $74)) {
                                  $73[$74] = v1[$74];
                              };
                          };
                          $73.previewing = v.value0.value0;
                          $73.variants = [ 0, 0, 0, 0 ];
                          return $73;
                      });
                  };
                  if (v.value0 instanceof Component_Common.Vary) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXClick.value))(function () {
                          return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                              var $78 = {};
                              for (var $79 in v1) {
                                  if ({}.hasOwnProperty.call(v1, $79)) {
                                      $78[$79] = v1[$79];
                                  };
                              };
                              $78.variants = Functions["updateAt'"](v.value0.value0)(v.value0.value1)(v1.variants);
                              return $78;
                          });
                      });
                  };
                  if (v.value0 instanceof Component_Common.Team && v.value0.value0 instanceof Component_Common.Add) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXClick.value))(function () {
                          return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                              var $85 = {};
                              for (var $86 in v1) {
                                  if ({}.hasOwnProperty.call(v1, $86)) {
                                      $85[$86] = v1[$86];
                                  };
                              };
                              $85.team = Data_Array.cons(v.value0.value1)(v1.team);
                              return $85;
                          });
                      });
                  };
                  if (v.value0 instanceof Component_Common.Team && v.value0.value0 instanceof Component_Common.Delete) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXCancel.value))(function () {
                          return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                              var $92 = {};
                              for (var $93 in v1) {
                                  if ({}.hasOwnProperty.call(v1, $93)) {
                                      $92[$93] = v1[$93];
                                  };
                              };
                              $92.team = Data_Array["delete"](Structure.eqCharacter)(v.value0.value1)(v1.team);
                              return $92;
                          });
                      });
                  };
                  if (v.value0 instanceof Component_Common.Enqueue) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXApplySkill.value))(function () {
                          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                              return Halogen_Query_HalogenM.raise(new Queued(v.value0.value0, v1.team));
                          });
                      });
                  };
                  if (v.value0 instanceof Component_Common.ChooseAvatar) {
                      return FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXClick.value);
                  };
                  throw new Error("Failed pattern match at Component.CharacterSelect line 118, column 46 - line 141, column 21: " + [ v.value0.constructor.name ]);
              })());
          };
          if (v instanceof Component_Common.QueryPlay) {
              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
          };
          throw new Error("Failed pattern match at Component.CharacterSelect line 117, column 3 - line 117, column 81: " + [ v.constructor.name ]);
      };
      return Halogen_Component.component(Halogen_HTML_Core.bifunctorHTML)({
          initialState: Data_Function["const"](initialState),
          render: render,
          "eval": $$eval,
          receiver: Data_Function["const"](Data_Maybe.Nothing.value)
      });
  })();
  exports["Queued"] = Queued;
  exports["component"] = component;
})(PS["Component.CharacterSelect"] = PS["Component.CharacterSelect"] || {});
(function(exports) {
  // module FFI.Progress

  "use strict";

  var prog

  exports["progress"] = function (duration) {
    return function(from) {
      return function(to) {
        return function() {
          if (!prog) 
            prog = new ProgressBar.Line("#ready",
              { color: '#0099ff'
              , strokeWidth: 5
              , fill: '#111'
            })
          if (from < to) {
            prog.path.setAttribute('stroke','#555')
          }
          else {
            prog.path.setAttribute('stroke','#0099ff')
          }
          prog.set(from)
          if (duration > 0)
            prog.animate(to, { duration: duration })
        }
      }
    }
  }
})(PS["FFI.Progress"] = PS["FFI.Progress"] || {});
(function(exports) {
    "use strict";
  var $foreign = PS["FFI.Progress"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Prelude = PS["Prelude"];
  exports["progress"] = $foreign.progress;
})(PS["FFI.Progress"] = PS["FFI.Progress"] || {});
(function(exports) {
  /* global exports */
  /* global XMLHttpRequest */
  /* global module */
  /* global process */
  "use strict";

  exports._ajax = function () {
    var platformSpecific = { };
    if (typeof module !== "undefined" && module.require && !(typeof process !== "undefined" && process.versions["electron"])) {
      // We are on node.js
      platformSpecific.newXHR = function () {
        var XHR = module.require("xhr2");
        return new XHR();
      };

      platformSpecific.fixupUrl = function (url) {
        var urllib = module.require("url");
        var u = urllib.parse(url);
        u.protocol = u.protocol || "http:";
        u.hostname = u.hostname || "localhost";
        return urllib.format(u);
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    } else {
      // We are in the browser
      platformSpecific.newXHR = function () {
        return new XMLHttpRequest();
      };

      platformSpecific.fixupUrl = function (url) {
        return url || "/";
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    }

    return function (mkHeader, options) {
      return function (errback, callback) {
        var xhr = platformSpecific.newXHR();
        var fixedUrl = platformSpecific.fixupUrl(options.url);
        xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
        if (options.headers) {
          try {
            for (var i = 0, header; (header = options.headers[i]) != null; i++) {
              xhr.setRequestHeader(header.field, header.value);
            }
          } catch (e) {
            errback(e);
          }
        }
        xhr.onerror = function () {
          errback(new Error("AJAX request failed: " + options.method + " " + options.url));
        };
        xhr.onload = function () {
          callback({
            status: xhr.status,
            headers: xhr.getAllResponseHeaders().split("\r\n")
              .filter(function (header) {
                return header.length > 0;
              })
              .map(function (header) {
                var i = header.indexOf(":");
                return mkHeader(header.substring(0, i))(header.substring(i + 2));
              }),
            response: platformSpecific.getResponse(xhr)
          });
        };
        xhr.responseType = options.responseType;
        xhr.withCredentials = options.withCredentials;
        xhr.send(options.content);

        return function (/* error */) {
          return function (cancelErrback, cancelCallback) {
            try {
              xhr.abort();
            } catch (e) {
              return cancelErrback(e);
            }
            return cancelCallback();
          };
        };
      };
    };
  }();
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
    "use strict";

  exports.mkEffFn1 = function mkEffFn1(fn) {
    return function(x) {
      return fn(x)();
    };
  };

  exports.runEffFn2 = function runEffFn2(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };

  exports.runEffFn3 = function runEffFn3(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function() {
            return fn(a, b, c);
          };
        };
      };
    };
  };
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Uncurried"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["mkEffFn1"] = $foreign.mkEffFn1;
  exports["runEffFn2"] = $foreign.runEffFn2;
  exports["runEffFn3"] = $foreign.runEffFn3;
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var fromEffFnAff = function (v) {
      return Control_Monad_Aff.makeAff(function (k) {
          return function __do() {
              var v1 = Control_Monad_Eff_Uncurried.runEffFn2(v)(Control_Monad_Eff_Uncurried.mkEffFn1(function ($4) {
                  return k(Data_Either.Left.create($4));
              }))(Control_Monad_Eff_Uncurried.mkEffFn1(function ($5) {
                  return k(Data_Either.Right.create($5));
              }))();
              return function (e) {
                  return Control_Monad_Aff.makeAff(function (k2) {
                      return function __do() {
                          Control_Monad_Eff_Uncurried.runEffFn3(v1)(e)(Control_Monad_Eff_Uncurried.mkEffFn1(function ($6) {
                              return k2(Data_Either.Left.create($6));
                          }))(Control_Monad_Eff_Uncurried.mkEffFn1(function ($7) {
                              return k2(Data_Either.Right.create($7));
                          }))();
                          return Control_Monad_Aff.nonCanceler;
                      };
                  });
              };
          };
      });
  };
  exports["fromEffFnAff"] = fromEffFnAff;
})(PS["Control.Monad.Aff.Compat"] = PS["Control.Monad.Aff.Compat"] || {});
(function(exports) {
    "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Argonaut.Parser"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];        
  var jsonParser = function (j) {
      return $foreign._jsonParser(Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var OPTIONS = (function () {
      function OPTIONS() {

      };
      OPTIONS.value = new OPTIONS();
      return OPTIONS;
  })();
  var GET = (function () {
      function GET() {

      };
      GET.value = new GET();
      return GET;
  })();
  var HEAD = (function () {
      function HEAD() {

      };
      HEAD.value = new HEAD();
      return HEAD;
  })();
  var POST = (function () {
      function POST() {

      };
      POST.value = new POST();
      return POST;
  })();
  var PUT = (function () {
      function PUT() {

      };
      PUT.value = new PUT();
      return PUT;
  })();
  var DELETE = (function () {
      function DELETE() {

      };
      DELETE.value = new DELETE();
      return DELETE;
  })();
  var TRACE = (function () {
      function TRACE() {

      };
      TRACE.value = new TRACE();
      return TRACE;
  })();
  var CONNECT = (function () {
      function CONNECT() {

      };
      CONNECT.value = new CONNECT();
      return CONNECT;
  })();
  var PROPFIND = (function () {
      function PROPFIND() {

      };
      PROPFIND.value = new PROPFIND();
      return PROPFIND;
  })();
  var PROPPATCH = (function () {
      function PROPPATCH() {

      };
      PROPPATCH.value = new PROPPATCH();
      return PROPPATCH;
  })();
  var MKCOL = (function () {
      function MKCOL() {

      };
      MKCOL.value = new MKCOL();
      return MKCOL;
  })();
  var COPY = (function () {
      function COPY() {

      };
      COPY.value = new COPY();
      return COPY;
  })();
  var MOVE = (function () {
      function MOVE() {

      };
      MOVE.value = new MOVE();
      return MOVE;
  })();
  var LOCK = (function () {
      function LOCK() {

      };
      LOCK.value = new LOCK();
      return LOCK;
  })();
  var UNLOCK = (function () {
      function UNLOCK() {

      };
      UNLOCK.value = new UNLOCK();
      return UNLOCK;
  })();
  var PATCH = (function () {
      function PATCH() {

      };
      PATCH.value = new PATCH();
      return PATCH;
  })();
  var unCustomMethod = function (v) {
      return v;
  };
  var showMethod = new Data_Show.Show(function (v) {
      if (v instanceof OPTIONS) {
          return "OPTIONS";
      };
      if (v instanceof GET) {
          return "GET";
      };
      if (v instanceof HEAD) {
          return "HEAD";
      };
      if (v instanceof POST) {
          return "POST";
      };
      if (v instanceof PUT) {
          return "PUT";
      };
      if (v instanceof DELETE) {
          return "DELETE";
      };
      if (v instanceof TRACE) {
          return "TRACE";
      };
      if (v instanceof CONNECT) {
          return "CONNECT";
      };
      if (v instanceof PROPFIND) {
          return "PROPFIND";
      };
      if (v instanceof PROPPATCH) {
          return "PROPPATCH";
      };
      if (v instanceof MKCOL) {
          return "MKCOL";
      };
      if (v instanceof COPY) {
          return "COPY";
      };
      if (v instanceof MOVE) {
          return "MOVE";
      };
      if (v instanceof LOCK) {
          return "LOCK";
      };
      if (v instanceof UNLOCK) {
          return "UNLOCK";
      };
      if (v instanceof PATCH) {
          return "PATCH";
      };
      throw new Error("Failed pattern match at Data.HTTP.Method line 42, column 1 - line 42, column 35: " + [ v.constructor.name ]);
  });
  var print = Data_Either.either(Data_Show.show(showMethod))(unCustomMethod);
  exports["OPTIONS"] = OPTIONS;
  exports["GET"] = GET;
  exports["HEAD"] = HEAD;
  exports["POST"] = POST;
  exports["PUT"] = PUT;
  exports["DELETE"] = DELETE;
  exports["TRACE"] = TRACE;
  exports["CONNECT"] = CONNECT;
  exports["PROPFIND"] = PROPFIND;
  exports["PROPPATCH"] = PROPPATCH;
  exports["MKCOL"] = MKCOL;
  exports["COPY"] = COPY;
  exports["MOVE"] = MOVE;
  exports["LOCK"] = LOCK;
  exports["UNLOCK"] = UNLOCK;
  exports["PATCH"] = PATCH;
  exports["unCustomMethod"] = unCustomMethod;
  exports["print"] = print;
  exports["showMethod"] = showMethod;
})(PS["Data.HTTP.Method"] = PS["Data.HTTP.Method"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_MediaType = PS["Data.MediaType"];           
  var applicationJSON = "application/json";
  exports["applicationJSON"] = applicationJSON;
})(PS["Data.MediaType.Common"] = PS["Data.MediaType.Common"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var DOM_XHR_Types = PS["DOM.XHR.Types"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_FormURLEncoded = PS["Data.FormURLEncoded"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_MediaType_Common = PS["Data.MediaType.Common"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Requestable = function (toRequest) {
      this.toRequest = toRequest;
  };
  var toRequest = function (dict) {
      return dict.toRequest;
  }; 
  var defaultToRequest = function ($0) {
      return Data_Tuple.Tuple.create(Data_Maybe.Nothing.value)($0);
  };                                                                   
  var requestableUnit = new Requestable(defaultToRequest);
  exports["Requestable"] = Requestable;
  exports["toRequest"] = toRequest;
  exports["requestableUnit"] = requestableUnit;
})(PS["Network.HTTP.Affjax.Request"] = PS["Network.HTTP.Affjax.Request"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_MediaType_Common = PS["Data.MediaType.Common"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var ArrayBufferResponse = (function () {
      function ArrayBufferResponse() {

      };
      ArrayBufferResponse.value = new ArrayBufferResponse();
      return ArrayBufferResponse;
  })();
  var BlobResponse = (function () {
      function BlobResponse() {

      };
      BlobResponse.value = new BlobResponse();
      return BlobResponse;
  })();
  var DocumentResponse = (function () {
      function DocumentResponse() {

      };
      DocumentResponse.value = new DocumentResponse();
      return DocumentResponse;
  })();
  var JSONResponse = (function () {
      function JSONResponse() {

      };
      JSONResponse.value = new JSONResponse();
      return JSONResponse;
  })();
  var StringResponse = (function () {
      function StringResponse() {

      };
      StringResponse.value = new StringResponse();
      return StringResponse;
  })();
  var Respondable = function (fromResponse, responseType) {
      this.fromResponse = fromResponse;
      this.responseType = responseType;
  }; 
  var responseTypeToString = function (v) {
      if (v instanceof ArrayBufferResponse) {
          return "arraybuffer";
      };
      if (v instanceof BlobResponse) {
          return "blob";
      };
      if (v instanceof DocumentResponse) {
          return "document";
      };
      if (v instanceof JSONResponse) {
          return "text";
      };
      if (v instanceof StringResponse) {
          return "text";
      };
      throw new Error("Failed pattern match at Network.HTTP.Affjax.Response line 48, column 1 - line 48, column 61: " + [ v.constructor.name ]);
  };
  var responseType = function (dict) {
      return dict.responseType;
  };                                                                                                                                     
  var responsableJson = new Respondable(function ($8) {
      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($8);
  }, new Data_Tuple.Tuple(new Data_Maybe.Just(Data_MediaType_Common.applicationJSON), JSONResponse.value));                                                             
  var fromResponse = function (dict) {
      return dict.fromResponse;
  };
  exports["ArrayBufferResponse"] = ArrayBufferResponse;
  exports["BlobResponse"] = BlobResponse;
  exports["DocumentResponse"] = DocumentResponse;
  exports["JSONResponse"] = JSONResponse;
  exports["StringResponse"] = StringResponse;
  exports["responseTypeToString"] = responseTypeToString;
  exports["Respondable"] = Respondable;
  exports["responseType"] = responseType;
  exports["fromResponse"] = fromResponse;
  exports["responsableJson"] = responsableJson;
})(PS["Network.HTTP.Affjax.Response"] = PS["Network.HTTP.Affjax.Response"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Accept = (function () {
      function Accept(value0) {
          this.value0 = value0;
      };
      Accept.create = function (value0) {
          return new Accept(value0);
      };
      return Accept;
  })();
  var ContentType = (function () {
      function ContentType(value0) {
          this.value0 = value0;
      };
      ContentType.create = function (value0) {
          return new ContentType(value0);
      };
      return ContentType;
  })();
  var RequestHeader = (function () {
      function RequestHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RequestHeader.create = function (value0) {
          return function (value1) {
              return new RequestHeader(value0, value1);
          };
      };
      return RequestHeader;
  })();
  var requestHeaderValue = function (v) {
      if (v instanceof Accept) {
          return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
      };
      if (v instanceof ContentType) {
          return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
      };
      if (v instanceof RequestHeader) {
          return v.value1;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 29, column 1 - line 29, column 46: " + [ v.constructor.name ]);
  };
  var requestHeaderName = function (v) {
      if (v instanceof Accept) {
          return "Accept";
      };
      if (v instanceof ContentType) {
          return "Content-Type";
      };
      if (v instanceof RequestHeader) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 24, column 1 - line 24, column 45: " + [ v.constructor.name ]);
  };
  exports["Accept"] = Accept;
  exports["ContentType"] = ContentType;
  exports["RequestHeader"] = RequestHeader;
  exports["requestHeaderName"] = requestHeaderName;
  exports["requestHeaderValue"] = requestHeaderValue;
})(PS["Network.HTTP.RequestHeader"] = PS["Network.HTTP.RequestHeader"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var ResponseHeader = (function () {
      function ResponseHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseHeader.create = function (value0) {
          return function (value1) {
              return new ResponseHeader(value0, value1);
          };
      };
      return ResponseHeader;
  })();
  var responseHeader = function (field) {
      return function (value) {
          return new ResponseHeader(field, value);
      };
  };
  exports["responseHeader"] = responseHeader;
})(PS["Network.HTTP.ResponseHeader"] = PS["Network.HTTP.ResponseHeader"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Network.HTTP.Affjax"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Compat = PS["Control.Monad.Aff.Compat"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Parser = PS["Data.Argonaut.Parser"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HTTP_Method = PS["Data.HTTP.Method"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var Network_HTTP_Affjax_Request = PS["Network.HTTP.Affjax.Request"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Network_HTTP_RequestHeader = PS["Network.HTTP.RequestHeader"];
  var Network_HTTP_ResponseHeader = PS["Network.HTTP.ResponseHeader"];
  var Network_HTTP_StatusCode = PS["Network.HTTP.StatusCode"];
  var Prelude = PS["Prelude"];
  var defaultRequest = {
      method: new Data_Either.Left(Data_HTTP_Method.GET.value),
      url: "/",
      headers: [  ],
      content: Data_Maybe.Nothing.value,
      username: Data_Maybe.Nothing.value,
      password: Data_Maybe.Nothing.value,
      withCredentials: false
  };
  var affjax = function (dictRequestable) {
      return function (dictRespondable) {
          return function (req) {
              var responseSettings = Network_HTTP_Affjax_Response.responseType(dictRespondable);
              var requestSettings = (function () {
                  var v = Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_Affjax_Request.toRequest(dictRequestable))(req.content);
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Data_Maybe.Nothing.value);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Tuple.Tuple(v.value0.value0, new Data_Maybe.Just(v.value0.value1));
                  };
                  throw new Error("Failed pattern match at Network.HTTP.Affjax line 250, column 21 - line 252, column 49: " + [ v.constructor.name ]);
              })();
              var parseJSON = function ($98) {
                  return Data_Either.either(function ($99) {
                      return Data_Foreign.fail(Data_Foreign.JSONError.create($99));
                  })(function ($100) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Foreign.toForeign($100));
                  })(Data_Argonaut_Parser.jsonParser($98));
              };
              var fromResponse$prime = (function () {
                  var v = Data_Tuple.snd(responseSettings);
                  if (v instanceof Network_HTTP_Affjax_Response.JSONResponse) {
                      return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Network_HTTP_Affjax_Response.fromResponse(dictRespondable))(Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(parseJSON)(Data_Foreign.readString));
                  };
                  return Network_HTTP_Affjax_Response.fromResponse(dictRespondable);
              })();
              var addHeader = function (mh) {
                  return function (hs) {
                      if (mh instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Network_HTTP_RequestHeader.requestHeaderName)(mh.value0))(hs)) {
                          return Data_Array.snoc(hs)(mh.value0);
                      };
                      return hs;
                  };
              };
              var headers = addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.ContentType.create)(Data_Tuple.fst(requestSettings)))(addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.Accept.create)(Data_Tuple.fst(responseSettings)))(req.headers));
              var req$prime = {
                  method: Data_HTTP_Method.print(req.method),
                  url: req.url,
                  headers: Data_Functor.map(Data_Functor.functorArray)(function (h) {
                      return {
                          field: Network_HTTP_RequestHeader.requestHeaderName(h),
                          value: Network_HTTP_RequestHeader.requestHeaderValue(h)
                      };
                  })(headers),
                  content: Data_Nullable.toNullable(Data_Tuple.snd(requestSettings)),
                  responseType: Network_HTTP_Affjax_Response.responseTypeToString(Data_Tuple.snd(responseSettings)),
                  username: Data_Nullable.toNullable(req.username),
                  password: Data_Nullable.toNullable(req.password),
                  withCredentials: req.withCredentials
              };
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_Compat.fromEffFnAff($foreign._ajax(Network_HTTP_ResponseHeader.responseHeader, req$prime)))(function (v) {
                  var v1 = Data_Functor.map(Data_Either.functorEither)(function (v2) {
                      var $68 = {};
                      for (var $69 in v) {
                          if ({}.hasOwnProperty.call(v, $69)) {
                              $68[$69] = v[$69];
                          };
                      };
                      $68.response = v2;
                      return $68;
                  })(Control_Monad_Except.runExcept(fromResponse$prime(v.response)));
                  if (v1 instanceof Data_Either.Left) {
                      return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Foreign.showForeignError))(v1.value0)));
                  };
                  if (v1 instanceof Data_Either.Right) {
                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1.value0);
                  };
                  throw new Error("Failed pattern match at Network.HTTP.Affjax line 232, column 3 - line 234, column 28: " + [ v1.constructor.name ]);
              });
          };
      };
  };                                                                   
  var get = function (dictRespondable) {
      return function (u) {
          return affjax(Network_HTTP_Affjax_Request.requestableUnit)(dictRespondable)((function () {
              var $77 = {};
              for (var $78 in defaultRequest) {
                  if ({}.hasOwnProperty.call(defaultRequest, $78)) {
                      $77[$78] = defaultRequest[$78];
                  };
              };
              $77.url = u;
              return $77;
          })());
      };
  };
  exports["defaultRequest"] = defaultRequest;
  exports["affjax"] = affjax;
  exports["get"] = get;
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Component_Common = PS["Component.Common"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var FFI_Import = PS["FFI.Import"];
  var FFI_Progress = PS["FFI.Progress"];
  var FFI_Sound = PS["FFI.Sound"];
  var Functions = PS["Functions"];
  var Halogen = PS["Halogen"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Info = PS["Info"];
  var Network_HTTP_Affjax = PS["Network.HTTP.Affjax"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Operators = PS["Operators"];
  var Prelude = PS["Prelude"];
  var Structure = PS["Structure"];        
  var Zipped = (function () {
      function Zipped(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Zipped.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Zipped(value0, value1, value2);
              };
          };
      };
      return Zipped;
  })();
  var ActMsg = (function () {
      function ActMsg(value0) {
          this.value0 = value0;
      };
      ActMsg.create = function (value0) {
          return new ActMsg(value0);
      };
      return ActMsg;
  })();
  var Finish = (function () {
      function Finish(value0) {
          this.value0 = value0;
      };
      Finish.create = function (value0) {
          return new Finish(value0);
      };
      return Finish;
  })();
  var ChakraPair = (function () {
      function ChakraPair(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      ChakraPair.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new ChakraPair(value0, value1, value2, value3);
                  };
              };
          };
      };
      return ChakraPair;
  })();
  var χrate = 5;
  var vPrev = function (skills) {
      return function (i) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(skills)(i))(function (v) {
              return Data_Foldable.find(Data_Foldable.foldableArray)(function ($439) {
                  return !Functions.lMatch(v)($439);
              })(Data_Array.reverse(Data_Array.take(i)(skills)));
          });
      };
  };
  var vNext = function (skills) {
      return function (i) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(skills)(i))(function (v) {
              return Data_Foldable.find(Data_Foldable.foldableArray)(function ($440) {
                  return !Functions.lMatch(v)($440);
              })(Data_Array.drop(i)(skills));
          });
      };
  };
  var unknown = {
      characterName: "unknown",
      characterBio: "",
      characterSkills: [  ]
  };
  var sync = function (v) {
      if (v === 0) {
          return Halogen_HTML_Core.text("Permanent");
      };
      return Halogen_HTML_Core.text(Data_Show.show(Data_Show.showInt)((v + 1 | 0) / 2 | 0));
  };                
  var input = function (a) {
      return Halogen_HTML_Events.input_(Component_Common.QueryPlay.create(a));
  };
  var mClick = function (i) {
      return function (c) {
          return function (v) {
              return function (v1) {
                  if (!v) {
                      return [ Component_Common._i(i), Component_Common._c(c + " noclick") ];
                  };
                  if (v) {
                      return [ Component_Common._i(i), Component_Common._c(c + " click"), Halogen_HTML_Events.onClick(input(v1)) ];
                  };
                  throw new Error("Failed pattern match at Component.Play line 72, column 1 - line 74, column 28: " + [ i.constructor.name, c.constructor.name, v.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var hover = function ($441) {
      return Halogen_HTML_Events.onMouseEnter(input(Component_Common.View.create($441)));
  };
  var hRands = function (amount) {
      return function (random) {
          return Halogen_HTML_Elements.div([ Component_Common._c("randbar") ])([ Halogen_HTML_Elements.span([ Component_Common._c("randT") ])([ Halogen_HTML_Core.text("T") ]), Component_Common._span(Data_Show.show(Data_Show.showInt)(amount)), Halogen_HTML_Elements.a([ Component_Common._c("more noclick") ])([ Halogen_HTML_Core.text("+") ]), Halogen_HTML_Elements.a([ Component_Common._c("less noclick") ])([ Halogen_HTML_Core.text("\u2014") ]), Halogen_HTML_Elements.span([ Component_Common._c("randT") ])([ Halogen_HTML_Core.text("T") ]), Halogen_HTML_Elements.span((function () {
              var $97 = random < 0;
              if ($97) {
                  return [ Component_Common._c("negrand") ];
              };
              return [  ];
          })())([ Halogen_HTML_Core.text(Data_Show.show(Data_Show.showInt)(random)) ]) ]);
      };
  };
  var hBarrier = function (nId) {
      return function (anchor) {
          return function (track) {
              return function (barriers) {
                  var v = Data_Array.uncons(barriers);
                  if (v instanceof Data_Maybe.Nothing) {
                      return [  ];
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Data_Array.cons(Halogen_HTML_Elements.div([ Component_Common._c("charbarrier"), Component_Common._style(anchor + (Data_Show.show(Data_Show.showInt)(track) + ("%; width: " + (Data_Show.show(Data_Show.showInt)(v.value0.head.barrierAmount) + "%")))), hover(new Component_Common.ViewBarrier(v.value0.head)) ])([  ]))(hBarrier(nId)(anchor)(track + v.value0.head.barrierAmount | 0)(v.value0.tail));
                  };
                  throw new Error("Failed pattern match at Component.Play line 421, column 38 - line 428, column 62: " + [ v.constructor.name ]);
              };
          };
      };
  };
  var hDefense = function (nId) {
      return function (anchor) {
          return function (track) {
              return function (barriers) {
                  return function (defenses) {
                      var v = Data_Array.uncons(defenses);
                      if (v instanceof Data_Maybe.Nothing) {
                          return hBarrier(nId)(anchor)(track)(barriers);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Data_Array.cons(Halogen_HTML_Elements.div([ Component_Common._c("chardefense"), Component_Common._style(anchor + (Data_Show.show(Data_Show.showInt)(track) + ("%; width: " + (Data_Show.show(Data_Show.showInt)(v.value0.head.defenseAmount) + "%")))), hover(new Component_Common.ViewDefense(v.value0.head)) ])([  ]))(hDefense(nId)(anchor)(track + v.value0.head.defenseAmount | 0)(barriers)(v.value0.tail));
                      };
                      throw new Error("Failed pattern match at Component.Play line 432, column 47 - line 439, column 71: " + [ v.constructor.name ]);
                  };
              };
          };
      };
  };
  var getChakra = function (v) {
      return function (par) {
          return Data_Maybe.fromMaybe(Structure.χØ)(Data_Array.index(v.gameChakra)(par));
      };
  };
  var getC = function (cs) {
      return function (nId) {
          return Data_Maybe.fromMaybe(unknown)(Data_Array.index(cs)(nId));
      };
  };
  var hAct = function (cs) {
      return function (v) {
          return Halogen_HTML_Elements.div([ Component_Common._c("act click"), Halogen_HTML_Events.onClick(input(new Component_Common.Enact(Component_Common.Delete.value, v))) ])([ Halogen_HTML_Elements.img([ Component_Common.cIcon(getC(cs)(Functions.skillRoot(v.actSkill)(v.actC)))(Structure.label_(v.actSkill)) ]), Halogen_HTML_Elements.div([ Component_Common._c("actcost") ])(Component_Common.hCost(Structure.actCost(v))) ]);
      };
  };
  var hChannel = function (cs) {
      return function (v) {
          var dur = Structure.channelingDur(v.channelDur);
          var classF = function (v1) {
              if (v1 instanceof Structure.Action) {
                  return function (v2) {
                      return "action " + v2;
                  };
              };
              if (v1 instanceof Structure.Control) {
                  return function (v2) {
                      return "control " + v2;
                  };
              };
              return Control_Category.id(Control_Category.categoryFn);
          };
          return Halogen_HTML_Elements.div([ Component_Common._c(classF(v.channelDur)("status")), hover(new Component_Common.ViewSkill(v.channelRoot, [  ], v.channelSkill)) ])([ Halogen_HTML_Elements.div([ Component_Common._c("statusDur") ])((function () {
              var $120 = dur === 0;
              if ($120) {
                  return [  ];
              };
              return [ sync(dur) ];
          })()), Halogen_HTML_Elements.div([ Component_Common._c("statusBorder") ])([ Halogen_HTML_Elements.img([ Component_Common.cIcon(getC(cs)(v.channelRoot))(Structure.label_(v.channelSkill)) ]) ]) ]);
      };
  };
  var fromAlly = function (c) {
      return function (v) {
          return Functions.allied(c)(v.root) && Functions.allied(c)(v.src);
      };
  };
  var hInfo = function (team) {
      return function (nId) {
          return function (cs) {
              return function (v) {
                  var removes = (function () {
                      if (fromAlly(nId)(v)) {
                          return Data_Function["const"](false);
                      };
                      if (Data_Boolean.otherwise) {
                          return Functions.removable(team);
                      };
                      throw new Error("Failed pattern match at Component.Play line 486, column 9 - line 487, column 53: " + [  ]);
                  })();
                  var classes$prime = Data_Array.catMaybes([ new Data_Maybe.Just("status"), Operators.justIf(v.trap)("trap"), Operators.justIf(v.ghost || v.dur === 1)("tag"), Operators.justIf(Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(removes)(v.effects))("remove"), Operators.justIf(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)("Shifted")(v.classes))("reflected"), Operators.justIf(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)("Invisible")(v.classes))("fade") ]);
                  return Halogen_HTML_Elements.div([ Component_Common._c(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")(classes$prime)), hover(new Component_Common.ViewInfo(removes, v)) ])([ Halogen_HTML_Elements.div([ Component_Common._c("statusBorder") ])([ Halogen_HTML_Elements.img([ Component_Common.cIcon(getC(cs)(v.root))(v.name) ]) ]), Halogen_HTML_Elements.div([ Component_Common._c("statusDur") ])((function () {
                      var $132 = v.dur === 0;
                      if ($132) {
                          return [  ];
                      };
                      return [ sync(v.dur) ];
                  })()) ]);
              };
          };
      };
  };
  var enactUrl = function (rand) {
      return function (trade) {
          return function (acts) {
              var χList$prime = function (v) {
                  return [ v.blood, v.gen, v.nin, v.tai ];
              };
              var χList = Data_Functor.map(Data_Functor.functorArray)(function ($442) {
                  return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(",")(Operators.multimap(Data_Functor.functorArray)(Data_Show.show(Data_Show.showInt))(χList$prime)($442));
              })([ rand, trade ]);
              var actList$prime = function (v) {
                  return [ v.actC, v.actS, v.actT ];
              };
              var actList = Data_Functor.map(Data_Functor.functorArray)(function ($443) {
                  return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(",")(Operators.multimap(Data_Functor.functorArray)(Data_Show.show(Data_Show.showInt))(actList$prime)($443));
              })(acts);
              return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("/")(Data_Semigroup.append(Data_Semigroup.semigroupArray)(χList)(actList));
          };
      };
  };
  var descEffect = function (v) {
      return [ Halogen_HTML_Core.text("- " + v.effectDesc) ];
  };
  var viewEffect = function (removes) {
      return function (v) {
          if (v.effectTrap) {
              return Halogen_HTML_Elements.div([ Component_Common._c("trap") ])(descEffect(v));
          };
          if (removes(v)) {
              return Halogen_HTML_Elements.div([ Component_Common._c("remove") ])(descEffect(v));
          };
          if (Data_Boolean.otherwise) {
              return Halogen_HTML_Elements.div_(descEffect(v));
          };
          throw new Error("Failed pattern match at Component.Play line 505, column 1 - line 505, column 59: " + [ removes.constructor.name, v.constructor.name ]);
      };
  };
  var cant = function (nId) {
      return function (skill) {
          return function (within) {
              return Halogen_HTML_Elements.div([ Component_Common._c("charmove noclick"), hover(new Component_Common.ViewSkill(nId, [  ], skill)), Halogen_HTML_Events.onMouseLeave(input(Component_Common.Unhighlight.value)) ])(within);
          };
      };
  };
  var hSkill = function (nId) {
      return function (χs) {
          return function (active) {
              return function (cs) {
                  return function (sI) {
                      return function (ts) {
                          return function (v) {
                              return function (cd) {
                                  if (cd > 0) {
                                      return cant(nId)(v)([ Halogen_HTML_Elements.img([ Component_Common.cIcon(getC(cs)(Functions.skillRoot(v)(nId)))(v.label) ]), Halogen_HTML_Elements.div([ Component_Common._c("cd") ])([ Halogen_HTML_Core.text(Data_Show.show(Data_Show.showInt)(Data_Ord.max(Data_Ord.ordInt)(1)(cd / 2 | 0))) ]) ]);
                                  };
                                  if (!active || (Data_Eq.eq(Structure.eqRequirement)(v.require)(Structure.Unusable.value) || (Functions.lacks(Functions.χMinus(χs)(v.cost)) || Data_Array["null"](ts)))) {
                                      return cant(nId)(v)([ Halogen_HTML_Elements.img([ Component_Common.cIcon(getC(cs)(Functions.skillRoot(v)(nId)))(v.label) ]) ]);
                                  };
                                  if (Data_Boolean.otherwise) {
                                      var act = {
                                          actC: nId,
                                          actS: sI,
                                          actT: nId,
                                          actSkill: v,
                                          actTs: ts
                                      };
                                      var action = (function () {
                                          if (Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqInt))(Functions.skillTarget(nId)(v))([ nId ])) {
                                              return new Component_Common.Enact(Component_Common.Add.value, act);
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return new Component_Common.Toggle(act);
                                          };
                                          throw new Error("Failed pattern match at Component.Play line 466, column 9 - line 467, column 60: " + [  ]);
                                      })();
                                      return Halogen_HTML_Elements.div([ Component_Common._c("charmove click"), hover(new Component_Common.ViewSkill(nId, ts, v)), Halogen_HTML_Events.onMouseLeave(input(Component_Common.Unhighlight.value)), Halogen_HTML_Events.onClick(input(action)) ])([ Halogen_HTML_Elements.img([ Component_Common.cIcon(getC(cs)(Functions.skillRoot(v)(nId)))(v.label) ]) ]);
                                  };
                                  throw new Error("Failed pattern match at Component.Play line 449, column 1 - line 450, column 31: " + [ nId.constructor.name, χs.constructor.name, active.constructor.name, cs.constructor.name, sI.constructor.name, ts.constructor.name, v.constructor.name, cd.constructor.name ]);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var affordable = function (v) {
      return function (v1) {
          var χ$prime = {
              blood: (function () {
                  var $167 = v1.blood !== 0;
                  if ($167) {
                      return 0;
                  };
                  return v.blood;
              })(),
              gen: (function () {
                  var $168 = v1.gen !== 0;
                  if ($168) {
                      return 0;
                  };
                  return v.gen;
              })(),
              nin: (function () {
                  var $169 = v1.nin !== 0;
                  if ($169) {
                      return 0;
                  };
                  return v.nin;
              })(),
              tai: (function () {
                  var $170 = v1.tai !== 0;
                  if ($170) {
                      return 0;
                  };
                  return v.tai;
              })(),
              rand: 0
          };
          return χrate < Functions.χSum(χ$prime);
      };
  };
  var canExchange = function (χ) {
      return Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(affordable(χ))(Data_Functor.map(Data_Functor.functorArray)(Functions.χf)([ function (v) {
          var $171 = {};
          for (var $172 in v) {
              if ({}.hasOwnProperty.call(v, $172)) {
                  $171[$172] = v[$172];
              };
          };
          $171.blood = 1;
          return $171;
      }, function (v) {
          var $174 = {};
          for (var $175 in v) {
              if ({}.hasOwnProperty.call(v, $175)) {
                  $174[$175] = v[$175];
              };
          };
          $174.gen = 1;
          return $174;
      }, function (v) {
          var $177 = {};
          for (var $178 in v) {
              if ({}.hasOwnProperty.call(v, $178)) {
                  $177[$178] = v[$178];
              };
          };
          $177.nin = 1;
          return $177;
      }, function (v) {
          var $180 = {};
          for (var $181 in v) {
              if ({}.hasOwnProperty.call(v, $181)) {
                  $180[$181] = v[$181];
              };
          };
          $180.tai = 1;
          return $180;
      } ]));
  };
  var hChakra = function (turn) {
      return function (exchange) {
          return function (χs) {
              return function (v) {
                  var meta = (function () {
                      if (exchange) {
                          return mClick("")("chakra " + v.value0)(affordable(χs)(v.value1))(new Component_Common.ExchangeConclude(v.value1));
                      };
                      if (Data_Boolean.otherwise) {
                          return [ Component_Common._c("chakra " + v.value0) ];
                      };
                      throw new Error("Failed pattern match at Component.Play line 323, column 9 - line 325, column 53: " + [  ]);
                  })();
                  return Halogen_HTML_Elements.div_([ Halogen_HTML_Elements.div(meta)([  ]), Component_Common._span(Data_Show.show(Data_Show.showInt)(v.value2)), Halogen_HTML_Elements.a(mClick("")("more")(turn && v.value3 > 0)(Component_Common.Spend.create(Functions.χNeg(v.value1))))([ Halogen_HTML_Core.text("+") ]), Halogen_HTML_Elements.a(mClick("")("less")(turn && v.value2 > 0)(new Component_Common.Spend(v.value1)))([ Halogen_HTML_Core.text("\u2014") ]), Halogen_HTML_Elements.div([ Component_Common._c("chakra rand") ])([  ]), Component_Common._span(Data_Show.show(Data_Show.showInt)(v.value3)) ]);
              };
          };
      };
  };
  var actToggles = function (v) {
      if (v instanceof Data_Maybe.Nothing) {
          return [  ];
      };
      if (v instanceof Data_Maybe.Just) {
          return Data_Array.intersect(Data_Eq.eqInt)(v.value0.actTs)(Functions.skillTarget(v.value0.actC)(v.value0.actSkill));
      };
      throw new Error("Failed pattern match at Component.Play line 344, column 1 - line 344, column 35: " + [ v.constructor.name ]);
  };
  var hCharacter = function (cs) {
      return function (acted) {
          return function (toggle) {
              return function (highlighted) {
                  return function (χs) {
                      return function (turn) {
                          return function (onTeam) {
                              return function (v) {
                                  var retarget = function (v1) {
                                      return Structure.Act((function () {
                                          var $205 = {};
                                          for (var $206 in v1) {
                                              if ({}.hasOwnProperty.call(v1, $206)) {
                                                  $205[$206] = v1[$206];
                                              };
                                          };
                                          $205.actT = v.value1.nId;
                                          return $205;
                                      })());
                                  };
                                  var live = function (els) {
                                      if (v.value1.nHealth > 0) {
                                          return els;
                                      };
                                      if (Data_Boolean.otherwise) {
                                          return [  ];
                                      };
                                      throw new Error("Failed pattern match at Component.Play line 370, column 5 - line 371, column 33: " + [ els.constructor.name ]);
                                  };
                                  var hp = Data_Show.show(Data_Show.showInt)(v.value1.nHealth) + "%";
                                  var hInfos = live(Operators.multimap(Data_Functor.functorArray)(hInfo(onTeam)(v.value1.nId)(cs))(Operators.doIf(onTeam)(Data_Array.reverse))(Info.infos(v.value1)));
                                  var hChannels = live(Data_Functor.map(Data_Functor.functorArray)(hChannel(cs))(Data_Array.reverse(v.value1.nChannels)));
                                  var faceIcon = (function () {
                                      var v1 = Data_Array.head(v.value1.nFace);
                                      if (v1 instanceof Data_Maybe.Nothing) {
                                          return Component_Common.cIcon(v.value0)("icon");
                                      };
                                      if (v1 instanceof Data_Maybe.Just) {
                                          return Component_Common.cIcon(getC(cs)(v1.value0.faceSrc))("icon" + v1.value0.faceIcon);
                                      };
                                      throw new Error("Failed pattern match at Component.Play line 395, column 16 - line 398, column 54: " + [ v1.constructor.name ]);
                                  })();
                                  var classes = Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")(Data_Array.catMaybes([ new Data_Maybe.Just("chariconcont"), Operators.justIf(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(v.value1.nId)(highlighted))(" highlighted"), Operators.justIf(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(v.value1.nId)(actToggles(toggle)))(" toggled skill") ]));
                                  var mainMeta = Data_Array.catMaybes([ Data_Maybe.Just.create(Component_Common._c(classes)), Data_Maybe.Just.create(hover(new Component_Common.ViewCharacter(v.value0))), Data_Functor.map(Data_Maybe.functorMaybe)(function ($444) {
                                      return Halogen_HTML_Events.onClick(input(Component_Common.Enact.create(Component_Common.Add.value)(retarget($444))));
                                  })(toggle) ]);
                                  var anchor = (function () {
                                      if (onTeam) {
                                          return "left: ";
                                      };
                                      if (Data_Boolean.otherwise) {
                                          return "right: ";
                                      };
                                      throw new Error("Failed pattern match at Component.Play line 393, column 5 - line 395, column 5: " + [  ]);
                                  })();
                                  var hDefenses = live(hDefense(v.value1.nId)(anchor)(v.value1.nHealth)(Data_Array.reverse(v.value1.nBarrier))(Data_Array.reverse(v.value1.nDefense)));
                                  var active = onTeam && (turn && (v.value1.nHealth > 0 && Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(v.value1.nId)(acted)));
                                  var mainBar = Operators.doIf(!onTeam)(Data_Array.reverse)([ Halogen_HTML_Elements.div(mainMeta)([ Halogen_HTML_Elements.img([ Component_Common._c("charicon"), faceIcon ]) ]), Halogen_HTML_Elements.div([ Component_Common._c("charmoves") ])(Functions.zip4(hSkill(v.value1.nId)(χs)(active)(cs))(Data_Array.range(0)(3))(v.value2)(v.value1.nSkills)(Operators.doIf(v.value1.nHealth > 0)(function (v1) {
                                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value1.nCooldowns)(v1);
                                  })([ 0, 0, 0, 0 ]))) ]);
                                  return Halogen_HTML_Elements.div([ Component_Common._c(Operators.doIf(v.value1.nHealth === 0)(function (v1) {
                                      return "dead " + v1;
                                  })("playerchar")) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.cons(Halogen_HTML_Elements.div([ Component_Common._c("channels") ])(hChannels))(mainBar))([ Halogen_HTML_Elements.div([ Component_Common._c("charhealthbar") ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Halogen_HTML_Elements.div([ Component_Common._c("charhealth"), Component_Common._style("width: " + hp) ])([  ]), Halogen_HTML_Elements.div([ Component_Common._c("charhealthtext"), Component_Common._style(anchor + hp) ])(live([ Halogen_HTML_Core.text(Data_Show.show(Data_Show.showInt)(v.value1.nHealth)) ])) ])(hDefenses)), Halogen_HTML_Elements.div([ Component_Common._c("statuses") ])(hInfos) ]));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var _label = function (l) {
      return Halogen_HTML_Elements.div([ Component_Common._c("barlabel") ])([ Halogen_HTML_Core.text(l) ]);
  };
  var viewBar = function (src) {
      return function (l) {
          return function (amount) {
              return function (dur) {
                  return [ Halogen_HTML_Elements.img([ Component_Common._c("char"), Component_Common.cIcon(src)(l) ]), Halogen_HTML_Elements.div([ Component_Common._i("barname") ])([ Halogen_HTML_Core.text(l) ]), _label("Amount: "), Halogen_HTML_Elements.div_([ Halogen_HTML_Core.text(Data_Show.show(Data_Show.showInt)(amount)) ]), _label("Duration: "), Halogen_HTML_Elements.div_([ sync(dur) ]), _label("Source: "), Halogen_HTML_Elements.div_([ Halogen_HTML_Core.text(Structure.characterName_(src)) ]) ];
              };
          };
      };
  };
  var viewClasses = function (v) {
      return function (v1) {
          if (v1.length === 0) {
              return [  ];
          };
          return [ _label("Classes :"), Halogen_HTML_Elements.div_([ Halogen_HTML_Core.text(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")(Functions.filterClasses(v)(v1))) ]) ];
      };
  };
  var view = function (cs) {
      return function (v) {
          if (v instanceof Component_Common.ViewBarrier) {
              return viewBar(getC(cs)(v.value0.barrierSrc))(v.value0.barrierL)(v.value0.barrierAmount)(v.value0.barrierDur);
          };
          if (v instanceof Component_Common.ViewDefense) {
              return viewBar(getC(cs)(v.value0.defenseSrc))(v.value0.defenseL)(v.value0.defenseAmount)(v.value0.defenseDur);
          };
          if (v instanceof Component_Common.ViewCharacter) {
              return [ Halogen_HTML_Elements.img([ Component_Common._c("char"), Component_Common.cIcon(v.value0)("icon") ]), Halogen_HTML_Elements.div([ Component_Common._i("barname") ])([ Halogen_HTML_Core.text(v.value0.characterName) ]), Halogen_HTML_Elements.div([ Component_Common._i("bardesc") ])([ Halogen_HTML_Core.text(v.value0.characterBio) ]) ];
          };
          if (v instanceof Component_Common.ViewInfo) {
              var name$prime = (function () {
                  if (Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)("Shifted")(v.value1.classes)) {
                      return Halogen_HTML_Elements.span([ Component_Common._c("reflected") ])([ Halogen_HTML_Core.text(v.value1.name + " (Reflected)") ]);
                  };
                  if (Data_Boolean.otherwise) {
                      return Halogen_HTML_Elements.span_([ Halogen_HTML_Core.text(v.value1.name) ]);
                  };
                  throw new Error("Failed pattern match at Component.Play line 537, column 9 - line 539, column 62: " + [  ]);
              })();
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Halogen_HTML_Elements.img([ Component_Common._c("char"), Component_Common.cIcon(getC(cs)(v.value1.root))("icon") ]), Halogen_HTML_Elements.div([ Component_Common._i("barname") ])([ name$prime ]), _label("Source: "), Halogen_HTML_Elements.div_([ Halogen_HTML_Core.text(Structure.characterName_(getC(cs)(v.value1.src))) ]) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(viewClasses(true)(v.value1.classes))([ Halogen_HTML_Elements.div([ Component_Common._i("bardesc") ])(Component_Common.parseDesc(v.value1.desc)), Halogen_HTML_Elements.div([ Component_Common._i("bareffects") ])(Data_Functor.map(Data_Functor.functorArray)(viewEffect(v.value0))(v.value1.effects)) ]));
          };
          if (v instanceof Component_Common.ViewSkill) {
              var varyButtons = Data_Maybe.fromMaybe([  ])(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(cs)(Functions.skillRoot(v.value2)(v.value0)))(function (v1) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Foldable.find(Data_Foldable.foldableArray)(Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Functions.lMatch(v.value2)))(v1.characterSkills))(function (v2) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.findIndex(Functions.lMatch(v.value2))(v2))(function (v3) {
                          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Array.catMaybes([ Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(vPrev(v2)(v3))(function (v4) {
                              return Halogen_HTML_Elements.a([ Component_Common._c("prevSkill click"), Halogen_HTML_Events.onClick(input(Component_Common.View.create(new Component_Common.ViewSkill(v.value0, [  ], v4)))) ])([  ]);
                          }), Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(vNext(v2)(v3))(function (v4) {
                              return Halogen_HTML_Elements.a([ Component_Common._c("nextSkill click"), Halogen_HTML_Events.onClick(input(Component_Common.View.create(new Component_Common.ViewSkill(v.value0, [  ], v4)))) ])([  ]);
                          }) ]));
                      });
                  });
              }));
              var cost$prime$prime = function (χs) {
                  if (Data_Eq.eq(Structure.eqChakras)(χs)(Structure.χØ)) {
                      return [ Halogen_HTML_Core.text("Free") ];
                  };
                  if (Data_Boolean.otherwise) {
                      return Component_Common.hCost(χs);
                  };
                  throw new Error("Failed pattern match at Component.Play line 557, column 9 - line 558, column 41: " + [ χs.constructor.name ]);
              };
              var cost$prime = cost$prime$prime(v.value2.cost);
              var cd$prime = (function () {
                  if (v.value2.cd === 0) {
                      return "None";
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Show.show(Data_Show.showInt)(v.value2.cd);
                  };
                  throw new Error("Failed pattern match at Component.Play line 554, column 9 - line 555, column 39: " + [  ]);
              })();
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Halogen_HTML_Elements.div([ Component_Common._c("skillPreview") ])(Data_Array.cons(Halogen_HTML_Elements.img([ Component_Common._c("char"), Component_Common.cIcon(getC(cs)(Functions.skillRoot(v.value2)(v.value0)))(v.value2.label) ]))(varyButtons)), Halogen_HTML_Elements.div([ Component_Common._i("barname") ])([ Halogen_HTML_Core.text(v.value2.label) ]), _label("Cost: "), Halogen_HTML_Elements.div_(cost$prime), _label("Duration: "), Halogen_HTML_Elements.div_([ Halogen_HTML_Core.text(Functions.skillDur(v.value2)) ]) ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(viewClasses(false)(v.value2.classes))([ _label("Cooldown: "), Halogen_HTML_Elements.div_([ Halogen_HTML_Core.text(cd$prime) ]), Halogen_HTML_Elements.div([ Component_Common._i("bardesc") ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Component_Common.parseDesc(v.value2.desc))(Data_Array.catMaybes([ Operators.justIf(v.value2.charges > 1)(Component_Common._minor(Data_Show.show(Data_Show.showInt)(v.value2.charges) + " charges.")), Operators.justIf(v.value2.charges === 1)(Component_Common._minor(Data_Show.show(Data_Show.showInt)(v.value2.charges) + " charge.")) ]))) ]));
          };
          if (v instanceof Component_Common.ViewUser) {
              return [ Halogen_HTML_Elements.img([ Component_Common._c("char"), Component_Common._src(v.value0.avatar) ]), Halogen_HTML_Elements.div([ Component_Common._i("barname") ])([ Halogen_HTML_Core.text(v.value0.name) ]), Halogen_HTML_Elements.div_([ Halogen_HTML_Core.text(Functions.userRank(v.value0)) ]), _label("Clan: "), Halogen_HTML_Elements.div_([ Halogen_HTML_Core.text(Data_Maybe.fromMaybe("Clanless")(v.value0.clan)) ]), _label("Level: "), Halogen_HTML_Elements.div_([ Halogen_HTML_Core.text(Data_Show.show(Data_Show.showInt)(Functions.userLevel(v.value0))) ]) ];
          };
          throw new Error("Failed pattern match at Component.Play line 514, column 1 - line 514, column 57: " + [ cs.constructor.name, v.constructor.name ]);
      };
  };
  var component = function (practice) {
      return function (v) {
          var render = function (v1) {
              var v2 = Data_Maybe.fromMaybe(v1.vs)(FFI_Import.user);
              var turn = v1.game.gamePlaying === v1.par;
              var v3 = Functions.χAdd(v1.exchanged)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Functions.χMinus)(v1.chakras)(Data_Functor.map(Data_Functor.functorArray)(Structure.actCost)(v1.acts)));
              var χrand = (Functions.χSum(v1.randoms) + v3.rand | 0) - (χrate * Functions.χSum(v1.exchanged) | 0) | 0;
              var readyMeta = (function () {
                  if (!turn) {
                      return [ Component_Common._c("noclick") ];
                  };
                  if (χrand !== 0) {
                      return [ Component_Common._c("noChakra") ];
                  };
                  if (Data_Boolean.otherwise) {
                      return [ Component_Common._c("click"), Halogen_HTML_Events.onClick(input(Component_Common.Ready.create(v1.practice)(enactUrl(v1.randoms)(v1.exchanged)(v1.acts)))) ];
                  };
                  throw new Error("Failed pattern match at Component.Play line 186, column 7 - line 191, column 42: " + [  ]);
              })();
              var pair = function (name) {
                  return function (get) {
                      return function (χs) {
                          var get$prime = function (v4) {
                              return get(v4);
                          };
                          return new ChakraPair(name, χs, get$prime(v3), get$prime(v1.randoms));
                      };
                  };
              };
              var pairedChakras = [ pair("blood")(function (v4) {
                  return v4.blood;
              })(Functions.χf(function (v4) {
                  var $273 = {};
                  for (var $274 in v4) {
                      if ({}.hasOwnProperty.call(v4, $274)) {
                          $273[$274] = v4[$274];
                      };
                  };
                  $273.blood = 1;
                  return $273;
              })), pair("gen")(function (v4) {
                  return v4.gen;
              })(Functions.χf(function (v4) {
                  var $276 = {};
                  for (var $277 in v4) {
                      if ({}.hasOwnProperty.call(v4, $277)) {
                          $276[$277] = v4[$277];
                      };
                  };
                  $276.gen = 1;
                  return $276;
              })), pair("nin")(function (v4) {
                  return v4.nin;
              })(Functions.χf(function (v4) {
                  var $279 = {};
                  for (var $280 in v4) {
                      if ({}.hasOwnProperty.call(v4, $280)) {
                          $279[$280] = v4[$280];
                      };
                  };
                  $279.nin = 1;
                  return $279;
              })), pair("tai")(function (v4) {
                  return v4.tai;
              })(Functions.χf(function (v4) {
                  var $282 = {};
                  for (var $283 in v4) {
                      if ({}.hasOwnProperty.call(v4, $283)) {
                          $282[$283] = v4[$283];
                      };
                  };
                  $282.tai = 1;
                  return $282;
              })) ];
              var pAlly = function (v4) {
                  return Functions.allied(v1.par)(v4.value1.nId);
              };
              var freeRands = Functions.χSum(v3) + χrand | 0;
              var free = (function () {
                  var $290 = {};
                  for (var $291 in v3) {
                      if ({}.hasOwnProperty.call(v3, $291)) {
                          $290[$291] = v3[$291];
                      };
                  };
                  $290.rand = freeRands;
                  return $290;
              })();
              var exchangeable = freeRands >= 5 && (canExchange(v3) && turn);
              var cs = Data_Array.zipWith(Functions.mergeSkills)(v1.characters)(v1.game.gameNinjas);
              var acted = Data_Functor.map(Data_Functor.functorArray)(Structure.actC_)(v1.acts);
              var hNinja = hCharacter(cs)(acted)(v1.toggled)(v1.highlight)(free)(turn);
              var v4 = Data_Array.partition(pAlly)(Functions.zip3(Zipped.create)(cs)(v1.game.gameNinjas)(v1.game.gameTargets));
              return Halogen_HTML_Elements.div([ Component_Common._i("game") ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Halogen_HTML_Elements.span([ Component_Common._c("error") ])([ Halogen_HTML_Core.text(v1.error) ]), Halogen_HTML_Elements.div([ Component_Common._i("top") ])([ Halogen_HTML_Elements.div([ Component_Common._i("account0cont"), Component_Common._c("accountcont") ])([ Halogen_HTML_Elements.div([ Component_Common._c("account") ])([ Halogen_HTML_Elements.div([ Component_Common._c("accountName") ])([ Halogen_HTML_Core.text(v2.name) ]), Halogen_HTML_Elements.div([ Component_Common._c("accountRank") ])([ Halogen_HTML_Core.text(Functions.userRank(v2)) ]) ]), Halogen_HTML_Elements.div([ Component_Common._c("avatarcont") ])([ Halogen_HTML_Elements.img([ Component_Common._c("charicon"), Component_Common._src(v2.avatar) ]) ]) ]), Halogen_HTML_Elements.div([ Component_Common._i("playbar"), Component_Common._c("parchment") ])(view(cs)(v1.viewing)), Halogen_HTML_Elements.div([ Component_Common._i("account1cont"), Component_Common._c("accountcont") ])([ Halogen_HTML_Elements.div([ Component_Common._c("avatarcont") ])([ Halogen_HTML_Elements.img([ Component_Common._c("charicon"), Component_Common._src(v1.vs.avatar) ]) ]), Halogen_HTML_Elements.div([ Component_Common._c("account") ])([ Halogen_HTML_Elements.div([ Component_Common._c("accountName") ])([ Halogen_HTML_Core.text(v1.vs.name) ]), Halogen_HTML_Elements.div([ Component_Common._c("accountRank") ])([ Halogen_HTML_Core.text(Functions.userRank(v1.vs)) ]) ]) ]) ]), Halogen_HTML_Elements.div([ Component_Common._i("player0"), Component_Common._c("player") ])(Data_Functor.map(Data_Functor.functorArray)(hNinja(true))(v4.yes)), Halogen_HTML_Elements.div([ Component_Common._i("player1"), Component_Common._c("player") ])(Data_Functor.map(Data_Functor.functorArray)(hNinja(false))(v4.no)) ])((function () {
                  if (v1.game.gameVictor instanceof Data_Maybe.Nothing) {
                      return [ Halogen_HTML_Elements.div([ Component_Common._i("playchakra") ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(hChakra(turn)(v1.exchange)(v3))(pairedChakras))([ hRands(Functions.χSum(v3))(χrand), Halogen_HTML_Elements.div(mClick("exchange")("chakraButton")(exchangeable)(Component_Common.ExchangeBegin.value))([ Halogen_HTML_Core.text("Exchange") ]), Halogen_HTML_Elements.div(mClick("reset")("chakraButton")(Data_Eq.notEq(Structure.eqChakras)(v1.exchanged)(Structure.χØ))(Component_Common.ExchangeReset.value))([ Halogen_HTML_Core.text("Reset") ]) ])), Halogen_HTML_Elements.div([ Component_Common._i("playqueuecont") ])([ Halogen_HTML_Elements.div([ Component_Common._i("playqueue") ])(Data_Functor.map(Data_Functor.functorArray)(hAct(cs))(v1.acts)), Halogen_HTML_Elements.div(Data_Array.cons(Component_Common._i("ready"))(readyMeta))([  ]) ]) ];
                  };
                  if (v1.game.gameVictor instanceof Data_Maybe.Just) {
                      return [ Halogen_HTML_Elements.div([ Component_Common._i("endgame") ])([ Halogen_HTML_Elements.div([ Component_Common._i("endgamemsg") ])([ Halogen_HTML_Core.text((function () {
                          var $295 = v1.game.gameVictor.value0 === v1.par;
                          if ($295) {
                              return "Victory";
                          };
                          return "Defeat";
                      })()) ]), Component_Common._a("return")("playButton parchment click")("/")("Return") ]) ];
                  };
                  throw new Error("Failed pattern match at Component.Play line 153, column 11 - line 176, column 12: " + [ v1.game.gameVictor.constructor.name ]);
              })()));
          };
          var initialState = {
              practice: practice,
              par: v.gamePar,
              vs: v.gameVsUser,
              characters: v.gameCharacters,
              game: v.gameGame,
              chakras: getChakra(v.gameGame)(v.gamePar),
              randoms: Structure.χØ,
              exchanged: Structure.χØ,
              exchange: false,
              viewing: new Component_Common.ViewUser(v.gameVsUser),
              highlight: [  ],
              toggled: Data_Maybe.Nothing.value,
              acts: [  ],
              error: ""
          };
          var $$eval = function (v1) {
              if (v1 instanceof Component_Common.QueryPlay) {
                  var untoggle = function (v2) {
                      var $318 = {};
                      for (var $319 in v2) {
                          if ({}.hasOwnProperty.call(v2, $319)) {
                              $318[$319] = v2[$319];
                          };
                      };
                      $318.toggled = Data_Maybe.Nothing.value;
                      return $318;
                  };
                  return (function (v2) {
                      return Operators.advance(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.applicativeHalogenM)(v2)(v1.value1);
                  })((function () {
                      if (v1.value0 instanceof Component_Common.Enact && v1.value0.value0 instanceof Component_Common.Add) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXApplySkill.value))(function () {
                              return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                                  return untoggle((function () {
                                      var $323 = {};
                                      for (var $324 in v2) {
                                          if ({}.hasOwnProperty.call(v2, $324)) {
                                              $323[$324] = v2[$324];
                                          };
                                      };
                                      $323.acts = Data_Array.snoc(v2.acts)(v1.value0.value1);
                                      return $323;
                                  })());
                              });
                          });
                      };
                      if (v1.value0 instanceof Component_Common.Enact && v1.value0.value0 instanceof Component_Common.Delete) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXCancel.value))(function () {
                              return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                                  return untoggle((function () {
                                      var $330 = {};
                                      for (var $331 in v2) {
                                          if ({}.hasOwnProperty.call(v2, $331)) {
                                              $330[$331] = v2[$331];
                                          };
                                      };
                                      $330.acts = Data_Array["delete"](Structure.eqAct)(v1.value0.value1)(v2.acts);
                                      return $330;
                                  })());
                              });
                          });
                      };
                      if (v1.value0 instanceof Component_Common.ExchangeBegin) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXTarget.value))(function () {
                              return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (state) {
                                  var $336 = {};
                                  for (var $337 in state) {
                                      if ({}.hasOwnProperty.call(state, $337)) {
                                          $336[$337] = state[$337];
                                      };
                                  };
                                  $336.exchange = !state.exchange;
                                  return $336;
                              });
                          });
                      };
                      if (v1.value0 instanceof Component_Common.ExchangeConclude) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXClick.value))(function () {
                              return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                                  var $340 = {};
                                  for (var $341 in v2) {
                                      if ({}.hasOwnProperty.call(v2, $341)) {
                                          $340[$341] = v2[$341];
                                      };
                                  };
                                  $340.exchanged = Functions.χAdd(v2.exchanged)(v1.value0.value0);
                                  $340.exchange = false;
                                  return $340;
                              });
                          });
                      };
                      if (v1.value0 instanceof Component_Common.ExchangeReset) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXCancel.value))(function () {
                              return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                                  var $346 = {};
                                  for (var $347 in v2) {
                                      if ({}.hasOwnProperty.call(v2, $347)) {
                                          $346[$347] = v2[$347];
                                      };
                                  };
                                  $346.chakras = getChakra(v2.game)(v2.par);
                                  $346.randoms = Structure.χØ;
                                  $346.exchanged = Structure.χØ;
                                  $346.exchange = false;
                                  return $346;
                              });
                          });
                      };
                      if (v1.value0 instanceof Component_Common.ReceiveGame) {
                          if (v1.value0.value0.gameVictor instanceof Data_Maybe.Just) {
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v2) {
                                  var winner = v1.value0.value0.gameVictor.value0 === v2.par;
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))((function () {
                                      if (winner) {
                                          return FFI_Sound.SFXWin.value;
                                      };
                                      return FFI_Sound.SFXLose.value;
                                  })()))(function () {
                                      return Halogen_Query_HalogenM.raise(new Finish(winner));
                                  });
                              });
                          };
                          if (v1.value0.value0.gameVictor instanceof Data_Maybe.Nothing) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXStartTurn.value))(function () {
                                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v2) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))((function () {
                                          var $357 = v1.value0.value0.gamePlaying === v2.par;
                                          if ($357) {
                                              return FFI_Progress.progress(60000.0)(1)(0);
                                          };
                                          return FFI_Progress.progress(60000.0)(0)(1);
                                      })()))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v3) {
                                              var $359 = {};
                                              for (var $360 in v3) {
                                                  if ({}.hasOwnProperty.call(v3, $360)) {
                                                      $359[$360] = v3[$360];
                                                  };
                                              };
                                              $359.game = v1.value0.value0;
                                              $359.chakras = getChakra(v1.value0.value0)(v3.par);
                                              $359.randoms = Structure.χØ;
                                              $359.exchanged = Structure.χØ;
                                              $359.acts = [  ];
                                              return $359;
                                          }))(function () {
                                              return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(Functions.living(v2.par)(v2.game) > Functions.living(v2.par)(v1.value0.value0))(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXDeath.value));
                                          });
                                      });
                                  });
                              });
                          };
                          throw new Error("Failed pattern match at Component.Play line 230, column 9 - line 248, column 79: " + [ v1.value0.value0.gameVictor.constructor.name ]);
                      };
                      if (v1.value0 instanceof Component_Common.Ready && !v1.value0.value0) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXNextTurn.value))(function () {
                              return Halogen_Query_HalogenM.raise(ActMsg.create(v1.value0.value1));
                          });
                      };
                      if (v1.value0 instanceof Component_Common.Ready && v1.value0.value0) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function ($445) {
                              return untoggle((function (v2) {
                                  var $368 = {};
                                  for (var $369 in v2) {
                                      if ({}.hasOwnProperty.call(v2, $369)) {
                                          $368[$369] = v2[$369];
                                      };
                                  };
                                  $368.exchange = false;
                                  $368.exchanged = Structure.χØ;
                                  return $368;
                              })($445));
                          }))(function () {
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(Control_Monad_Aff_Class.monadAffAff))(Network_HTTP_Affjax.get(Network_HTTP_Affjax_Response.responsableJson)("/api/practiceact/" + v1.value0.value1)))(function (v2) {
                                  var v3 = Structure.decodeGames(v2.response);
                                  if (v3 instanceof Data_Either.Right && v3.value0.length === 2) {
                                      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v4) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v5) {
                                              var $375 = {};
                                              for (var $376 in v5) {
                                                  if ({}.hasOwnProperty.call(v5, $376)) {
                                                      $375[$376] = v5[$376];
                                                  };
                                              };
                                              $375.game = v3["value0"][0];
                                              $375.chakras = getChakra(v3["value0"][0])(v5.par);
                                              $375.randoms = Structure.χØ;
                                              $375.exchanged = Structure.χØ;
                                              $375.acts = [  ];
                                              return $375;
                                          }))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Progress.progress(1500.0)(0)(1)))(function () {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(Control_Monad_Aff_Class.monadAffAff))(Control_Monad_Aff.delay(1500.0)))(function () {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Progress.progress(0.0)(1)(1)))(function () {
                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXStartTurn.value))(function () {
                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v5) {
                                                                  var $380 = {};
                                                                  for (var $381 in v5) {
                                                                      if ({}.hasOwnProperty.call(v5, $381)) {
                                                                          $380[$381] = v5[$381];
                                                                      };
                                                                  };
                                                                  $380.game = v3["value0"][1];
                                                                  $380.chakras = getChakra(v3["value0"][1])(v5.par);
                                                                  $380.randoms = Structure.χØ;
                                                                  $380.exchanged = Structure.χØ;
                                                                  $380.acts = [  ];
                                                                  $380.exchange = false;
                                                                  return $380;
                                                              }))(function () {
                                                                  return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(Functions.living(v4.par)(v4.game) > Functions.living(v4.par)(v3["value0"][1]))(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXDeath.value));
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  };
                                  if (v3 instanceof Data_Either.Left) {
                                      return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v4) {
                                          var $389 = {};
                                          for (var $390 in v4) {
                                              if ({}.hasOwnProperty.call(v4, $390)) {
                                                  $389[$390] = v4[$390];
                                              };
                                          };
                                          $389.error = v3.value0;
                                          return $389;
                                      });
                                  };
                                  if (v3 instanceof Data_Either.Right) {
                                      return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v4) {
                                          var $393 = {};
                                          for (var $394 in v4) {
                                              if ({}.hasOwnProperty.call(v4, $394)) {
                                                  $393[$394] = v4[$394];
                                              };
                                          };
                                          $393.error = "Unknown error";
                                          return $393;
                                      });
                                  };
                                  throw new Error("Failed pattern match at Component.Play line 255, column 9 - line 279, column 51: " + [ v3.constructor.name ]);
                              });
                          });
                      };
                      if (v1.value0 instanceof Component_Common.Spend) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXClick.value))(function () {
                              return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                                  var $401 = {};
                                  for (var $402 in v2) {
                                      if ({}.hasOwnProperty.call(v2, $402)) {
                                          $401[$402] = v2[$402];
                                      };
                                  };
                                  $401.randoms = Functions.χAdd(v2.randoms)(v1.value0.value0);
                                  $401.chakras = Functions.χMinus(v2.chakras)(v1.value0.value0);
                                  return $401;
                              });
                          });
                      };
                      if (v1.value0 instanceof Component_Common.Toggle) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXTarget.value))(function () {
                              return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                                  var $408 = Data_Eq.eq(Data_Maybe.eqMaybe(Structure.eqAct))(v2.toggled)(new Data_Maybe.Just(v1.value0.value0));
                                  if ($408) {
                                      var $409 = {};
                                      for (var $410 in v2) {
                                          if ({}.hasOwnProperty.call(v2, $410)) {
                                              $409[$410] = v2[$410];
                                          };
                                      };
                                      $409.toggled = Data_Maybe.Nothing.value;
                                      return $409;
                                  };
                                  var $412 = {};
                                  for (var $413 in v2) {
                                      if ({}.hasOwnProperty.call(v2, $413)) {
                                          $412[$413] = v2[$413];
                                      };
                                  };
                                  $412.toggled = new Data_Maybe.Just(v1.value0.value0);
                                  return $412;
                              });
                          });
                      };
                      if (v1.value0 instanceof Component_Common.View && v1.value0.value0 instanceof Component_Common.ViewSkill) {
                          return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                              var $417 = {};
                              for (var $418 in v2) {
                                  if ({}.hasOwnProperty.call(v2, $418)) {
                                      $417[$418] = v2[$418];
                                  };
                              };
                              $417.viewing = v1.value0.value0;
                              $417.highlight = v1.value0.value0.value1;
                              return $417;
                          });
                      };
                      if (v1.value0 instanceof Component_Common.View) {
                          return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                              var $424 = {};
                              for (var $425 in v2) {
                                  if ({}.hasOwnProperty.call(v2, $425)) {
                                      $424[$425] = v2[$425];
                                  };
                              };
                              $424.viewing = v1.value0.value0;
                              return $424;
                          });
                      };
                      if (v1.value0 instanceof Component_Common.Unhighlight) {
                          return Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                              var $428 = {};
                              for (var $429 in v2) {
                                  if ({}.hasOwnProperty.call(v2, $429)) {
                                      $428[$429] = v2[$429];
                                  };
                              };
                              $428.highlight = [  ];
                              return $428;
                          });
                      };
                      throw new Error("Failed pattern match at Component.Play line 207, column 44 - line 294, column 38: " + [ v1.value0.constructor.name ]);
                  })());
              };
              if (v1 instanceof Component_Common.QuerySelect) {
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v1.value1);
              };
              throw new Error("Failed pattern match at Component.Play line 205, column 3 - line 206, column 65: " + [ v1.constructor.name ]);
          };
          return Halogen_Component.component(Halogen_HTML_Core.bifunctorHTML)({
              initialState: Data_Function["const"](initialState),
              render: render,
              "eval": $$eval,
              receiver: Data_Function["const"](Data_Maybe.Nothing.value)
          });
      };
  };
  exports["ActMsg"] = ActMsg;
  exports["Finish"] = Finish;
  exports["component"] = component;
})(PS["Component.Play"] = PS["Component.Play"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Component_CharacterSelect = PS["Component.CharacterSelect"];
  var Component_Common = PS["Component.Common"];
  var Component_Play = PS["Component.Play"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Generic_Aeson = PS["Data.Argonaut.Generic.Aeson"];
  var Data_Argonaut_Parser = PS["Data.Argonaut.Parser"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var FFI_Import = PS["FFI.Import"];
  var FFI_Progress = PS["FFI.Progress"];
  var FFI_Sound = PS["FFI.Sound"];
  var Halogen = PS["Halogen"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = PS["Halogen.HTML.Events"];
  var Halogen_Query = PS["Halogen.Query"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Network_HTTP_Affjax = PS["Network.HTTP.Affjax"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Operators = PS["Operators"];
  var Prelude = PS["Prelude"];
  var Structure = PS["Structure"];        
  var Waiting = (function () {
      function Waiting() {

      };
      Waiting.value = new Waiting();
      return Waiting;
  })();
  var Queueing = (function () {
      function Queueing() {

      };
      Queueing.value = new Queueing();
      return Queueing;
  })();
  var Playing = (function () {
      function Playing() {

      };
      Playing.value = new Playing();
      return Playing;
  })();
  var Practicing = (function () {
      function Practicing() {

      };
      Practicing.value = new Practicing();
      return Practicing;
  })();
  var HandleQueue = (function () {
      function HandleQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      HandleQueue.create = function (value0) {
          return function (value1) {
              return new HandleQueue(value0, value1);
          };
      };
      return HandleQueue;
  })();
  var HandleGame = (function () {
      function HandleGame(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      HandleGame.create = function (value0) {
          return function (value1) {
              return new HandleGame(value0, value1);
          };
      };
      return HandleGame;
  })();
  var ReceiveMsg = (function () {
      function ReceiveMsg(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ReceiveMsg.create = function (value0) {
          return function (value1) {
              return new ReceiveMsg(value0, value1);
          };
      };
      return ReceiveMsg;
  })();
  var SelectSlot = (function () {
      function SelectSlot() {

      };
      SelectSlot.value = new SelectSlot();
      return SelectSlot;
  })();
  var PlaySlot = (function () {
      function PlaySlot() {

      };
      PlaySlot.value = new PlaySlot();
      return PlaySlot;
  })();
  var turnTime = 60000.0;
  var eqStage = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Waiting && y instanceof Waiting) {
              return true;
          };
          if (x instanceof Queueing && y instanceof Queueing) {
              return true;
          };
          if (x instanceof Playing && y instanceof Playing) {
              return true;
          };
          if (x instanceof Practicing && y instanceof Practicing) {
              return true;
          };
          return false;
      };
  });
  var eqChildSlot = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof SelectSlot && y instanceof SelectSlot) {
              return true;
          };
          if (x instanceof PlaySlot && y instanceof PlaySlot) {
              return true;
          };
          return false;
      };
  });
  var ordChildSlot = new Data_Ord.Ord(function () {
      return eqChildSlot;
  }, function (x) {
      return function (y) {
          if (x instanceof SelectSlot && y instanceof SelectSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SelectSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SelectSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PlaySlot && y instanceof PlaySlot) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Component.Site line 45, column 8 - line 45, column 45: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var component = (function () {
      var render = function (v) {
          var contents = (function () {
              if (Data_Eq.eq(eqStage)(v.stage)(Queueing.value)) {
                  return function ($72) {
                      return Halogen_HTML_Elements.div([ Component_Common._i("contents"), Component_Common._c("queueing") ])((function (v1) {
                          return Data_Array.cons(Halogen_HTML_Elements.div([ Component_Common._i("searching") ])([ Halogen_HTML_Elements.img([ Component_Common._src("/img/spin.gif") ]) ]))(v1);
                      })($72));
                  };
              };
              if (Data_Boolean.otherwise) {
                  return Halogen_HTML_Elements.div([ Component_Common._i("contents") ]);
              };
              throw new Error("Failed pattern match at Component.Site line 79, column 11 - line 82, column 62: " + [  ]);
          })();
          return contents((function () {
              if (v.gameInfo instanceof Data_Either.Right) {
                  return [ Halogen_HTML_Elements.img([ Component_Common._i("bg"), Component_Common._src(FFI_Import.bg) ]), Halogen_HTML.slot(PlaySlot.value)(Component_Play.component(Data_Eq.eq(eqStage)(v.stage)(Practicing.value))(v.gameInfo.value0))(Data_Unit.unit)(Halogen_HTML_Events.input(HandleGame.create)) ];
              };
              if (v.gameInfo instanceof Data_Either.Left) {
                  return [ Halogen_HTML_Elements.span([ Component_Common._c("error") ])([ Halogen_HTML_Core.text(v.gameInfo.value0) ]), Halogen_HTML.slot(SelectSlot.value)(Component_CharacterSelect.component)(Data_Unit.unit)(Halogen_HTML_Events.input(HandleQueue.create)) ];
              };
              throw new Error("Failed pattern match at Component.Site line 69, column 41 - line 78, column 8: " + [ v.gameInfo.constructor.name ]);
          })());
      };
      var initialState = {
          stage: Waiting.value,
          gameInfo: new Data_Either.Left("")
      };
      var $$eval = function (v) {
          if (v instanceof HandleQueue && v.value0.value0 instanceof Component_Common.Practice) {
              var teamList = Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("/")(Data_Array.reverse(Data_Functor.map(Data_Functor.functorArray)(Structure.characterName_)(v.value0.value1)));
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(Control_Monad_Aff_Class.monadAffAff))(Network_HTTP_Affjax.get(Network_HTTP_Affjax_Response.responsableJson)("/api/practicequeue/" + teamList)))(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                      var $31 = {};
                      for (var $32 in v2) {
                          if ({}.hasOwnProperty.call(v2, $32)) {
                              $31[$32] = v2[$32];
                          };
                      };
                      $31.gameInfo = Data_Argonaut_Generic_Aeson.decodeJson(Structure.genericGameInfo)(v1.response);
                      $31.stage = Practicing.value;
                      return $31;
                  }))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Progress.progress(0.0)(1)(1)))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXStartFirst.value))(function () {
                              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
                          });
                      });
                  });
              });
          };
          if (v instanceof HandleQueue && v.value0.value0 instanceof Component_Common.Quick) {
              var teamList = Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("/")(Data_Array.reverse(Data_Functor.map(Data_Functor.functorArray)(Structure.characterName_)(v.value0.value1)));
              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                  var $39 = {};
                  for (var $40 in v1) {
                      if ({}.hasOwnProperty.call(v1, $40)) {
                          $39[$40] = v1[$40];
                      };
                  };
                  $39.stage = Queueing.value;
                  return $39;
              }))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXApplySkill.value))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.raise(teamList))(function () {
                          return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
                      });
                  });
              });
          };
          if (v instanceof HandleQueue) {
              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
          };
          if (v instanceof HandleGame && v.value0 instanceof Component_Play.Finish) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                  var $48 = {};
                  for (var $49 in v1) {
                      if ({}.hasOwnProperty.call(v1, $49)) {
                          $48[$49] = v1[$49];
                      };
                  };
                  $48.gameInfo = new Data_Either.Left("");
                  $48.stage = Waiting.value;
                  return $48;
              }))(function () {
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
              });
          };
          if (v instanceof HandleGame && v.value0 instanceof Component_Play.ActMsg) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.raise(v.value0.value0))(function () {
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
              });
          };
          if (v instanceof ReceiveMsg) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                  if (v1.stage instanceof Queueing) {
                      var result = Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Parser.jsonParser(v.value0))(Data_Argonaut_Generic_Aeson.decodeJson(Structure.genericGameInfo));
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                          var $59 = {};
                          for (var $60 in v2) {
                              if ({}.hasOwnProperty.call(v2, $60)) {
                                  $59[$60] = v2[$60];
                              };
                          };
                          $59.gameInfo = result;
                          $59.stage = Playing.value;
                          return $59;
                      }))(function () {
                          if (result instanceof Data_Either.Left) {
                              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
                          };
                          if (result instanceof Data_Either.Right) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Progress.progress(turnTime)(1 - result.value0.gamePar | 0)(result.value0.gamePar)))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(FFI_Sound.sound(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(FFI_Sound.SFXStartFirst.value))(function () {
                                      return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
                                  });
                              });
                          };
                          throw new Error("Failed pattern match at Component.Site line 114, column 13 - line 119, column 26: " + [ result.constructor.name ]);
                      });
                  };
                  if (v1.stage instanceof Playing) {
                      var v2 = Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Parser.jsonParser(v.value0))(Data_Argonaut_Generic_Aeson.decodeJson(Structure.genericGame));
                      if (v2 instanceof Data_Either.Left) {
                          return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
                      };
                      if (v2 instanceof Data_Either.Right) {
                          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query.query(eqChildSlot)(PlaySlot.value)(new Component_Common.QueryPlay(new Component_Common.ReceiveGame(v2.value0), v.value1)))(function (v3) {
                              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
                          });
                      };
                      throw new Error("Failed pattern match at Component.Site line 121, column 13 - line 125, column 26: " + [ v2.constructor.name ]);
                  };
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
              });
          };
          throw new Error("Failed pattern match at Component.Site line 84, column 10 - line 126, column 24: " + [ v.constructor.name ]);
      };
      return Halogen_Component.parentComponent(ordChildSlot)({
          initialState: Data_Function["const"](initialState),
          render: render,
          "eval": $$eval,
          receiver: Data_Function["const"](Data_Maybe.Nothing.value)
      });
  })();
  exports["HandleQueue"] = HandleQueue;
  exports["HandleGame"] = HandleGame;
  exports["ReceiveMsg"] = ReceiveMsg;
  exports["Waiting"] = Waiting;
  exports["Queueing"] = Queueing;
  exports["Playing"] = Playing;
  exports["Practicing"] = Practicing;
  exports["component"] = component;
  exports["eqStage"] = eqStage;
})(PS["Component.Site"] = PS["Component.Site"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var produceAff = function (recv) {
      return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorEmit)(Control_Monad_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorEmit))(Control_Monad_Aff.monadAff)(Control_Monad_Aff_AVar.makeEmptyVar))(function (v) {
          return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorEmit)(Control_Monad_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorEmit))(Control_Monad_Aff.monadAff)(Control_Monad_Aff.forkAff(recv(Data_Function.flip(Control_Monad_Aff_AVar.putVar)(v)))))(function (v2) {
              return Control_Coroutine.producer(Control_Monad_Aff.monadAff)(Control_Monad_Aff_AVar.takeVar(v));
          });
      });
  };
  var produce = function (recv) {
      return produceAff(function (send) {
          return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(recv(function ($4) {
              return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.runAff(Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit)))(send($4)));
          }));
      });
  };
  exports["produce"] = produce;
  exports["produceAff"] = produceAff;
})(PS["Control.Coroutine.Aff"] = PS["Control.Coroutine.Aff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var unsafeCoerceAff = Unsafe_Coerce.unsafeCoerce;
  exports["unsafeCoerceAff"] = unsafeCoerceAff;
})(PS["Control.Monad.Aff.Unsafe"] = PS["Control.Monad.Aff.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.warn = function (s) {
    return function () {
      console.warn(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["warn"] = $foreign.warn;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Prelude = PS["Prelude"];
  var MonadFork = function (Functor1, Monad0, fork, join, suspend) {
      this.Functor1 = Functor1;
      this.Monad0 = Monad0;
      this.fork = fork;
      this.join = join;
      this.suspend = suspend;
  };
  var suspend = function (dict) {
      return dict.suspend;
  };
  var monadForkAff = new MonadFork(function () {
      return Control_Monad_Aff.functorFiber;
  }, function () {
      return Control_Monad_Aff.monadAff;
  }, Control_Monad_Aff.forkAff, Control_Monad_Aff.joinFiber, Control_Monad_Aff.suspendAff);
  var join = function (dict) {
      return dict.join;
  };
  var fork = function (dict) {
      return dict.fork;
  };
  exports["fork"] = fork;
  exports["join"] = join;
  exports["suspend"] = suspend;
  exports["MonadFork"] = MonadFork;
  exports["monadForkAff"] = monadForkAff;
})(PS["Control.Monad.Fork.Class"] = PS["Control.Monad.Fork.Class"] || {});
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["window"] = $foreign.window;
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
    "use strict";

  exports._readyState = function (doc) {
    return function () {
      return doc.readyState;
    };
  };
})(PS["DOM.HTML.Document"] = PS["DOM.HTML.Document"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Loading = (function () {
      function Loading() {

      };
      Loading.value = new Loading();
      return Loading;
  })();
  var Interactive = (function () {
      function Interactive() {

      };
      Interactive.value = new Interactive();
      return Interactive;
  })();
  var Complete = (function () {
      function Complete() {

      };
      Complete.value = new Complete();
      return Complete;
  })();
  var parseReadyState = function (v) {
      if (v === "loading") {
          return new Data_Maybe.Just(Loading.value);
      };
      if (v === "interactive") {
          return new Data_Maybe.Just(Interactive.value);
      };
      if (v === "complete") {
          return new Data_Maybe.Just(Complete.value);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["Loading"] = Loading;
  exports["Interactive"] = Interactive;
  exports["Complete"] = Complete;
  exports["parseReadyState"] = parseReadyState;
})(PS["DOM.HTML.Document.ReadyState"] = PS["DOM.HTML.Document.ReadyState"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.HTML.Document"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Document_ReadyState = PS["DOM.HTML.Document.ReadyState"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var readyState = function ($1) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(function ($2) {
          return Data_Maybe.fromJust()(DOM_HTML_Document_ReadyState.parseReadyState($2));
      })($foreign._readyState($1));
  };
  exports["readyState"] = readyState;
})(PS["DOM.HTML.Document"] = PS["DOM.HTML.Document"] || {});
(function(exports) {
    "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.HTML.Window"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_WebStorage_Types = PS["DOM.WebStorage.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  exports["document"] = $foreign.document;
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
    "use strict";

  var getEffProp = function (name) {
    return function (node) {
      return function () {
        return node[name];
      };
    };
  };                                                   

  exports._parentNode = getEffProp("parentNode");          

  exports._nextSibling = getEffProp("nextSibling");

  exports.insertBefore = function (node1) {
    return function (node2) {
      return function (parent) {
        return function () {
          return parent.insertBefore(node1, node2);
        };
      };
    };
  };

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        return parent.appendChild(node);
      };
    };
  };

  exports.removeChild = function (node) {
    return function (parent) {
      return function () {
        return parent.removeChild(node);
      };
    };
  };
})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.Node.Node"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_NodeType = PS["DOM.Node.NodeType"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var parentNode = function ($2) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._parentNode($2));
  };
  var nextSibling = function ($6) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._nextSibling($6));
  };
  exports["parentNode"] = parentNode;
  exports["nextSibling"] = nextSibling;
  exports["insertBefore"] = $foreign.insertBefore;
  exports["appendChild"] = $foreign.appendChild;
  exports["removeChild"] = $foreign.removeChild;
})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
(function(exports) {
    "use strict";                                             

  exports._querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.Node.ParentNode"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var querySelector = function (qs) {
      return function ($3) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._querySelector(qs)($3));
      };
  };
  exports["querySelector"] = querySelector;
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var onMessage = "message";
  exports["onMessage"] = onMessage;
})(PS["DOM.Websocket.Event.EventTypes"] = PS["DOM.Websocket.Event.EventTypes"] || {});
(function(exports) {
    "use strict";

  exports.data_ = function (e) {
    return e.data;
  };
})(PS["DOM.Websocket.Event.MessageEvent"] = PS["DOM.Websocket.Event.MessageEvent"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var readMessageEvent = Data_Foreign.unsafeReadTagged("MessageEvent");
  exports["readMessageEvent"] = readMessageEvent;
})(PS["DOM.Websocket.Event.Types"] = PS["DOM.Websocket.Event.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.Websocket.Event.MessageEvent"];
  var DOM_Websocket_Event_Types = PS["DOM.Websocket.Event.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  exports["data_"] = $foreign.data_;
})(PS["DOM.Websocket.Event.MessageEvent"] = PS["DOM.Websocket.Event.MessageEvent"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_HTML_History = PS["DOM.HTML.History"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var socketToEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["socketToEventTarget"] = socketToEventTarget;
})(PS["DOM.Websocket.Types"] = PS["DOM.Websocket.Types"] || {});
(function(exports) {
    "use strict";

  exports.create = function (url) {
    return function (protocols) {
      return function () {
        return new WebSocket(url, protocols);
      };
    };
  };

  exports.url = function (ws) {
    return function () {
      return ws.url;
    };
  };

  exports.sendImpl = function (ws) {
    return function (value) {
      return function () {
        ws.send(value);
      };
    };
  };
})(PS["DOM.Websocket.WebSocket"] = PS["DOM.Websocket.WebSocket"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.Websocket.WebSocket"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Websocket_BinaryType = PS["DOM.Websocket.BinaryType"];
  var DOM_Websocket_Event_Types = PS["DOM.Websocket.Event.Types"];
  var DOM_Websocket_ReadyState = PS["DOM.Websocket.ReadyState"];
  var DOM_Websocket_Types = PS["DOM.Websocket.Types"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var sendString = function (ws) {
      return function ($10) {
          return $foreign.sendImpl(ws)(Data_Foreign.toForeign($10));
      };
  };
  exports["sendString"] = sendString;
  exports["create"] = $foreign.create;
})(PS["DOM.Websocket.WebSocket"] = PS["DOM.Websocket.WebSocket"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Traversable = PS["Data.Traversable"];
  var Halogen_Aff_Effects = PS["Halogen.Aff.Effects"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_Data_OrdBox = PS["Halogen.Data.OrdBox"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var unRenderStateX = Unsafe_Coerce.unsafeCoerce;
  var unDriverStateX = Unsafe_Coerce.unsafeCoerce;
  var renderStateX_ = function (dictApplicative) {
      return function (f) {
          return unDriverStateX(function (st) {
              return Data_Foldable.traverse_(dictApplicative)(Data_Foldable.foldableMaybe)(f)(st.rendering);
          });
      };
  };
  var mkRenderStateX = function (v) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  var renderStateX = function (dictFunctor) {
      return function (f) {
          return unDriverStateX(function (st) {
              return mkRenderStateX(st.prjQuery)(f(st.rendering));
          });
      };
  };
  var mkDriverStateXRef = Unsafe_Coerce.unsafeCoerce;
  var initDriverState = function (component) {
      return function (input) {
          return function (handler) {
              return function (prjQuery) {
                  return function (lchs) {
                      return function __do() {
                          var v = Control_Monad_Eff_Ref.newRef({})();
                          var v1 = Control_Monad_Eff_Ref.newRef(Data_Map.empty)();
                          var v2 = Control_Monad_Eff_Ref.newRef(Data_Map.empty)();
                          var v3 = Control_Monad_Eff_Ref.newRef(Data_Functor.voidLeft(Data_Maybe.functorMaybe)(component.initializer)(Data_List_Types.Nil.value))();
                          var v4 = Control_Monad_Eff_Ref.newRef(new Data_Maybe.Just(Data_List_Types.Nil.value))();
                          var v5 = Control_Monad_Eff_Ref.newRef(Data_Maybe.Nothing.value)();
                          var v6 = Control_Monad_Eff_Ref.newRef(0)();
                          var v7 = Control_Monad_Eff_Ref.newRef(new Data_Maybe.Just(Data_Map.empty))();
                          var ds = {
                              component: component,
                              state: component.initialState(input),
                              refs: Data_StrMap.empty,
                              children: Data_Map.empty,
                              childrenIn: v1,
                              childrenOut: v2,
                              selfRef: v,
                              handler: handler,
                              pendingQueries: v3,
                              pendingOuts: v4,
                              pendingHandlers: v5,
                              rendering: Data_Maybe.Nothing.value,
                              prjQuery: prjQuery,
                              fresh: v6,
                              subscriptions: v7,
                              lifecycleHandlers: lchs
                          };
                          Control_Monad_Eff_Ref.writeRef(v)(ds)();
                          return mkDriverStateXRef(v);
                      };
                  };
              };
          };
      };
  };
  exports["unDriverStateX"] = unDriverStateX;
  exports["mkDriverStateXRef"] = mkDriverStateXRef;
  exports["renderStateX"] = renderStateX;
  exports["renderStateX_"] = renderStateX_;
  exports["unRenderStateX"] = unRenderStateX;
  exports["initDriverState"] = initDriverState;
})(PS["Halogen.Aff.Driver.State"] = PS["Halogen.Aff.Driver.State"] || {});
(function(exports) {
    "use strict";

  exports.reallyUnsafeRefEq = function (a) {
    return function (b) {
      return a === b;
    };
  };
})(PS["Unsafe.Reference"] = PS["Unsafe.Reference"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Unsafe.Reference"];
  var unsafeRefEq = $foreign.reallyUnsafeRefEq;
  exports["unsafeRefEq"] = unsafeRefEq;
})(PS["Unsafe.Reference"] = PS["Unsafe.Reference"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Applicative_Free = PS["Control.Applicative.Free"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Unsafe = PS["Control.Monad.Aff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Fork_Class = PS["Control.Monad.Fork.Class"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Coyoneda = PS["Data.Coyoneda"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Halogen_Aff_Driver_State = PS["Halogen.Aff.Driver.State"];
  var Halogen_Aff_Effects = PS["Halogen.Aff.Effects"];
  var Halogen_Data_OrdBox = PS["Halogen.Data.OrdBox"];
  var Halogen_Query_EventSource = PS["Halogen.Query.EventSource"];
  var Halogen_Query_ForkF = PS["Halogen.Query.ForkF"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Prelude = PS["Prelude"];
  var Unsafe_Reference = PS["Unsafe.Reference"];        
  var queuingHandler = function (handler) {
      return function (ref) {
          return function (message) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return handler(message);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.writeRef(ref)(new Data_Maybe.Just(new Data_List_Types.Cons(handler(message), v.value0))));
                  };
                  throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval line 174, column 3 - line 178, column 57: " + [ v.constructor.name ]);
              });
          };
      };
  };
  var handleLifecycle = function (lchs) {
      return function (f) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.writeRef(lchs)({
              initializers: Data_List_Types.Nil.value,
              finalizers: Data_List_Types.Nil.value
          })))(function () {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(f))(function (v) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(lchs)))(function (v1) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Data_Foldable.traverse_(Control_Monad_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(v1.finalizers))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Parallel.parSequence_(Control_Monad_Aff.parallelAff)(Data_List_Types.foldableList)(v1.initializers))(function () {
                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v);
                          });
                      });
                  });
              });
          });
      };
  };
  var $$eval = function (render) {
      return function (r) {
          var go = function (ref) {
              return function (v) {
                  if (v instanceof Halogen_Query_HalogenM.State) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v1) {
                          var v2 = v.value0(v1.state);
                          if (Unsafe_Reference.unsafeRefEq(v1.state)(v2.value1)) {
                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v2.value0);
                          };
                          if (Data_Boolean.otherwise) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.writeRef(ref)((function () {
                                  var $41 = {};
                                  for (var $42 in v1) {
                                      if ({}.hasOwnProperty.call(v1, $42)) {
                                          $41[$42] = v1[$42];
                                      };
                                  };
                                  $41.state = v2.value1;
                                  return $41;
                              })())))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(handleLifecycle(v1.lifecycleHandlers)(render(v1.lifecycleHandlers)(ref)))(function () {
                                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v2.value0);
                                  });
                              });
                          };
                          throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval line 78, column 7 - line 84, column 21: " + [ v2.constructor.name ]);
                      });
                  };
                  if (v instanceof Halogen_Query_HalogenM.Subscribe) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v1) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Control_Bind.bind(Control_Monad_Aff.bindAff)(Halogen_Query_EventSource.unEventSource(v.value0))(function (v2) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref["modifyRef'"](v1.fresh)(function (i) {
                                  return {
                                      state: i + 1 | 0,
                                      value: i
                                  };
                              })))(function (v3) {
                                  var done$prime = Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(v1.subscriptions)))(function (v4) {
                                      return Control_Applicative.when(Control_Monad_Aff.applicativeAff)(Data_Maybe.maybe(false)(Data_Map.member(Data_Ord.ordInt)(v3))(v4))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(v2.done)(function () {
                                          return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.modifyRef(v1.subscriptions)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map["delete"](Data_Ord.ordInt)(v3))));
                                      }));
                                  });
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.modifyRef(v1.subscriptions)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map.insert(Data_Ord.ordInt)(v3)(done$prime)))))(function () {
                                      var consumer = Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Control_Monad_Aff.monadAff))(Control_Coroutine["await"](Control_Monad_Aff.monadAff))(function (v4) {
                                          return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Control_Monad_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorAwait))(Control_Monad_Aff.monadAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(v1.subscriptions))))(function (v5) {
                                              return Control_Applicative.when(Control_Monad_Free_Trans.applicativeFreeT(Control_Coroutine.functorAwait)(Control_Monad_Aff.monadAff))(Data_Maybe.isJust(v5))(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Control_Monad_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorAwait))(Control_Monad_Aff.monadAff)(evalF(ref)(v4)))(function (v6) {
                                                  return Control_Applicative.when(Control_Monad_Free_Trans.applicativeFreeT(Control_Coroutine.functorAwait)(Control_Monad_Aff.monadAff))(Data_Eq.eq(Halogen_Query_EventSource.eqSubscribeStatus)(v6)(Halogen_Query_EventSource.Listening.value))(consumer);
                                              }));
                                          });
                                      });
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Coroutine.runProcess(Control_Monad_Aff.monadRecAff)(Control_Coroutine.pullFrom(Control_Monad_Aff.monadRecAff)(consumer)(v2.producer)))(function () {
                                          return done$prime;
                                      });
                                  });
                              });
                          })))(function (v2) {
                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.value1);
                          });
                      });
                  };
                  if (v instanceof Halogen_Query_HalogenM.Lift) {
                      return v.value0;
                  };
                  if (v instanceof Halogen_Query_HalogenM.Halt) {
                      return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error(v.value0));
                  };
                  if (v instanceof Halogen_Query_HalogenM.GetSlots) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v1) {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.value0(Data_Functor.map(Data_List_Types.functorList)(Halogen_Data_OrdBox.unOrdBox)(Data_Map.keys(v1.children))));
                      });
                  };
                  if (v instanceof Halogen_Query_HalogenM.CheckSlot) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v1) {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.value1(Data_Map.member(Halogen_Data_OrdBox.ordOrdBox)(v1.component.mkOrdBox(v.value0))(v1.children)));
                      });
                  };
                  if (v instanceof Halogen_Query_HalogenM.ChildQuery) {
                      return evalChildQuery(ref)(v.value0)(v.value1);
                  };
                  if (v instanceof Halogen_Query_HalogenM.Raise) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v1) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(queuingHandler(v1.handler)(v1.pendingOuts)(v.value0))(function () {
                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.value1);
                          });
                      });
                  };
                  if (v instanceof Halogen_Query_HalogenM.Par) {
                      return Control_Parallel_Class.sequential(Control_Monad_Aff.parallelAff)(Control_Applicative_Free.retractFreeAp(Control_Monad_Aff.applicativeParAff)(Control_Applicative_Free.hoistFreeAp(function ($109) {
                          return Control_Parallel_Class.parallel(Control_Monad_Aff.parallelAff)(evalM(ref)($109));
                      })(v.value0)));
                  };
                  if (v instanceof Halogen_Query_HalogenM.Fork) {
                      return Halogen_Query_ForkF.unFork(function (v1) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(evalM(ref)(v1.value0)))(function (v2) {
                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1.value1(function ($110) {
                                  return Control_Monad_Aff_Unsafe.unsafeCoerceAff(Data_Function.flip(Control_Monad_Aff.killFiber)(v2)($110));
                              }));
                          });
                      })(v.value0);
                  };
                  if (v instanceof Halogen_Query_HalogenM.GetRef) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v1) {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.value1(Data_StrMap.lookup(v.value0)(v1.refs)));
                      });
                  };
                  throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval line 75, column 12 - line 131, column 34: " + [ v.constructor.name ]);
              };
          };
          var evalM = function (ref) {
              return function (v) {
                  return Control_Monad_Free.foldFree(Control_Monad_Aff.monadRecAff)(go(ref))(v);
              };
          };
          var evalF = function (ref) {
              return function (q) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v) {
                      var v1 = v["component"]["eval"](q);
                      return Control_Monad_Free.foldFree(Control_Monad_Aff.monadRecAff)(go(ref))(v1);
                  });
              };
          };
          var evalChildQuery = function (ref) {
              return function (p) {
                  return Data_Coyoneda.unCoyoneda(function (k) {
                      return function (q) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v) {
                              var v1 = Data_Map.lookup(Halogen_Data_OrdBox.ordOrdBox)(v.component.mkOrdBox(p))(v.children);
                              if (v1 instanceof Data_Maybe.Just) {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(v1.value0)))(function (v2) {
                                      return Halogen_Aff_Driver_State.unDriverStateX(function (ds) {
                                          var v3 = ds.prjQuery(q);
                                          if (v3 instanceof Data_Maybe.Just) {
                                              return Data_Functor.map(Control_Monad_Aff.functorAff)(k)(evalF(ds.selfRef)(v3.value0));
                                          };
                                          if (v3 instanceof Data_Maybe.Nothing) {
                                              return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error("Query projection failed for child query"));
                                          };
                                          throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval line 144, column 32 - line 146, column 82: " + [ v3.constructor.name ]);
                                      })(v2);
                                  });
                              };
                              if (v1 instanceof Data_Maybe.Nothing) {
                                  return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error("Slot lookup failed for child query"));
                              };
                              throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval line 141, column 5 - line 147, column 73: " + [ v1.constructor.name ]);
                          });
                      };
                  });
              };
          };
          return function (v) {
              if (v instanceof Halogen_Query_InputF.RefUpdate) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.modifyRef(r)(function (v1) {
                      var $102 = {};
                      for (var $103 in v1) {
                          if ({}.hasOwnProperty.call(v1, $103)) {
                              $102[$103] = v1[$103];
                          };
                      };
                      $102.refs = Data_StrMap.alter(Data_Function["const"](v.value1))(v.value0)(v1.refs);
                      return $102;
                  })))(function () {
                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.value2);
                  });
              };
              if (v instanceof Halogen_Query_InputF.Query) {
                  return evalF(r)(v.value0);
              };
              throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval line 61, column 3 - line 66, column 25: " + [ v.constructor.name ]);
          };
      };
  };
  exports["handleLifecycle"] = handleLifecycle;
  exports["eval"] = $$eval;
  exports["queuingHandler"] = queuingHandler;
})(PS["Halogen.Aff.Driver.Eval"] = PS["Halogen.Aff.Driver.Eval"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Fork_Class = PS["Control.Monad.Fork.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen = PS["Halogen"];
  var Halogen_Aff_Driver_Eval = PS["Halogen.Aff.Driver.Eval"];
  var Halogen_Aff_Driver_State = PS["Halogen.Aff.Driver.State"];
  var Halogen_Aff_Effects = PS["Halogen.Aff.Effects"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_Data_OrdBox = PS["Halogen.Data.OrdBox"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Prelude = PS["Prelude"];        
  var newLifecycleHandlers = Control_Monad_Eff_Ref.newRef({
      initializers: Data_List_Types.Nil.value,
      finalizers: Data_List_Types.Nil.value
  });
  var handleAff = Control_Monad_Aff.runAff_(Data_Either.either(Control_Monad_Eff_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit))));
  var runUI = function (renderSpec) {
      return function (component) {
          return function (i) {
              var subscribe = function (fresh) {
                  return function (ref) {
                      return function (consumer) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeEmptyVar)(function (v) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
                                  var v1 = Control_Monad_Eff_Ref.readRef(fresh)();
                                  Control_Monad_Eff_Ref.modifyRef(fresh)(function (v2) {
                                      return v2 + 1 | 0;
                                  })();
                                  Control_Monad_Eff_Ref.modifyRef(ref)(Data_Map.insert(Data_Ord.ordInt)(v1)(v))();
                                  return v1;
                              }))(function (v1) {
                                  var producer = Control_Coroutine.producer(Control_Monad_Aff.monadAff)(Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Either.Left.create)(Control_Monad_Aff_AVar.takeVar(v)));
                                  return Data_Functor["void"](Control_Monad_Aff.functorAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Coroutine.runProcess(Control_Monad_Aff.monadRecAff)(Control_Coroutine.connect(Control_Monad_Aff.monadRecAff)(Control_Monad_Aff.parallelAff)(producer)(consumer)))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.modifyRef(ref)(Data_Map["delete"](Data_Ord.ordInt)(v1))))(function () {
                                          return Control_Monad_Aff_AVar.killVar(Control_Monad_Eff_Exception.error("ended"))(v);
                                      });
                                  })));
                              });
                          });
                      };
                  };
              };
              var rootHandler = function (ref) {
                  return function (message) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v) {
                          return Data_Foldable.traverse_(Control_Monad_Aff.applicativeAff)(Data_Map.foldableMap)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(Data_Functor.map(Data_Map.functorMap)(Control_Monad_Aff_AVar.putVar(message))(v));
                      });
                  };
              };
              var handlePending = function (ref) {
                  return function __do() {
                      var v = Control_Monad_Eff_Ref.readRef(ref)();
                      Control_Monad_Eff_Ref.writeRef(ref)(Data_Maybe.Nothing.value)();
                      return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v)(function ($63) {
                          return handleAff(Data_Foldable.traverse_(Control_Monad_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(Data_List.reverse($63)));
                      })();
                  };
              };
              var cleanupSubscriptions = function (v) {
                  return function __do() {
                      Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(function ($64) {
                          return handleAff(Data_Foldable.traverse_(Control_Monad_Aff.applicativeAff)(Data_Map.foldableMap)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))($64));
                      }))(Control_Monad_Eff_Ref.readRef(v.subscriptions))();
                      return Control_Monad_Eff_Ref.writeRef(v.subscriptions)(Data_Maybe.Nothing.value)();
                  };
              };
              var squashChildInitializers = function (lchs) {
                  return function (preInits) {
                      return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                          var parentInitializer = Data_Functor.map(Data_Maybe.functorMaybe)(function ($65) {
                              return evalF(st.selfRef)(Halogen_Query_InputF.Query.create($65));
                          })(st.component.initializer);
                          return Control_Monad_Eff_Ref.modifyRef(lchs)(function (handlers) {
                              return {
                                  initializers: new Data_List_Types.Cons(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Parallel.parSequence_(Control_Monad_Aff.parallelAff)(Data_List_Types.foldableList)(Data_List.reverse(handlers.initializers)))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Data_Foldable.sequence_(Control_Monad_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(parentInitializer))(function () {
                                          return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
                                              handlePending(st.pendingQueries)();
                                              return handlePending(st.pendingOuts)();
                                          });
                                      });
                                  }), preInits),
                                  finalizers: handlers.finalizers
                              };
                          });
                      });
                  };
              };
              var runComponent = function (lchs) {
                  return function (handler) {
                      return function (j) {
                          return function (prjQuery) {
                              return Halogen_Component.unComponent(function (c) {
                                  return function __do() {
                                      var v = newLifecycleHandlers();
                                      var v1 = Halogen_Aff_Driver_State.initDriverState(c)(j)(handler)(prjQuery)(v)();
                                      var v2 = Control_Monad_Eff_Ref.readRef(lchs)();
                                      Control_Monad_Eff_Ref.writeRef(lchs)({
                                          initializers: Data_List_Types.Nil.value,
                                          finalizers: v2.finalizers
                                      })();
                                      Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(Halogen_Aff_Driver_State.unDriverStateX(function ($66) {
                                          return render(lchs)((function (v3) {
                                              return v3.selfRef;
                                          })($66));
                                      }))(Control_Monad_Eff_Ref.readRef(v1))();
                                      Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(squashChildInitializers(lchs)(v2.initializers))(Control_Monad_Eff_Ref.readRef(v1))();
                                      return v1;
                                  };
                              });
                          };
                      };
                  };
              };
              var renderChild = function (lchs) {
                  return function (handler) {
                      return function (mkOrdBox) {
                          return function (childrenInRef) {
                              return function (childrenOutRef) {
                                  return Halogen_Component.unComponentSlot(function (p) {
                                      return function (ctor) {
                                          return function (input) {
                                              return function (inputQuery) {
                                                  return function (outputQuery) {
                                                      return function (prjQuery) {
                                                          var ordP = mkOrdBox(p);
                                                          return function __do() {
                                                              var v = Control_Monad_Eff_Ref.readRef(childrenInRef)();
                                                              var v1 = (function () {
                                                                  var v1 = Data_Map.pop(Halogen_Data_OrdBox.ordOrdBox)(ordP)(v);
                                                                  if (v1 instanceof Data_Maybe.Just) {
                                                                      return function __do() {
                                                                          Control_Monad_Eff_Ref.writeRef(childrenInRef)(v1.value0.value1)();
                                                                          Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(inputQuery(input))(function (q) {
                                                                              return function __do() {
                                                                                  var v2 = Control_Monad_Eff_Ref.readRef(v1.value0.value0)();
                                                                                  return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                                                                                      return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(st.prjQuery(q))(function ($67) {
                                                                                          return handleAff(evalF(st.selfRef)(Halogen_Query_InputF.Query.create($67)));
                                                                                      });
                                                                                  })(v2)();
                                                                              };
                                                                          })();
                                                                          return v1.value0.value0;
                                                                      };
                                                                  };
                                                                  if (v1 instanceof Data_Maybe.Nothing) {
                                                                      return runComponent(lchs)(function ($68) {
                                                                          return Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit))(handler)(outputQuery($68));
                                                                      })(input)(prjQuery)(ctor);
                                                                  };
                                                                  throw new Error("Failed pattern match at Halogen.Aff.Driver line 260, column 14 - line 268, column 92: " + [ v1.constructor.name ]);
                                                              })()();
                                                              var v2 = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Map.member(Halogen_Data_OrdBox.ordOrdBox)(ordP))(Control_Monad_Eff_Ref.readRef(childrenOutRef))();
                                                              Control_Applicative.when(Control_Monad_Eff.applicativeEff)(v2)(Control_Monad_Eff_Unsafe.unsafeCoerceEff(Control_Monad_Eff_Console.warn("Halogen: Duplicate slot address was detected during rendering, unexpected results may occur")))();
                                                              Control_Monad_Eff_Ref.modifyRef(childrenOutRef)(Data_Map.insert(Halogen_Data_OrdBox.ordOrdBox)(ordP)(v1))();
                                                              return Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_Eff_Ref.readRef(v1))(Halogen_Aff_Driver_State.renderStateX(Control_Monad_Eff.functorEff)(function (v3) {
                                                                  if (v3 instanceof Data_Maybe.Nothing) {
                                                                      return Control_Monad_Eff_Exception["throw"]("Halogen internal error: child was not initialized in renderChild");
                                                                  };
                                                                  if (v3 instanceof Data_Maybe.Just) {
                                                                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(renderSpec.renderChild(v3.value0));
                                                                  };
                                                                  throw new Error("Failed pattern match at Halogen.Aff.Driver line 274, column 36 - line 276, column 50: " + [ v3.constructor.name ]);
                                                              }))();
                                                          };
                                                      };
                                                  };
                                              };
                                          };
                                      };
                                  });
                              };
                          };
                      };
                  };
              };
              var render = function (lchs) {
                  return function ($$var) {
                      return function __do() {
                          var v = Control_Monad_Eff_Ref.readRef($$var)();
                          var v1 = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Maybe.isNothing)(Control_Monad_Eff_Ref.readRef(v.pendingHandlers))();
                          Control_Applicative.when(Control_Monad_Eff.applicativeEff)(v1)(Control_Monad_Eff_Ref.writeRef(v.pendingHandlers)(new Data_Maybe.Just(Data_List_Types.Nil.value)))();
                          Control_Monad_Eff_Ref.writeRef(v.childrenOut)(Data_Map.empty)();
                          Control_Monad_Eff_Ref.writeRef(v.childrenIn)(v.children)();
                          var handler = Halogen_Aff_Driver_Eval.queuingHandler(function ($69) {
                              return Data_Functor["void"](Control_Monad_Aff.functorAff)(evalF(v.selfRef)($69));
                          })(v.pendingHandlers);
                          var childHandler = Halogen_Aff_Driver_Eval.queuingHandler(function ($70) {
                              return handler(Halogen_Query_InputF.Query.create($70));
                          })(v.pendingQueries);
                          var v2 = renderSpec.render(function ($71) {
                              return handleAff(handler($71));
                          })(renderChild(lchs)(childHandler)(v.component.mkOrdBox)(v.childrenIn)(v.childrenOut))(v.component.render(v.state))(v.rendering)();
                          var v3 = Control_Monad_Eff_Ref.readRef(v.childrenOut)();
                          Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_Eff_Ref.readRef(v.childrenIn))(Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Map.foldableMap)(function (childVar) {
                              return function __do() {
                                  var v4 = Control_Monad_Eff_Ref.readRef(childVar)();
                                  Halogen_Aff_Driver_State.renderStateX_(Control_Monad_Eff.applicativeEff)(renderSpec.removeChild)(v4)();
                                  return finalize(lchs)(v4)();
                              };
                          }))();
                          Control_Monad_Eff_Ref.modifyRef(v.selfRef)(function (v4) {
                              return {
                                  rendering: new Data_Maybe.Just(v2),
                                  children: v3,
                                  component: v4.component,
                                  state: v4.state,
                                  refs: v4.refs,
                                  childrenIn: v4.childrenIn,
                                  childrenOut: v4.childrenOut,
                                  selfRef: v4.selfRef,
                                  handler: v4.handler,
                                  pendingQueries: v4.pendingQueries,
                                  pendingOuts: v4.pendingOuts,
                                  pendingHandlers: v4.pendingHandlers,
                                  prjQuery: v4.prjQuery,
                                  fresh: v4.fresh,
                                  subscriptions: v4.subscriptions,
                                  lifecycleHandlers: v4.lifecycleHandlers
                              };
                          })();
                          return Control_Applicative.when(Control_Monad_Eff.applicativeEff)(v1)(Data_Function.flip(Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEff))(Data_Unit.unit)(function (v4) {
                              return function __do() {
                                  var v5 = Control_Monad_Eff_Ref.readRef(v.pendingHandlers)();
                                  Control_Monad_Eff_Ref.writeRef(v.pendingHandlers)(new Data_Maybe.Just(Data_List_Types.Nil.value))();
                                  Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(function ($72) {
                                      return handleAff(Data_Foldable.traverse_(Control_Monad_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(Data_List.reverse($72)));
                                  })(v5)();
                                  var v6 = Control_Monad_Eff_Ref.readRef(v.pendingHandlers)();
                                  var $57 = Data_Maybe.maybe(false)(Data_List["null"])(v6);
                                  if ($57) {
                                      return Data_Functor.voidLeft(Control_Monad_Eff.functorEff)(Control_Monad_Eff_Ref.writeRef(v.pendingHandlers)(Data_Maybe.Nothing.value))(new Control_Monad_Rec_Class.Done(Data_Unit.unit))();
                                  };
                                  return new Control_Monad_Rec_Class.Loop(Data_Unit.unit);
                              };
                          }))();
                      };
                  };
              };
              var finalize = function (lchs) {
                  return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                      return function __do() {
                          cleanupSubscriptions(st)();
                          Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function ($73) {
                              return evalF(st.selfRef)(Halogen_Query_InputF.Query.create($73));
                          })(st.component.finalizer))(function (f) {
                              return Control_Monad_Eff_Ref.modifyRef(lchs)(function (handlers) {
                                  return {
                                      initializers: handlers.initializers,
                                      finalizers: new Data_List_Types.Cons(f, handlers.finalizers)
                                  };
                              });
                          })();
                          return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Map.foldableMap)(st.children)(Control_Bind.composeKleisliFlipped(Control_Monad_Eff.bindEff)(finalize(lchs))(Control_Monad_Eff_Ref.readRef))();
                      };
                  });
              };
              var evalF = function (ref) {
                  return Halogen_Aff_Driver_Eval["eval"](render)(ref);
              };
              var evalDriver = function (ref) {
                  return function (prjQuery) {
                      return function (q) {
                          var v = prjQuery(q);
                          if (v instanceof Data_Maybe.Just) {
                              return evalF(ref)(new Halogen_Query_InputF.Query(v.value0));
                          };
                          if (v instanceof Data_Maybe.Nothing) {
                              return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Exception.throwException(Control_Monad_Eff_Exception.error("Halogen internal error: query projection failed in runUI'")));
                          };
                          throw new Error("Failed pattern match at Halogen.Aff.Driver line 138, column 5 - line 140, column 110: " + [ v.constructor.name ]);
                      };
                  };
              };
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(newLifecycleHandlers))(function (v) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.newRef(0)))(function (v1) {
                      return Halogen_Aff_Driver_Eval.handleLifecycle(v)(function __do() {
                          var v2 = Control_Monad_Eff_Ref.newRef(Data_Map.empty)();
                          return Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(runComponent(v)(rootHandler(v2))(i)(Data_Maybe.Just.create)(component))(Control_Monad_Eff_Ref.readRef))(Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)({
                                  query: evalDriver(st.selfRef)(st.prjQuery),
                                  subscribe: subscribe(v1)(v2)
                              });
                          }))();
                      });
                  });
              });
          };
      };
  };
  exports["runUI"] = runUI;
})(PS["Halogen.Aff.Driver"] = PS["Halogen.Aff.Driver"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Event_EventTarget = PS["DOM.Event.EventTarget"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Document = PS["DOM.HTML.Document"];
  var DOM_HTML_Document_ReadyState = PS["DOM.HTML.Document.ReadyState"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var DOM_Node_ParentNode = PS["DOM.Node.ParentNode"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen_Aff_Effects = PS["Halogen.Aff.Effects"];
  var Prelude = PS["Prelude"];        
  var selectElement = function (query) {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(Control_Bind.composeKleisliFlipped(Control_Monad_Eff.bindEff)(function ($12) {
          return DOM_Node_ParentNode.querySelector(query)(DOM_HTML_Types.htmlDocumentToParentNode($12));
      })(DOM_HTML_Window.document))(DOM_HTML.window)))(function (v) {
          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)((function () {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_Maybe.Just) {
                  return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Control_Monad_Except.runExcept(DOM_HTML_Types.readHTMLElement(Data_Foreign.toForeign(v.value0))));
              };
              throw new Error("Failed pattern match at Halogen.Aff.Util line 59, column 8 - line 61, column 88: " + [ v.constructor.name ]);
          })());
      });
  };
  var runHalogenAff = Control_Monad_Aff.runAff_(Data_Either.either(Control_Monad_Eff_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit))));
  var awaitLoad = Control_Monad_Aff.makeAff(function (callback) {
      return function __do() {
          var v = Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(DOM_HTML_Document.readyState)(Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(DOM_HTML_Window.document)(DOM_HTML.window))();
          if (v instanceof DOM_HTML_Document_ReadyState.Loading) {
              var v1 = Data_Functor.map(Control_Monad_Eff.functorEff)(DOM_HTML_Types.windowToEventTarget)(DOM_HTML.window)();
              var listener = DOM_Event_EventTarget.eventListener(function (v2) {
                  return callback(new Data_Either.Right(Data_Unit.unit));
              });
              DOM_Event_EventTarget.addEventListener("DOMContentLoaded")(listener)(false)(v1)();
              return Control_Monad_Aff.effCanceler(DOM_Event_EventTarget.removeEventListener("DOMContentLoaded")(listener)(false)(v1));
          };
          callback(new Data_Either.Right(Data_Unit.unit))();
          return Control_Monad_Aff.nonCanceler;
      };
  });
  var awaitBody = Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(awaitLoad)(function () {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(selectElement("body"))(function (v) {
          return Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error("Could not find body")))(Control_Applicative.pure(Control_Monad_Aff.applicativeAff))(v);
      });
  });
  exports["awaitLoad"] = awaitLoad;
  exports["awaitBody"] = awaitBody;
  exports["selectElement"] = selectElement;
  exports["runHalogenAff"] = runHalogenAff;
})(PS["Halogen.Aff.Util"] = PS["Halogen.Aff.Util"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Halogen_VDom_Machine = PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Types = PS["Halogen.VDom.Types"];
  var Halogen_VDom_Util = PS["Halogen.VDom.Util"];
  var Prelude = PS["Prelude"];
  var eqElemSpec = function (a, b) {
      if (Data_Eq.eq(Halogen_VDom_Types.eqElemName)(a.value1)(b.value1)) {
          if (a.value0 instanceof Data_Maybe.Just && (b.value0 instanceof Data_Maybe.Just && a.value0.value0 === b.value0.value0)) {
              return true;
          };
          if (a.value0 instanceof Data_Maybe.Nothing && b.value0 instanceof Data_Maybe.Nothing) {
              return true;
          };
          return false;
      };
      return false;
  };
  var buildWidget = function (v) {
      var patch = function (v1) {
          return function (v2) {
              if (v2 instanceof Halogen_VDom_Types.Grafted) {
                  return patch(v1)(Halogen_VDom_Types.runGraft(v2.value0));
              };
              if (v2 instanceof Halogen_VDom_Types.Widget) {
                  return function __do() {
                      var v3 = v1.value1(v2.value0)();
                      return new Halogen_VDom_Machine.Step(v3.value0, patch(v3), v3.value2);
                  };
              };
              return function __do() {
                  v1.value2();
                  return buildVDom(v)(v2)();
              };
          };
      };
      var render = function (w) {
          return function __do() {
              var v1 = v.buildWidget(v)(w)();
              return new Halogen_VDom_Machine.Step(v1.value0, patch(v1), v1.value2);
          };
      };
      return render;
  };
  var buildVDom = function (spec) {
      var render = function (v) {
          if (v instanceof Halogen_VDom_Types.Text) {
              return buildText(spec)(v.value0);
          };
          if (v instanceof Halogen_VDom_Types.Elem) {
              return buildElem(spec)(v.value0)(v.value1);
          };
          if (v instanceof Halogen_VDom_Types.Keyed) {
              return buildKeyed(spec)(v.value0)(v.value1);
          };
          if (v instanceof Halogen_VDom_Types.Widget) {
              return buildWidget(spec)(v.value0);
          };
          if (v instanceof Halogen_VDom_Types.Grafted) {
              return buildVDom(spec)(Halogen_VDom_Types.runGraft(v.value0));
          };
          throw new Error("Failed pattern match at Halogen.VDom.DOM line 58, column 12 - line 63, column 44: " + [ v.constructor.name ]);
      };
      return render;
  };
  var buildText = function (v) {
      var done = function (node) {
          return function __do() {
              var v1 = Halogen_VDom_Util.unsafeParent(node);
              return Halogen_VDom_Util.removeChild(node, v1)();
          };
      };
      var patch = function (node, s1) {
          return function (v1) {
              if (v1 instanceof Halogen_VDom_Types.Grafted) {
                  return patch(node, s1)(Halogen_VDom_Types.runGraft(v1.value0));
              };
              if (v1 instanceof Halogen_VDom_Types.Text) {
                  var res = new Halogen_VDom_Machine.Step(node, patch(node, v1.value0), done(node));
                  var v2 = s1 === v1.value0;
                  if (v2) {
                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(res);
                  };
                  return function __do() {
                      Halogen_VDom_Util.setTextContent(v1.value0, node)();
                      return res;
                  };
              };
              return function __do() {
                  done(node)();
                  return buildVDom(v)(v1)();
              };
          };
      };
      var render = function (s) {
          return function __do() {
              var v1 = Halogen_VDom_Util.createTextNode(s, v.document)();
              return new Halogen_VDom_Machine.Step(v1, patch(v1, s), done(v1));
          };
      };
      return render;
  };
  var buildKeyed = function (v) {
      var done = function (node, attrs, steps) {
          return function __do() {
              var v1 = Halogen_VDom_Util.unsafeParent(node);
              Halogen_VDom_Util.removeChild(node, v1)();
              Halogen_VDom_Util.forInE(steps, function (v2, v3) {
                  return v3.value2;
              })();
              return Halogen_VDom_Machine.halt(attrs)();
          };
      };
      var patch = function (node, attrs, v1, ch1, len1) {
          return function (v2) {
              if (v2 instanceof Halogen_VDom_Types.Grafted) {
                  return patch(node, attrs, v1, ch1, len1)(Halogen_VDom_Types.runGraft(v2.value0));
              };
              if (v2 instanceof Halogen_VDom_Types.Keyed && eqElemSpec(v1, v2.value0)) {
                  var v3 = Data_Array.length(v2.value1);
                  if (len1 === 0 && v3 === 0) {
                      return function __do() {
                          var v5 = Halogen_VDom_Machine.step(attrs)(v2.value0.value2)();
                          return new Halogen_VDom_Machine.Step(node, patch(node, v5, v2.value0, ch1, 0), done(node, v5, ch1));
                      };
                  };
                  var onThis = function (k, v5) {
                      return v5.value2;
                  };
                  var onThese = function (k, ix$prime, v5, v6) {
                      return function __do() {
                          var v7 = v5.value1(v6.value1)();
                          Halogen_VDom_Util.insertChildIx(ix$prime, v7.value0, node)();
                          return v7;
                      };
                  };
                  var onThat = function (k, ix, v5) {
                      return function __do() {
                          var v6 = buildVDom(v)(v5.value1)();
                          Halogen_VDom_Util.insertChildIx(ix, v6.value0, node)();
                          return v6;
                      };
                  };
                  return function __do() {
                      var v5 = Halogen_VDom_Util.diffWithKeyAndIxE(ch1, v2.value1, Data_Tuple.fst, onThese, onThis, onThat)();
                      var v6 = Halogen_VDom_Machine.step(attrs)(v2.value0.value2)();
                      return new Halogen_VDom_Machine.Step(node, patch(node, v6, v2.value0, v5, v3), done(node, v6, v5));
                  };
              };
              return function __do() {
                  done(node, attrs, ch1)();
                  return buildVDom(v)(v2)();
              };
          };
      };
      var render = function (v1) {
          return function (ch1) {
              return function __do() {
                  var v2 = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(v1.value0), v1.value1, v.document)();
                  var node = DOM_Node_Types.elementToNode(v2);
                  var onChild = function (k, ix, v3) {
                      return function __do() {
                          var v4 = buildVDom(v)(v3.value1)();
                          Halogen_VDom_Util.insertChildIx(ix, v4.value0, node)();
                          return v4;
                      };
                  };
                  var v3 = Halogen_VDom_Util.strMapWithIxE(ch1, Data_Tuple.fst, onChild)();
                  var v4 = v.buildAttributes(v2)(v1.value2)();
                  return new Halogen_VDom_Machine.Step(node, patch(node, v4, v1, v3, Data_Array.length(ch1)), done(node, v4, v3));
              };
          };
      };
      return render;
  };
  var buildElem = function (v) {
      var done = function (node, attrs, steps) {
          return function __do() {
              var v1 = Halogen_VDom_Util.unsafeParent(node);
              Halogen_VDom_Util.removeChild(node, v1)();
              Control_Monad_Eff.foreachE(steps)(Halogen_VDom_Machine.halt)();
              return Halogen_VDom_Machine.halt(attrs)();
          };
      };
      var patch = function (node, attrs, v1, ch1) {
          return function (v2) {
              if (v2 instanceof Halogen_VDom_Types.Grafted) {
                  return patch(node, attrs, v1, ch1)(Halogen_VDom_Types.runGraft(v2.value0));
              };
              if (v2 instanceof Halogen_VDom_Types.Elem && eqElemSpec(v1, v2.value0)) {
                  var v3 = Data_Array.length(v2.value1);
                  var v4 = Data_Array.length(ch1);
                  if (v4 === 0 && v3 === 0) {
                      return function __do() {
                          var v5 = Halogen_VDom_Machine.step(attrs)(v2.value0.value2)();
                          return new Halogen_VDom_Machine.Step(node, patch(node, v5, v2.value0, ch1), done(node, v5, ch1));
                      };
                  };
                  var onThis = function (ix, v5) {
                      return v5.value2;
                  };
                  var onThese = function (ix, v5, vdom) {
                      return function __do() {
                          var v6 = v5.value1(vdom)();
                          Halogen_VDom_Util.insertChildIx(ix, v6.value0, node)();
                          return v6;
                      };
                  };
                  var onThat = function (ix, vdom) {
                      return function __do() {
                          var v5 = buildVDom(v)(vdom)();
                          Halogen_VDom_Util.insertChildIx(ix, v5.value0, node)();
                          return v5;
                      };
                  };
                  return function __do() {
                      var v5 = Halogen_VDom_Util.diffWithIxE(ch1, v2.value1, onThese, onThis, onThat)();
                      var v6 = Halogen_VDom_Machine.step(attrs)(v2.value0.value2)();
                      return new Halogen_VDom_Machine.Step(node, patch(node, v6, v2.value0, v5), done(node, v6, v5));
                  };
              };
              return function __do() {
                  done(node, attrs, ch1)();
                  return buildVDom(v)(v2)();
              };
          };
      };
      var render = function (v1) {
          return function (ch1) {
              return function __do() {
                  var v2 = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(v1.value0), v1.value1, v.document)();
                  var node = DOM_Node_Types.elementToNode(v2);
                  var onChild = function (ix, child) {
                      return function __do() {
                          var v3 = buildVDom(v)(child)();
                          Halogen_VDom_Util.insertChildIx(ix, v3.value0, node)();
                          return v3;
                      };
                  };
                  var v3 = Halogen_VDom_Util.forE(ch1, onChild)();
                  var v4 = v.buildAttributes(v2)(v1.value2)();
                  return new Halogen_VDom_Machine.Step(node, patch(node, v4, v1, v3), done(node, v4, v3));
              };
          };
      };
      return render;
  };
  exports["buildVDom"] = buildVDom;
  exports["buildText"] = buildText;
  exports["buildElem"] = buildElem;
  exports["buildKeyed"] = buildKeyed;
  exports["buildWidget"] = buildWidget;
})(PS["Halogen.VDom.DOM"] = PS["Halogen.VDom.DOM"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var DOM = PS["DOM"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var DOM_Node_Node = PS["DOM.Node.Node"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen_Aff_Driver = PS["Halogen.Aff.Driver"];
  var Halogen_Aff_Driver_State = PS["Halogen.Aff.Driver.State"];
  var Halogen_Aff_Effects = PS["Halogen.Aff.Effects"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Halogen_VDom = PS["Halogen.VDom"];
  var Halogen_VDom_DOM = PS["Halogen.VDom.DOM"];
  var Halogen_VDom_DOM_Prop = PS["Halogen.VDom.DOM.Prop"];
  var Halogen_VDom_Machine = PS["Halogen.VDom.Machine"];
  var Prelude = PS["Prelude"];
  var Unsafe_Reference = PS["Unsafe.Reference"];
  var substInParent = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(DOM_Node_Node.insertBefore(v)(v1.value0)(v2.value0));
              };
              if (v1 instanceof Data_Maybe.Nothing && v2 instanceof Data_Maybe.Just) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(DOM_Node_Node.appendChild(v)(v2.value0));
              };
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
          };
      };
  };
  var removeChild = function (v) {
      return function __do() {
          var v1 = DOM_Node_Node.parentNode(v.node)();
          return Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(function (pn) {
              return DOM_Node_Node.removeChild(v.node)(pn);
          })(v1)();
      };
  };
  var mkSpec = function (handler) {
      return function (renderChildRef) {
          return function (document) {
              var getNode = Halogen_Aff_Driver_State.unRenderStateX(function (v) {
                  return v.node;
              });
              var done = Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
              var patch = function (slot) {
                  return function __do() {
                      var v = Control_Monad_Eff_Ref.readRef(renderChildRef)();
                      var v1 = v(slot)();
                      var node = getNode(v1);
                      return new Halogen_VDom_Machine.Step(node, patch, done);
                  };
              };
              var buildWidget = function (spec) {
                  return function (slot) {
                      return function __do() {
                          var v = Control_Monad_Eff_Ref.readRef(renderChildRef)();
                          var v1 = v(slot)();
                          var node = getNode(v1);
                          return new Halogen_VDom_Machine.Step(node, patch, done);
                      };
                  };
              };
              var buildAttributes = Halogen_VDom_DOM_Prop.buildProp(handler);
              return {
                  buildWidget: buildWidget,
                  buildAttributes: buildAttributes,
                  document: document
              };
          };
      };
  };
  var renderSpec = function (document) {
      return function (container) {
          var render = function (handler) {
              return function (child) {
                  return function (v) {
                      return function (v1) {
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return function __do() {
                                  var v2 = Control_Monad_Eff_Ref.newRef(child)();
                                  var spec = mkSpec(handler)(v2)(document);
                                  var v3 = Halogen_VDom_DOM.buildVDom(spec)(v)();
                                  var node = Halogen_VDom_Machine.extract(v3);
                                  Data_Functor["void"](Control_Monad_Eff.functorEff)(DOM_Node_Node.appendChild(node)(DOM_HTML_Types.htmlElementToNode(container)))();
                                  return {
                                      machine: v3,
                                      node: node,
                                      renderChildRef: v2
                                  };
                              };
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return function __do() {
                                  Control_Monad_Eff_Ref.writeRef(v1.value0.renderChildRef)(child)();
                                  var v2 = DOM_Node_Node.parentNode(v1.value0.node)();
                                  var v3 = DOM_Node_Node.nextSibling(v1.value0.node)();
                                  var v4 = Halogen_VDom_Machine.step(v1.value0.machine)(v)();
                                  var newNode = Halogen_VDom_Machine.extract(v4);
                                  Control_Applicative.when(Control_Monad_Eff.applicativeEff)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Unsafe_Reference.unsafeRefEq)(v1.value0.node)(newNode))(substInParent(newNode)(v3)(v2))();
                                  return {
                                      machine: v4,
                                      node: newNode,
                                      renderChildRef: v1.value0.renderChildRef
                                  };
                              };
                          };
                          throw new Error("Failed pattern match at Halogen.VDom.Driver line 121, column 5 - line 137, column 80: " + [ v1.constructor.name ]);
                      };
                  };
              };
          };
          return {
              render: render,
              renderChild: Control_Category.id(Control_Category.categoryFn),
              removeChild: removeChild
          };
      };
  };
  var runUI = function (component) {
      return function (i) {
          return function (element) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Data_Functor.map(Control_Monad_Eff.functorEff)(DOM_HTML_Types.htmlDocumentToDocument)(Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(DOM_HTML_Window.document)(DOM_HTML.window))))(function (v) {
                  return Halogen_Aff_Driver.runUI(renderSpec(v)(element))(component)(i);
              });
          };
      };
  };
  exports["runUI"] = runUI;
})(PS["Halogen.VDom.Driver"] = PS["Halogen.VDom.Driver"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Component_Common = PS["Component.Common"];
  var Component_Site = PS["Component.Site"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Coroutine_Aff = PS["Control.Coroutine.Aff"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Event_EventTarget = PS["DOM.Event.EventTarget"];
  var DOM_HTML_History = PS["DOM.HTML.History"];
  var DOM_Websocket_Event_EventTypes = PS["DOM.Websocket.Event.EventTypes"];
  var DOM_Websocket_Event_MessageEvent = PS["DOM.Websocket.Event.MessageEvent"];
  var DOM_Websocket_Event_Types = PS["DOM.Websocket.Event.Types"];
  var DOM_Websocket_Types = PS["DOM.Websocket.Types"];
  var DOM_Websocket_WebSocket = PS["DOM.Websocket.WebSocket"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var FFI_Import = PS["FFI.Import"];
  var FFI_Sound = PS["FFI.Sound"];
  var Halogen = PS["Halogen"];
  var Halogen_Aff = PS["Halogen.Aff"];
  var Halogen_Aff_Util = PS["Halogen.Aff.Util"];
  var Halogen_Query = PS["Halogen.Query"];
  var Halogen_VDom_Driver = PS["Halogen.VDom.Driver"];
  var Operators = PS["Operators"];
  var Prelude = PS["Prelude"];        
  var wsSender = function (socket) {
      return Control_Coroutine.consumer(Control_Monad_Aff.monadAff)(function (v) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(DOM_Websocket_WebSocket.sendString(socket)(v)))(function () {
              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Maybe.Nothing.value);
          });
      });
  };
  var wsProducer = function (socket) {
      var readHelper = function (read) {
          return function ($8) {
              return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Control_Monad_Except.runExcept(read(Data_Foreign.toForeign($8))));
          };
      };
      var listener = function (emit) {
          return DOM_Event_EventTarget.eventListener(function (ev) {
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(readHelper(DOM_Websocket_Event_Types.readMessageEvent)(ev))(function (msgEvent) {
                  return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(readHelper(Data_Foreign.readString)(DOM_Websocket_Event_MessageEvent.data_(msgEvent)))(function (msg) {
                      return emit(new Data_Either.Left(msg));
                  });
              });
          });
      };
      return Control_Coroutine_Aff.produce(function (emit) {
          return DOM_Event_EventTarget.addEventListener(DOM_Websocket_Event_EventTypes.onMessage)(listener(emit))(false)(DOM_Websocket_Types.socketToEventTarget(socket));
      });
  };
  var wsConsumer = function (query) {
      return Control_Coroutine.consumer(Control_Monad_Aff.monadAff)(function (msg) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(query(Halogen_Query.action(Component_Site.ReceiveMsg.create(msg))))(function () {
              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Maybe.Nothing.value);
          });
      });
  };
  var main = function __do() {
      FFI_Sound.register();
      var v = DOM_Websocket_WebSocket.create(FFI_Import.hostname)([  ])();
      return Halogen_Aff_Util.runHalogenAff(Control_Bind.bind(Control_Monad_Aff.bindAff)(Halogen_Aff_Util.awaitBody)(function (v1) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Halogen_VDom_Driver.runUI(Component_Site.component)(Data_Unit.unit)(v1))(function (v2) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(v2.subscribe(wsSender(v)))(function () {
                  return Control_Coroutine.runProcess(Control_Monad_Aff.monadRecAff)(Control_Coroutine.connect(Control_Monad_Aff.monadRecAff)(Control_Monad_Aff.parallelAff)(wsProducer(v))(wsConsumer(v2.query)));
              });
          });
      }))();
  };
  exports["wsProducer"] = wsProducer;
  exports["wsConsumer"] = wsConsumer;
  exports["wsSender"] = wsSender;
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();

}).call(this,require('_process'))
},{"_process":2}],2:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[1]);
