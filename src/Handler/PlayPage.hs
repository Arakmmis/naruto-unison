{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE QuasiQuotes #-}

-- | Interface for the PureScript game client.
module Handler.PlayPage
    ( getChangelogR
    , getPlayR
    , getMuteR
    , getUpdateR
    ) where

import Preludesque

import qualified Data.List.NonEmpty  as L
import qualified Data.Text           as T
import qualified Data.HashMap.Strict as M

import Data.Text  (Text)
import Text.Hamlet
import Yesod.WebSockets

import Calculus
import Core.Import
import Game.Structure
import Game.Characters
import Handler.Play (gameSocket)

shorten ‚à∑ Text ‚Üí Text
shorten = T.map shorten' ‚àò T.filter (‚àâ filterOut)
  where filterOut    = " -:()¬Æ'/?" ‚à∑ String
        shorten' '≈ç' = 'o'
        shorten' '≈å' = 'O'
        shorten' '≈´' = 'u'
        shorten' '≈™' = 'U'
        shorten' '√§' = 'a'
        shorten'  a  =  a

charAvatars ‚à∑ Character ‚Üí [Text]
charAvatars char = (root ‚ß∫ "icon.jpg")
                 : (((root ‚ß∫) ‚àò (‚ß∫ ".jpg")) ‚Ü§ shorten ‚àò label ‚àò head)
                    ‚Ü§ L.take 4 (characterSkills char)
  where root = "/img/ninja/" ‚ß∫ shorten (characterName char) ‚ß∫ "/"

avatars ‚à∑ [Text]
avatars = ("/img/icon/" ‚ß∫)
        ‚Ü§ [ "default.jpg"
          , "gaaraofthefunk.jpg"
          , "ninjainfocards.jpg"
          , "kabugrin.jpg"
          ]
       ‚ß∫ concatMap charAvatars cs'

isMuted ‚à∑ Maybe User ‚Üí Bool
isMuted = maybe False userMuted

-- | Renders the gameplay client.
getPlayR ‚à∑ Handler Html
getPlayR = do
    webSockets gameSocket
    ma ‚Üê maybeAuth
    let (_, muser) = case ma of
          Just (Entity who user) ‚Üí (Just who, Just user)
          Nothing                ‚Üí (Nothing, Nothing)
    let team          = maybe [] (mapMaybe (`M.lookup` cs)) $ muser ‚â´= userTeam
    let bg = fromMaybe "/img/bg/valley2.jpg" $ muser ‚â´= userBackground
    defaultLayout $ do
        setTitle "Naruto Unison"
        addStylesheetRemote "/css/embeds.css"
        $(widgetFile "include/progressbar.min")
        $(widgetFile "include/soundjs.min")
        $(widgetFile "include/normalize")
        $(widgetFile "play/play")
        $(widgetFile "play/ps")

legalChars ‚à∑ String
legalChars = ['0'..'9'] ‚ß∫ ['a'..'z'] ‚ß∫ ['A'..'z']

-- | Updates a user's profile.
getUpdateR ‚à∑ Text ‚Üí Text ‚Üí Text ‚Üí Handler Value
getUpdateR updateName updateBackground updateAvatar
  | "/img/icon/" ‚â† T.take 10 updateAvatar = invalidArgs ["Invalid avatar"]
  | T.any (‚àâ legalChars) updateName = invalidArgs ["Invalid name"]
  | otherwise = do
    (accId, _) ‚Üê requireAuthPair
    user ‚Üê runDB $ updateGet accId [ UserName       =. updateName
                                   , UserBackground =. updateBackground''
                                   , UserAvatar     =. updateAvatar
                                   ]     
    returnJson user
  where updateBackground'  = tTail updateBackground
        updateBackground'' | T.null updateBackground' = Nothing
                           | otherwise                = Just updateBackground'

getChangelogR ‚à∑ Handler Html
getChangelogR = defaultLayout $ do
    setTitle "Naruto Unison: Changelog"
    $(widgetFile "changelog/changelog")

(!) ‚à∑ Text ‚Üí Text ‚Üí Html
usr ! l = [shamlet| $newline never
<a .skill data-usr=#{usr}>#{l}|]

data LogType = Added | New | Rework
data CharacterType = O | R | S

changelog ‚à∑ LogType ‚Üí Text ‚Üí CharacterType ‚Üí Html
changelog logType name characterType = case M.lookup tagName cs of
    Nothing ‚Üí [shamlet|Error: character #{tagName} not found!|]
    Just Character{..} ‚Üí [shamlet|
#{change logType} #{display characterType}
<ul>
  $forall skills <- L.take 4 characterSkills
    <li>
      $forall skill <- separate skills
        <span .skill>
          <a data-name=#{tagName}>#{label skill}
|]
  where separate      = nubBy (eqs label) ‚àò toList
        tag O         = name
        tag R         = name ‚ß∫ " (R)"
        tag S         = name ‚ß∫ " (S)"
        tagName       = tag characterType
        change Added  = "Character added:"  ‚à∑ Text
        change New    = "New character:"    ‚à∑ Text
        change Rework = "Character rework:" ‚à∑ Text
        display O     = [shamlet|#{name}|]
        display R     = [shamlet|#{name}
<a .minor>‚Ñù|]
        display S     = [shamlet|#{name}
<a .minor>ùïä|]

s ‚à∑ Html
s = [shamlet|<a .minor>ùïä|]

--r ‚à∑ Html
--r = [shamlet|<a .minor>‚Ñù|]

-- | Updates a user's muted status.
getMuteR ‚à∑ Bool ‚Üí Handler Value
getMuteR mute = do
  (who, _) ‚Üê requireAuthPair
  runDB $ update who [ UserMuted =. mute ]
  returnJson mute
